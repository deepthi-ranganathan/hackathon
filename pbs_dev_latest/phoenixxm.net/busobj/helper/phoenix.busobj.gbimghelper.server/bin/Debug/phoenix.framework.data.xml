<?xml version="1.0"?>
<doc>
    <assembly>
        <name>phoenix.framework.data</name>
    </assembly>
    <members>
        <member name="T:Phoenix.Utils.OuterJoinType">
            <summary>
            Ansi Outer Join Type utility class
            </summary>
        </member>
        <member name="P:Phoenix.Utils.OuterJoinType.OuterTable">
            <summary>
            Get/Set Outtet Table
            </summary>
        </member>
        <member name="P:Phoenix.Utils.OuterJoinType.InnerTable">
            <summary>
            Get/Set Innter Table
            </summary>
        </member>
        <member name="P:Phoenix.Utils.OuterJoinType.OuterJoinCondition">
            <summary>
            Get/Set OuterJoinCondition
            </summary>
        </member>
        <member name="T:Phoenix.Utils.AnsiOuterJoins">
            <summary>
            AnsiOuterJoins utility class
            </summary>
        </member>
        <member name="M:Phoenix.Utils.AnsiOuterJoins.ConvertAnsiOuterJoins(System.String@)">
            <summary>
            conver the string
            </summary>
            <param name="psSQL"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.Utils.AnsiOuterJoins.ScanPair(System.String,System.String,System.String,System.Int32,System.Int32@,System.String@)">
            <summary>
            Scan the Select
            </summary>
            <param name="psSelect"></param>
            <param name="sLeft"></param>
            <param name="sRight"></param>
            <param name="nStartPos"></param>
            <param name="nOpenPos"></param>
            <param name="sOpenString"></param>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.Data.DbError">
            <summary>
            Collects information relevant to a warning or error returned by Database Server.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbError.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbError.#ctor(System.Data.SqlClient.SqlError)">
            <summary>
             Constructor maping <see cref="T:System.Data.SqlClient.SqlError"/>
            </summary>
            <param name="sqlClientError"><see cref="T:System.Data.SqlClient.SqlError"/> error</param>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbError.#ctor(System.Data.OleDb.OleDbError)">
            <summary>
            Constructor to map <see cref="T:System.Data.OleDb.OleDbError"/>
            </summary>
            <param name="oleDbError"><see cref="T:System.Data.OleDb.OleDbError"/> error object</param>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbError.#ctor(System.Data.Odbc.OdbcError)">
            <summary>
            Constructor to map <see cref="T:System.Data.Odbc.OdbcError"/>
            </summary>
            <param name="odbcError"><see cref="T:System.Data.Odbc.OdbcError"/> object</param>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbError.#ctor(System.Int32,System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
             Common constructor to receive the input values.
            </summary>
            <param name="lineNumber">line number within the Transact-SQL command batch or stored procedure that contains the error.</param>
            <param name="message">text describing the error</param>
            <param name="messageNumber">number that identifies the type of error</param>
            <param name="procName">name of the stored procedure or remote procedure call (RPC) that generated the error</param>
            <param name="serverName">name of the instance of SQL Server that generated the error</param>
            <param name="severity">level of the error returned from SQL Server.</param>
            <param name="ansiState">numeric error code from SQL Server that represents an error, warning or "no data found" message</param>
            <param name="state">The message state. Used as a modifier to the MsgNumber.</param>
            <param name="status">The current state of any transactions that are active on this dialog.</param>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbError.Class">
            <summary>
            Severity level of the error returned from Server
            </summary>
            <remarks>
            Messages with a severity level of 10 or less are informational and indicate problems caused by mistakes in information that a user has entered. Severity levels from 11 through 16 are generated by the user, and can be corrected by the user. Severity levels from 17 through 25 indicate software or hardware errors. When a level 17, 18, or 19 error occurs, you can continue working, although you might not be able to execute a particular statement
            </remarks>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbError.LineNumber">
            <summary>
            Gets the line number within the Transact-SQL command batch or stored procedure that contains the error.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbError.Message">
            <summary>
            Gets the text describing the error.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbError.Number">
            <summary>
            Gets a number that identifies the type of error.
            </summary>
            <remarks>
            This number corresponds to an entry in the master.dbo.sysmessages table.
            </remarks>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbError.Procedure">
            <summary>
            Gets the name of the stored procedure or remote procedure call (RPC) that generated the error.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbError.Server">
            <summary>
            Gets the name of the instance of SQL Server that generated the error.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbError.Source">
            <summary>
            Gets the name of the provider that generated the error.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbError.State">
            <summary>
            Gets a numeric error code from SQL Server that represents an error, warning or "no data found" message. For more information on how to decode these values, see SQL Server Books Online.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbError.ToString">
            <summary>
            Produce a formatted string value
            </summary>
            <returns></returns>	
        </member>
        <member name="T:Phoenix.FrameWork.Data.DbErrorCollection">
            <summary>
            Collects all errors generated by the .NET Framework Data Provider.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbErrorCollection.#ctor">
            <summary>
             basic constructor. Initializes the internals of the collection.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbErrorCollection.Add(Phoenix.FrameWork.Data.DbError)">
            <summary>
             Add the <see cref="T:Phoenix.FrameWork.Data.DbError"/> to the collection
            </summary>
            <param name="dbError"><see cref="T:Phoenix.FrameWork.Data.DbError"/> object</param>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbErrorCollection.Item(System.Int32)">
            <summary>
            Indexer to get the <see cref="T:Phoenix.FrameWork.Data.DbError"/> object from the collection.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbErrorCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether the collection is sychonized with the data source.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbErrorCollection.Count">
            <summary>
            returns the count of the DBError in the collection
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbErrorCollection.CopyTo(Phoenix.FrameWork.Data.DbError[],System.Int32)">
            <summary>
            Copies the elements of the SqlErrorCollection collection into an Array, 
            starting at the given index within the Array.
            </summary>
            <param name="array">The <see cref="T:System.Array"/> to copy elements into. </param>
            <param name="index">The index from which to start copying into the array parameter. </param>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbErrorCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the SqlErrorCollection collection into an Array, 
            starting at the given index within the Array.
            </summary>
            <param name="array">The <see cref="T:System.Array"/> to copy elements into. </param>
            <param name="index">The index from which to start copying into the array parameter. </param>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbErrorCollection.SyncRoot">
            <summary>
            Gets an Object that can be used to synchronize access to the <see cref="T:Phoenix.FrameWork.Data.DbErrorCollection"/>
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbErrorCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Phoenix.FrameWork.Data.DbException">
            <summary>
            The exception that is thrown when SQL Server returns a warning or error.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbException.#ctor">
            <summary>
            Public constructor.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This protected constructor is used for deserialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbException.#ctor(System.Data.SqlClient.SqlException)">
            <summary>
            DbException to map from <see cref="T:System.Data.SqlClient.SqlException"/>
            </summary>
            <param name="sqlClientException">A <see cref="T:System.Data.SqlClient.SqlException"/> from which the new DbEception has tp be created </param>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbException.#ctor(System.Data.OleDb.OleDbException)">
            <summary>
            DbException to map from <see cref="T:System.Data.OleDb.OleDbException"/>
            </summary>
            <param name="oleDbException">A <see cref="T:System.Data.OleDb.OleDbException"/> from which the new DbEception has tp be created </param>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbException.#ctor(System.Data.Odbc.OdbcException)">
            <summary>
            DbException to map from <see cref="T:System.Data.Odbc.OdbcException"/>
            </summary>
            <param name="odbcException">A <see cref="T:System.Data.Odbc.OdbcException"/> from which the new DbEception has tp be created </param>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbException.Class">
            <summary>
            Severity level of the error returned from Server
            </summary>
            <remarks>
            Returns the value from the first Error in the collection
            Messages with a severity level of 10 or less are informational and indicate problems caused by mistakes in information that a user has entered. Severity levels from 11 through 16 are generated by the user, and can be corrected by the user. Severity levels from 17 through 25 indicate software or hardware errors. When a level 17, 18, or 19 error occurs, you can continue working, although you might not be able to execute a particular statement
            </remarks>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbException.Errors">
            <summary>
            Gets a collection of one or more <see cref="T:Phoenix.FrameWork.Data.DbError"/> objects that give detailed information about exceptions generated by the .NET Framework Data Provider.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbException.LineNumber">
            <summary>
            Gets the line number within the Transact-SQL command batch or stored procedure that generated the error.
            </summary>
            <remarks>
            The line numbering starts at 1; if 0 is returned, the line number is not applicable.
            </remarks>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbException.Procedure">
            <summary>
            Gets the name of the stored procedure or remote procedure call (RPC) that generated the error.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbException.Server">
            <summary>
            Gets the name of the computer running an instance of RDBMS Server that generated the error.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbException.Source">
            <summary>
            Gets the name of the provider that generated the error
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbException.State">
            <summary>
            Gets a numeric error code from SQL Server that represents an error, warning or "no data found" message. For more information on how to decode these values, see SQL Server Books Online.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbException.ErrorNumber">
            <summary>
            Error Number
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbException.Message">
            <summary>
            Gets the text describing the error.
            </summary>
            <remarks>
            This method returns a single string that contains a concatenation of all of the 
            Message properties of all of the SqlError objects in the Errors collection. 
            Each message, except the last one, is followed by a carriage return/line feed
            </remarks>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Phoenix.FrameWork.Data.DbHelper">
            <summary>
            Database Heler abstract implementation of IDbHelper.
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Data.DbHelper.SqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Data.DbHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by DbHelper</summary>
        </member>
        <member name="F:Phoenix.FrameWork.Data.DbHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.BeginTran">
            <summary>
            Create a new Transaction or gets the internal transaction
            </summary>
            <returns></returns>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbHelper.CmdTimeOut">
            <summary> - DGupta - #73274 Ops Ov Console . CMD_TimeOut is configurable
            Gets/Sets the comman Time Out property.  Default is 10 minutes.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.BeginSavePoint(System.String)">
            <summary>
            Create a savepoint on the default transaction
            </summary>
            <param name="savepointName"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.BeginSavePoint(System.Data.IDbTransaction,System.String)">
            <summary>
            Create a savepoint on the given transaction
            </summary>
            <param name="tran"></param>
            <param name="savepointName"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.RollBackSavePoint(System.String)">
            <summary>
            Rollback the savepoint for the default transaction
            </summary>
            <param name="savepointName"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.RollBackSavePoint(System.Data.IDbTransaction,System.String)">
            <summary>
            Rollback the savepoint for the given transaction
            </summary>
            <param name="tran"></param>
            <param name="savepointName"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.Rollback">
            <summary>
            Rollback the internal transaction associated with the internal connection
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.Commit">
            <summary>
            Commit the internal transaction associated with the internal connection
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.ExecuteReader(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.	
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "sp_help", new Parameter("@name", "my_sp"));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.ExecuteReader(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "sp_help", new SqlParameter("@objname", "SP_HELP"));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.ExecuteReader(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided transaction object. 
            </summary>
            <remarks>
            e.g.:  
            	SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "sp_help");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A <see cref="T:System.Data.IDataReader"/> containing the resultset generated by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.ExecuteReader(System.Data.IDbTransaction,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided transaction object. 
            </summary>
            <remarks>
            While executing  <see cref="F:System.Data.CommandType.Text"/>  is assumed.
            
            e.g.:  
            	SqlDataReader dr = ExecuteReader(trans, "sp_help");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A <see cref="T:System.Data.IDataReader"/> containing the resultset generated by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.ExecuteReader(System.Data.IDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             IDataReader dr = ExecuteReader( connection, CommandType.StoredProcedure, "sp_help");
             IDataReader dr = ExecuteReader( connection, CommandType.StoredProcedure, "Select * from sysobjects");
            </remarks>
            <param name="connection">A valid Database Connection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An IDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.ExecuteReader(System.Data.IDbConnection,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             IDataReader dr = ExecuteReader( connection, "sp_help");
             IDataReader dr = ExecuteReader( connection, "Select * from sysobjects");
            </remarks>
            <param name="connection">A valid Database  Connection</param>
            <param name="commandText">T-SQL command</param>
            <returns>An IDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.ExecuteReader(System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection.
            Uses internal connection object. 
            </summary>
            <remarks>
            e.g.:  
             IDataReader dr = ExecuteReader(  "sp_help");
             IDataReader dr = ExecuteReader(  "Select * from sysobjects");
            </remarks>
            <param name="commandText">T-SQL command</param>
            <returns>An IDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.ExecuteReader(System.String,System.Collections.ArrayList)">
            <summary>
            Execute the Reader for the array list of parameters
            </summary>
            <param name="sqlStatement">T-SQL Command </param>
            <param name="parameters">Array list containing IDataParameter</param>
            <returns>An IDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.ExecuteScalar(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid Database Transaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.ExecuteScalar(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "psp_getptid", new SqlParameter("@tableName", "MUTHU_TEST"));
            </remarks>
            <param name="connection">A valid database connection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of IDataParameter used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.ExecuteScalar(System.Data.IDbTransaction,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int ptid = (int)ExecuteScalar(trans, "psp_get_ptid ""adfaf""");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.ExecuteScalar(System.Data.IDbConnection,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int ptid = (int)ExecuteScalar(conn, "psp_get_ptid ""asdf""");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandText">The CommandType (stored procedure, text, etc.)</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.ExecuteScalar(System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <param name="commandText">T-Sql command </param>
            <returns>Return value from the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.ExecuteScalar(System.String,System.Collections.ArrayList)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <param name="commandText">T-Sql command </param>
            <param name="parameters">ArrayList of IDataParameters</param>
            <returns>Return value from the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.ExecuteNonQuery(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
             Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
             using the provided parameters.
             </summary>
             <remarks>
             e.g.:  
              int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
             </remarks>
             <param name="transaction">A valid SqlTransaction</param>
             <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
             <param name="commandText">The stored procedure name or T-SQL command</param>
             <param name="commandParameters">An array of SqlParamters used to execute the command</param>
             <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.ExecuteNonQuery(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.ExecuteNonQuery(System.Data.IDbTransaction,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided transaction. 
            </summary>
            <remarks>
            During execution <see cref="F:System.Data.CommandType.Text"/> is assumed.
            e.g.:  
             int result = ExecuteNonQuery(conn, "Update tbl1 set col_1 = 1 ");
            </remarks>
            <param name="transaction">A valid <see cref="T:System.Data.IDbTransaction"/></param>
            <param name="commandText">The T-SQL command</param>
            <returns>A <see cref="T:System.Int32"/> value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.UpdateAndVerify(System.Data.IDbConnection,System.String,System.Int32)">
            <summary>
            Updates and verifies the number of rows updated.  Creates a new transaction, then makes the SQL execution.
            If the number of rows updated is not equal to expectedrows  then rollsback, otherwise commit.
            </summary>
            <param name="connection">A Valid Database connection</param>
            <param name="commandText">Update Statement.</param>
            <param name="rowsToBeUpdated">expected number of rows to be updated.</param>
            <returns>True if the updated is success otherwise false.</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.ExecuteNonQuery(System.Data.IDbConnection,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, "Update tbl1 set value = 1 ");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandText">The T-SQL command</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.ExecuteNonQuery(System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the internal Connection/Transaction object
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, "Update tbl1 set value = 1 ");
            </remarks>
            <param name="commandText">The T-SQL command</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.ExecuteNonQuery(System.String,System.Collections.ArrayList)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the internal Connection/Transaction object
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, "Update tbl1 set value = 1 ");
            </remarks>
            <param name="commandText">The T-SQL command</param>
            <param name="parameters">Arraylist of IDataParameters</param>
            <returns></returns>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbHelper.DbPrefix">
            <summary>
            Database Prefix  to be used in the SQLStatement.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbHelper.CopyStatus">
            <summary>
            CopyStatus of Xm Database. B, C, D, E
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbHelper.XmDbStatus">
            <summary>
            XmDbStatus
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbHelper.IsPrimaryDbAvailable">
            <summary>
            Ture if the primary database is available; false otherwise.
            Information fetched from XP_CONTROL
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbHelper.IsDenaliServer">
            <summary>
            Tells if the server is 
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbHelper.PhoenixDbName">
            <summary>
            PhoenixDbName to be used. Suffixed with two dots (..)
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbHelper.XmDbName">
            <summary>
            Xm Database Name. suffixed with two dots.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbHelper.ConnectionString">
            <summary>
            Connection string used by this object
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbHelper.ServerType">
            <summary>
            Server type for this DbHeper Object
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbHelper.Connection">
            <summary>
            Connection object usable for this DbHelper 
            </summary>
            <remarks>
            The connection object used the connection string defined for the dbHelper. 
            The connection returned is a open connection.
            </remarks>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbHelper.Transaction">
            <summary>
            Returns the Transaction object ased on the <see cref="P:Phoenix.FrameWork.Data.DbHelper.Connection"/>Connection.  
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbHelper.DbCurrentDate">
            <summary>
            SQL representation for the database currentDate. (e.g) getdate()
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbHelper.DbCurrentDateTime">
            <summary>
            SQL representation for the database currentDateTime. (e.g) getdate()
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbHelper.DbCurrentTimeStamp">
            <summary>
            SQL representation for the database currentDateTime. (e.g) getdate()
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.NewConnection">
            <summary>
            Creates a new connection and returns it. Uses the internal <see cref="P:Phoenix.FrameWork.Data.DbHelper.ConnectionString"/>connection string available in the object.
            </summary>
            <returns>Valid Database Connection object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.NewConnection(System.Boolean)">
            <summary>
            Create a new connection and opens it if requested.
            </summary>
            <param name="isOpenConnection">True if the open connection is requested.</param>
            <returns>Valid Database Connection object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.NewConnection(System.String)">
            <summary>
            Create
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.NewCommand(System.Data.IDbTransaction)">
            <summary>
            If transaction is null then create a new command
            </summary>
            <param name="transaction">A <see cref="T:System.Data.IDbTransaction"/> object</param>
            <returns>new Command object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.NewCommand(System.Data.IDbConnection)">
            <summary>
            Creates a new command for the transaction
            </summary>
            <remarks>
            If connection is null then use  intenal connection to create command
            else uses the connection to create the command 
            </remarks>
            <param name="connection">A <see cref="T:System.Data.IDbConnection"/> connection object</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.NewParameter(System.String,System.Object)">
            <summary>
            creates and returns a new instance of the IDataParameter class with the parameter name and a value of the 
            new AseParameter.
            </summary>
            <param name="parameterName">The name of the parameter </param>
            <param name="value">An <see cref="T:System.Object"/> that is the value of the IDataParameter</param>
            <returns>AseParameter</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.NewParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            returns a newly created IDataParameter
            </summary>
            <param name="parameterName">Name of the parameter</param>
            <param name="dbType">One of the <see cref="T:System.Data.DbType"/></param>
            <param name="size">The length of the parameter</param>
            <returns>IDataParameter</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.NewParameter(System.String,System.Data.DbType)">
            <summary>
            creates a new Parameter for the dbType specified 
            </summary>
            <param name="parameterName">name of the parameter</param>
            <param name="dbType">type ofthe parameter</param>
            <returns>IDataParameter object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.NewParameter(System.String,Phoenix.FrameWork.Core.FieldType)">
            <summary>
            creates a new Parameter for the dbType specified 
            </summary>
            <param name="parameterName">name of the parameter</param>
            <param name="dbType">type ofthe parameter</param>
            <returns>IDataParameter object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.NewParameter(System.Int32)">
            <summary>
            returns an array of IDataParameter for the specified size.
            </summary>
            <param name="size">number of new parameters needed</param>
            <returns>array of IDataParameter</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.NewParameter(System.Collections.ArrayList)">
            <summary>
            returns an array of IDataParameter copied from the param collection.
            </summary>
            <param name="parameters">Array List of parameters</param>
            <returns>array of IDataParameter</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.NewParameter">
            <summary>
            Creates and returns a new IDataParameter
            </summary>
            <returns>A new <see cref="T:System.Data.IDataParameter"/> </returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.NewDbException(System.Exception)">
            <summary>
            Creates a <see cref="T:Phoenix.FrameWork.Data.DbException"/> and returns it.
            </summary>
            <remarks>
            If the paremeter exception is not exepection exception then the same exception will be thrown 
            </remarks>
            <param name="exception">current exception</param>
            <returns><see cref="T:Phoenix.FrameWork.Data.DbException"/> object</returns>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbHelper.IsOfflineDb">
            <summary>
            Get/Set the offline DB Values. True if the connection is made to an offline database.
            False if theconnection is made to the main database.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbHelper.IsInTransaction">
            <summary>
            True if the Transaction is in Transaction
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.ExecuteReader(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[],Phoenix.FrameWork.Data.DbHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.PrepareCommand(System.Data.IDbCommand,System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.AttachParameters(System.Data.IDbCommand,System.Data.IDataParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of SqlParameters to be added to command</param>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.Clone">
            <summary>
            Returns a clone of the dbHelper.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.NewDataAdapter(System.String)">
            <summary>
            Creates and returns a Data Adapter
            </summary>
            <param name="selectCommandText"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.GetCmdForDataAdapter(System.String)">
            <summary>
            Creates and prepares a command needed for data adapters
            </summary>
            <param name="selectCommandText"></param>
            <returns></returns>
        </member>
        <member name="P:Phoenix.FrameWork.Data.DbHelper.OtherConnectionInfo">
            <summary>
            Other connection information
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelper.InitializeOtherInfo(Phoenix.FrameWork.Core.IDbConfiguration)">
            <summary>
            Initialize the other connection information
            </summary>
            <param name="dbConfig"></param>
        </member>
        <member name="P:Phoenix.FrameWork.Data.OtherConnectionInfo.ConnectionIsPhoenixDb">
            <summary>
            Connection string points to Phoenix database
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Data.OtherConnectionInfo.ConnectionIsXmDb">
            <summary>
            Conection string points to Xm database
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Data.DbHelperFactory">
            <summary>
            Db Helper Factory implementation of <see cref="T:Phoenix.FrameWork.Core.IDbHelperFactory"/>
            </summary>
            <remarks>
            There will be only one DbHelper factory by session, and which will be available from <see cref="P:Phoenix.FrameWork.Core.CoreService.DbHelper"/>
            </remarks>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelperFactory.#ctor">
            <summary>
            Simple Constructor.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelperFactory.GetDbHelper(Phoenix.FrameWork.Core.ServerType)">
            <summary>
            Makes the DbHelper object for the ServeType passed in.
            </summary>
            <param name="serverType"><see cref="T:Phoenix.FrameWork.Core.ServerType"/> for which the DbHelper object needs to be made	</param>
            <returns>DbHelper</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelperFactory.GetDbHelper(System.Int32)">
            <summary>
            Makes the DbHelpere object for the applicationId passed in
            </summary>
            <param name="applicationId">integer representation of RelGroupName and DbDefName in the configFile</param>
            <returns>An <see cref="T:Phoenix.FrameWork.Core.IDbHelper"/> object if success otherwise null</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelperFactory.GetDbHelper(System.String,System.String)">
            <summary>
            Makes the DbHelper object for the relGroupName and  dbDefName combination
            </summary>
            <param name="relGroupName">Release groupName as defined in the Configuration.</param>
            <param name="dbDefName">Database definition name as defined in the configuration.</param>
            <returns>An <see cref="T:Phoenix.FrameWork.Core.IDbHelper"/> if success, otherwise null</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelperFactory.GetDbHelper(Phoenix.FrameWork.Core.IDbConfiguration)">
            <summary>
            Get the dbHelepr based on the definition 
            </summary>
            <param name="dbDef"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelperFactory.InitializeDbHelper(Phoenix.FrameWork.Core.IDbHelper,Phoenix.FrameWork.Core.IDbConfiguration)">
            <summary>
            Initializes the DbHelper
            </summary>
            <param name="dbHelper"></param>
            <param name="dbDef"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Data.DbHelperFactory.InitDatabase(Phoenix.FrameWork.Core.IDbHelper)">
            <summary>
            Internal function to fetch the primary database name and availablity info.
            </summary>
            <param name="dbHelper">DbHeper to be used to get the database name</param>
        </member>
        <member name="T:Phoenix.FrameWork.Data.MSSqlDbHelper">
            <summary>
            DbHelper implementation for Microsoft Sql Server
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Data.MSSqlDbHelper.#ctor">
            <summary>
            Basic constructor
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Data.MSSqlDbHelper.NewCommand(System.Data.IDbConnection)">
            <summary>
            If connection is null then create a new command with out connection.
            else uses the connection to create the command 
            </summary>
            <param name="connection">connection object</param>
            <returns>new <see cref="T:System.Data.SqlClient.SqlCommand"/> object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.MSSqlDbHelper.NewCommand(System.Data.IDbTransaction)">
            <summary>
            If transaction is null then uses the intenal transaction to create command
            </summary>
            <remarks>
            Excutes the "SET QUOTED_IDENTIFIER OFF  SET ANSI_PADDING OFF" before returning the command
            </remarks>
            <param name="transaction">A <see cref="T:System.Data.IDbTransaction"/> object</param>
            <returns>new Command object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.MSSqlDbHelper.NewConnection(System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.SqlClient.SqlConnection"/> 
            </summary>
            <remarks>
            If the connectionString has valid value, the connection will be created with the connection string.
            </remarks>
            <param name="connectionString">connection string</param>
            <returns>A new <see cref="T:System.Data.SqlClient.SqlConnection"/> object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.MSSqlDbHelper.NewParameter">
            <summary>
            Creates and returns a new <see cref="T:System.Data.SqlClient.SqlParameter"/>
            </summary>
            <returns>A new <see cref="T:System.Data.SqlClient.SqlParameter"/> object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.MSSqlDbHelper.NewParameter(System.Int32)">
            <summary>
            returns an array of <see cref="T:System.Data.SqlClient.SqlParameter"/> for the specified size.
            </summary>
            <param name="size">number of new parameters needed</param>
            <returns>array of <see cref="T:System.Data.SqlClient.SqlParameter"/></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.MSSqlDbHelper.NewParameter(System.String,System.Object)">
            <summary>
            creates and returns a new instance of the <see cref="T:System.Data.SqlClient.SqlParameter"/> class with the parameter name and a value of the 
            new <see cref="T:System.Data.SqlClient.SqlParameter"/>.
            </summary>
            <param name="parameterName">The name of the parameter </param>
            <param name="value">An <see cref="T:System.Object"/> that is the value of the IDataParameter</param>
            <returns>A new <see cref="T:System.Data.SqlClient.SqlParameter"/></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.MSSqlDbHelper.NewParameter(System.String,System.Data.DbType)">
            <summary>
            creates a new <see cref="T:System.Data.SqlClient.SqlParameter"/> for the dbType specified 
            </summary>
            <param name="parameterName">name of the parameter</param>
            <param name="dbType">type ofthe parameter</param>
            <returns>A new <see cref="T:System.Data.SqlClient.SqlParameter"/> object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.MSSqlDbHelper.NewParameter(System.String,Phoenix.FrameWork.Core.FieldType)">
            <summary>
            creates a new <see cref="T:System.Data.SqlClient.SqlParameter"/> for the dbType specified 
            </summary>
            <param name="parameterName">name of the parameter</param>
            <param name="dbType">type ofthe parameter</param>
            <returns>A new <see cref="T:System.Data.SqlClient.SqlParameter"/> object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.MSSqlDbHelper.GetDbType(Phoenix.FrameWork.Core.FieldType)">
            <summary>
            
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.MSSqlDbHelper.NewDataAdapter(System.String)">
            <summary>
            Creates and returns a Data Adapter
            </summary>
            <param name="selectCommandText"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.MSSqlDbHelper.NewParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            returns a newly created IDataParameter
            </summary>
            <param name="parameterName">Name of the parameter</param>
            <param name="dbType">One of the <see cref="T:System.Data.DbType"/></param>
            <param name="size">The length of the parameter</param>
            <returns>A IDataParameter</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.MSSqlDbHelper.NewDbException(System.Exception)">
            <summary>
            Creates a <see cref="T:Phoenix.FrameWork.Data.DbException"/> and returns it.
            </summary>
            <remarks>
            If the paremeter exception is not <see cref="T:System.Data.SqlClient.SqlException"/> then the same exception will be thrown 
            </remarks>
            <param name="exception">current exception</param>
            <returns><see cref="T:Phoenix.FrameWork.Data.DbException"/> object</returns>
        </member>
        <member name="T:Phoenix.FrameWork.Data.OdbcDbHelper">
            <summary>
            Dbhelper implementation class for Odbc Data Provider
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Data.OdbcDbHelper.#ctor">
            <summary>
            Simple Constructor
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Data.OdbcDbHelper.NewCommand(System.Data.IDbConnection)">
            <summary>
            Creates and returns a OdbcCommand for the specified connection
            </summary>
            <remarks>
            If the connection is null then a new odbcCommand will be created.
            </remarks>
            <param name="connection">A valid Sql Connection</param>
            <returns>returns a OdbcCommand as IDbCommand</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.OdbcDbHelper.NewCommand(System.Data.IDbTransaction)">
            <summary>
            Creates and returns a OdbcCommand for the connection in the transaction
            </summary>
            <remarks>
            If the transaction is null then a new odbcCommand will be created.
            </remarks>
            <param name="transaction">A valid transaction</param>
            <returns>returns a OdbcCommand as IDbCommand</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.OdbcDbHelper.NewConnection(System.String)">
            <summary>
            Creates and returns a new OdbcConnection object.  
            </summary>
            <remarks>
            If the connectionstring is empty or null then a OdbcConnectino without the connectin string will be created.
            </remarks>
            <param name="connectionString">ODBC Connection string</param>
            <returns>returns a OdbcConnection as IDbConnection</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.OdbcDbHelper.NewParameter">
            <summary>
            Creates and returns a new <see cref="T:System.Data.Odbc.OdbcParameter"/>
            </summary>
            <returns>A new <see cref="T:System.Data.Odbc.OdbcParameter"/> object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.OdbcDbHelper.NewParameter(System.Int32)">
            <summary>
            returns an array of <see cref="T:System.Data.Odbc.OdbcParameter"/> for the specified size.
            </summary>
            <param name="size">number of new parameters needed</param>
            <returns>array of <see cref="T:System.Data.Odbc.OdbcParameter"/></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.OdbcDbHelper.NewParameter(System.String,System.Object)">
            <summary>
            creates and returns a new instance of the <see cref="T:System.Data.Odbc.OdbcParameter"/> class with the parameter name and a value of the 
            new <see cref="T:System.Data.Odbc.OdbcParameter"/>.
            </summary>
            <param name="parameterName">The name of the parameter </param>
            <param name="value">An <see cref="T:System.Object"/> that is the value of the IDataParameter</param>
            <returns>A new <see cref="T:System.Data.Odbc.OdbcParameter"/></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.OdbcDbHelper.NewParameter(System.String,System.Data.DbType)">
            <summary>
            creates a new <see cref="T:System.Data.Odbc.OdbcParameter"/> for the dbType specified 
            </summary>
            <param name="parameterName">name of the parameter</param>
            <param name="dbType">type ofthe parameter</param>
            <returns>A new <see cref="T:System.Data.Odbc.OdbcParameter"/> object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.OdbcDbHelper.NewParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            returns a newly created <see cref="T:System.Data.Odbc.OdbcParameter"/>
            </summary>
            <param name="parameterName">Name of the parameter</param>
            <param name="dbType">One of the <see cref="T:System.Data.DbType"/></param>
            <param name="size">The length of the parameter</param>
            <returns>A <see cref="T:System.Data.Odbc.OdbcParameter"/> object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.OdbcDbHelper.NewParameter(System.String,Phoenix.FrameWork.Core.FieldType)">
            <summary>
            creates a new <see cref="T:System.Data.Odbc.OdbcParameter"/> for the dbType specified 
            </summary>
            <param name="parameterName">name of the parameter</param>
            <param name="dbType">type ofthe parameter</param>
            <returns>A new <see cref="T:System.Data.Odbc.OdbcParameter"/> object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.OdbcDbHelper.GetDbType(Phoenix.FrameWork.Core.FieldType)">
            <summary>
            
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.OdbcDbHelper.NewDbException(System.Exception)">
            <summary>
            Creates a <see cref="T:Phoenix.FrameWork.Data.DbException"/> and returns it.
            </summary>
            <remarks>
            If the paremeter exception is not <see cref="T:System.Data.Odbc.OdbcException"/> then the same exception will be thrown 
            </remarks>
            <param name="exception">current exception</param>
            <returns><see cref="T:Phoenix.FrameWork.Data.DbException"/> object</returns>
        </member>
        <member name="T:Phoenix.FrameWork.Data.OleDbHelper">
            <summary>
             Dbhelper implementation class for OleDb Data Provider
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Data.OleDbHelper.#ctor">
            <summary>
            Simple Constructor
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Data.OleDbHelper.NewCommand(System.Data.IDbConnection)">
            <summary>
            Creates and returns a <see cref="T:System.Data.OleDb.OleDbCommand"/> for the specified connection
            </summary>
            <remarks>
            If the connection is null then a new <see cref="T:System.Data.OleDb.OleDbCommand"/> will be created.
            </remarks>
            <param name="connection">A valid Sql Connection</param>
            <returns>returns a <see cref="T:System.Data.OleDb.OleDbCommand"/> as IDbCommand</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.OleDbHelper.NewCommand(System.Data.IDbTransaction)">
            <summary>
            Creates and returns a <see cref="T:System.Data.OleDb.OleDbCommand"/> for the connection in the transaction
            </summary>
            <remarks>
            If the transaction is null then a new <see cref="T:System.Data.OleDb.OleDbCommand"/> will be created.
            </remarks>
            <param name="transaction">A valid <see cref="T:System.Data.IDbTransaction"/></param>
            <returns>returns a <see cref="T:System.Data.OleDb.OleDbCommand"/>  as IDbCommand</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.OleDbHelper.NewConnection(System.String)">
            <summary>
            Creates and returns a new <see cref="T:System.Data.OleDb.OleDbConnection"/> object.  
            </summary>
            <remarks>
            If the connectionstring is empty or null then a <see cref="T:System.Data.OleDb.OleDbConnection"/> without the connection string will be created.
            </remarks>
            <param name="connectionString">ODBC Connection string</param>
            <returns>returns a <see cref="T:System.Data.OleDb.OleDbConnection"/> as IDbConnection</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.OleDbHelper.NewParameter">
            <summary>
            Creates and returns a new <see cref="T:System.Data.OleDb.OleDbParameter"/>
            </summary>
            <returns>A new <see cref="T:System.Data.OleDb.OleDbParameter"/> object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.OleDbHelper.NewParameter(System.Int32)">
            <summary>
            returns an array of <see cref="T:System.Data.OleDb.OleDbParameter"/> for the specified size.
            </summary>
            <param name="size">number of new parameters needed</param>
            <returns>array of <see cref="T:System.Data.OleDb.OleDbParameter"/></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.OleDbHelper.NewParameter(System.String,System.Object)">
            <summary>
            creates and returns a new instance of the <see cref="T:System.Data.OleDb.OleDbParameter"/> class with the parameter name and a value of the 
            new <see cref="T:System.Data.OleDb.OleDbParameter"/>.
            </summary>
            <param name="parameterName">The name of the parameter </param>
            <param name="value">An <see cref="T:System.Object"/> that is the value of the IDataParameter</param>
            <returns>A new <see cref="T:System.Data.OleDb.OleDbParameter"/></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.OleDbHelper.NewParameter(System.String,System.Data.DbType)">
            <summary>
            creates a new <see cref="T:System.Data.OleDb.OleDbParameter"/> for the dbType specified 
            </summary>
            <param name="parameterName">name of the parameter</param>
            <param name="dbType">type ofthe parameter</param>
            <returns>A new <see cref="T:System.Data.OleDb.OleDbParameter"/> object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.OleDbHelper.NewParameter(System.String,Phoenix.FrameWork.Core.FieldType)">
            <summary>
            creates a new <see cref="T:System.Data.OleDb.OleDbParameter"/> for the dbType specified 
            </summary>
            <param name="parameterName">name of the parameter</param>
            <param name="dbType">type ofthe parameter</param>
            <returns>A new <see cref="T:System.Data.OleDb.OleDbParameter"/> object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.OleDbHelper.GetDbType(Phoenix.FrameWork.Core.FieldType)">
            <summary>
            
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.OleDbHelper.NewParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            returns a newly created <see cref="T:System.Data.OleDb.OleDbParameter"/>
            </summary>
            <param name="parameterName">Name of the parameter</param>
            <param name="dbType">One of the <see cref="T:System.Data.DbType"/></param>
            <param name="size">The length of the parameter</param>
            <returns>A <see cref="T:System.Data.OleDb.OleDbParameter"/> object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Data.OleDbHelper.NewDbException(System.Exception)">
            <summary>
            Creates a <see cref="T:Phoenix.FrameWork.Data.DbException"/> and returns it.
            </summary>
            <remarks>
            If the paremeter exception is not <see cref="T:System.Data.OleDb.OleDbException"/> then the same exception will be thrown 
            </remarks>
            <param name="exception">current exception</param>
            <returns><see cref="T:Phoenix.FrameWork.Data.DbException"/> object</returns>
        </member>
    </members>
</doc>
