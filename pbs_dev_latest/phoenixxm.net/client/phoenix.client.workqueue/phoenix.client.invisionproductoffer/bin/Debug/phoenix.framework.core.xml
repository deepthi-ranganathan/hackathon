<?xml version="1.0"?>
<doc>
    <assembly>
        <name>phoenix.framework.core</name>
    </assembly>
    <members>
        <member name="T:Phoenix.FrameWork.Core.AppInfo">
            <summary>
            Summary description for AppInfo.
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.AppInfo.WsvcStateChanged">
            <summary>
            WsvcStateChanged
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.AppInfo.DbNameDelimitter">
            <summary>
            DbName Delimitter used to delimit the Offline Database Names
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.AppInfo.WsvcStateChangedEvent">
            <summary>
            Web Service Changed Event
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.AppInfo.#ctor">
            <summary>
            Basic Constructor
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.IsIntialized">
            <summary>
            Is Initialized flag.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.RegularExpression">
            <summary>
            Regulare Expression
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.Instance">
            <summary>
            Get the singleton instance of the application Info object
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.InfoLevel">
            <summary>
            Implements ILogPublisher InfoLevel
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.WarningLevel">
            <summary>
            Implements ILogPublisher WarningLevel
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.DebugLevel">
            <summary>
            Implements ILogPublisher WarningLevel
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.SqlLevel">
            <summary>
            Implements ILogPublisher WarningLevel
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.IsLogEnabled">
            <summary>
            True if the Logging is enabled. IF false no log will be enabled
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.DebugPattern">
            <summary>
            Pattern to match for enabling log
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.IsMlFromDb">
            <summary>
            True if the ML is to get from Db.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.MlVersionId">
            <summary>
            Use this version if the ML is to come from Db
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.ConfigWsvcs">
            <summary>
            Url of the Config Web Service
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.AssemblyDir">
            <summary>
            Assembly Directory
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.LogFileName">
            <summary>
            Get/Set File name for the logger.  Not supported for this publishers
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.HylandWsvcs">
            <summary>
            Get/Set Hyland Wsvcs.   Not supported for this publishers
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.TellerCaptureInstallationId">
            <summary>
            Teller Capture Installation ID.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.TellerCaptureImagePath">
            <summary>
            Teller Capture Image Path.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.TellerCaptureDeviceNo">
            <summary>
            Teller Capture Device Number.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.Brochures">
            <summary>
            Brochures Directory
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.LogInResponse">
            <summary>
            Indicates whether the debug information from server is part of the response from web service.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.BranchNo">
            <summary>
            Branch Number from where the application is running. (NOTE: not applicable for server)
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.DefaultDatabase">
            <summary>
            Default Db Definition to use for the application.
            This will be used to set the selected database in the Client application.
            In the server application this will be used as the default database if not Database is passed
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.OfflineDbNames">
            <summary>
            Offline Information
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.OfflineServer">
            <summary>
            Offline Server Name. Currently Not in use. 
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.AppInfo.Initialize(Phoenix.FrameWork.Core.AppInfo)">
            <summary>
            Initialize appInfo using the application information
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.AppInfo.Initialize(System.IO.FileInfo)">
            <summary>
            Initialize the applicatino with the file info
            </summary>
            <param name="appConfigFile">Phoenix configuration file name</param>
            <returns>returns the application Info object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.AppInfo.ReloadConfig">
            <summary>
            Relod the configuration
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.AppInfo.SetBranchNo(System.Int32)">
            <summary>
            Set the branch Number and save data into the config file
            </summary>
            <param name="branchNo"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.AppInfo.SaveConfiguration">
            <summary>
            Saves the current configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.AppInfo.GetConfiguration(System.String,System.Type)">
            <summary>
            Get the configuration from the current Setting
            </summary>
            <param name="elementName"></param>
            <param name="configType"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.AppInfo.GetConfiguration(System.IO.FileInfo,System.String,System.Type)">
            <summary>
            Get the configuration object from the config file
            </summary>
            <param name="appConfigFile"></param>
            <param name="elementName"></param>
            <param name="configType"></param>
            <returns></returns>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.OtherInformation">
            <summary>
            Other Information
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.AppInfo.SaveConfiguration(System.IO.FileSystemInfo)">
            <summary>
            Save Configuration
            </summary>
            <param name="configFile"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.AppInfo.SaveConfiguration(System.IO.FileSystemInfo,System.String,System.Object)">
            <summary>
            Save Configuration
            </summary>
            <param name="configFile">objectName</param>
            <param name="elementName">ElementName</param>
            <param name="configObj"></param>
            <returns></returns>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.ConfigFileName">
            <summary>
            Configuration File name which was used to initialize the instance
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.AppInfo.CopyFrom(Phoenix.FrameWork.Core.AppInfo)">
            <summary>
            Copy the source informaction to the current instance
            </summary>
            <param name="sourceInfo">Copy from object</param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.AppInfo.SetWebServiceStatus(Phoenix.FrameWork.Core.WsvcType,System.Boolean)">
            <summary>
            Set the web service Status
            </summary>
            <param name="webServiceType"></param>
            <param name="isOnline"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.AppInfo.IsWebServiceAvailable(Phoenix.FrameWork.Core.WsvcType)">
            <summary>
            Validate and returns True if Web Service is available.
            </summary>
            <param name="webServiceType"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.AppInfo.IsServiceAvailable(Phoenix.FrameWork.Core.WsvcType,Phoenix.FrameWork.Core.WsvcType)">
            <summary>
            Check Whether the Service specified is avaialble in the status
            </summary>
            <param name="status"></param>
            <param name="webServiceType"></param>
            <returns></returns>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.IsAppSupportsOffline">
            <summary>
            Returns true if the application supports offline
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.IsAppOnline">
            <summary>
            Returns True if all web Services are available
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.XmLogFilter">
            <summary>
            Request Match Enabled, used in server to enable logs 
            based on specific match defined in the Regular Expression
            NOTE: this is not 
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AppInfo.ApplicationName">
            <summary>
            Application name to be used.  Valid only in the client code.
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.AppInfo.ConfigureAndWatchHandler">
            <summary>
            Class used to watch config files.
            </summary>
            <remarks>
            <para>
            Uses the <see cref="T:System.IO.FileSystemWatcher"/> to monitor
            changes to a specified file. Because multiple change notifications
            may be raised when the file is modified, a timer is used to
            compress the notifications into a single event. The timer
            waits for <see cref="F:Phoenix.FrameWork.Core.AppInfo.ConfigureAndWatchHandler.TimeoutMillis"/> time before delivering
            the event notification. If any further <see cref="T:System.IO.FileSystemWatcher"/>
            change notifications arrive while the timer is waiting it
            is reset and waits again for <see cref="F:Phoenix.FrameWork.Core.AppInfo.ConfigureAndWatchHandler.TimeoutMillis"/> to
            elapse.
            </para>
            </remarks>
        </member>
        <member name="M:Phoenix.FrameWork.Core.AppInfo.ConfigureAndWatchHandler.StartWatching(System.IO.FileInfo)">
            <summary>
            Watch a specified config file used to configure a repository
            </summary>
            <param name="configFile">The configuration file to watch.</param>
            <remarks>
            <para>
            Watch a specified config file used to configure a repository
            </para>
            </remarks>
        </member>
        <member name="M:Phoenix.FrameWork.Core.AppInfo.ConfigureAndWatchHandler.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Phoenix.FrameWork.Core.AppInfo.ConfigureAndWatchHandler" /> class.
            </summary>
            <param name="configFile">The configuration file to watch.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:Phoenix.FrameWork.Core.AppInfo.ConfigureAndWatchHandler" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:Phoenix.FrameWork.Core.AppInfo.ConfigureAndWatchHandler.ConfigureAndWatchHandler_OnChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Event handler used by <see cref="T:Phoenix.FrameWork.Core.AppInfo.ConfigureAndWatchHandler"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.FileSystemWatcher"/> firing the event.</param>
            <param name="e">The argument indicates the file that caused the event to be fired.</param>
            <remarks>
            <para>
            This handler reloads the configuration from the file when the event is fired.
            </para>
            </remarks>
        </member>
        <member name="M:Phoenix.FrameWork.Core.AppInfo.ConfigureAndWatchHandler.OnWatchedFileChange(System.Object)">
            <summary>
            Called by the timer when the configuration has been updated.
            </summary>
            <param name="state">null</param>
        </member>
        <member name="T:Phoenix.FrameWork.Core.OfflineInfo">
            <summary>
            Offline Setting 
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.OfflineInfo.IsAppSupportsOffline">
            <summary>
            True if the application has offline enabled
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.OfflineInfo.IsOfflineDbAvailable">
            <summary>
            True if Offline Database Available
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.OfflineInfo.Instance">
            <summary>
            Singleton instance
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.OfflineInfo.AuthToken">
            <summary>
            Offline Token
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.OfflineInfo.RSACrypto">
            <summary>
            Client side crypto. Used only for offline
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.OfflineInfo.DatabaseName">
            <summary>
            Get/Set offline Database name
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.OfflineInfo.ServerName">
            <summary>
            Get/Set offline server name
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.OfflineInfo.GetDBNames">
            <summary>
            Returns the Database Names
            </summary>
            <returns></returns>
        </member>
        <member name="P:Phoenix.FrameWork.Core.OfflineInfo.ConfigHash">
            <summary>
            Config Hash for Offline Setting
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.OfflineInfo.GetAppId(System.String)">
            <summary>
            
            </summary>
            <param name="logicalDbName"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.OfflineInfo.GetDbName(System.Int32)">
            <summary>
            Get the Offline Logical Db Name for the application Id
            </summary>
            <param name="appId"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.OfflineInfo.GetRealDbName(System.String)">
            <summary>
            
            </summary>
            <param name="logicalName"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.OfflineInfo.AddOfflineDbName(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="logicalName"></param>
            <param name="realDbName"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.OfflineInfo.RemoveOfflineDbName(System.String)">
            <summary>
            Remove an offline Db name 
            </summary>
            <param name="logicalName"></param>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.CoreService">
            <summary>
            CoreService class will be initialized by teh application in client mode and in server mode.
            </summary>
            <remarks>
            This class must be initialized to provide the interfaces.
            </remarks>
        </member>
        <member name="P:Phoenix.FrameWork.Core.CoreService.IsUI">
            <summary>
            Flag to indicate that the CorService belongs to UI.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.CoreService.IsWorkflow">
            <summary>
            Flag to indicate that it is a workflow context.
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.CoreService.aesKeyA">
            <summary>
            The first part of AES Encryption key which is used as a part of Encrypt/Decrypt method 
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.CoreService.aesKeyALogPublisher">
            <summary>
            The first part of AES Encryption key for log publisher which is used as a part of Encrypt/Decrypt method 
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.CoreService.rjnKeyA">
            <summary>
            The first part of RjnKey which is used as a part of Encrypt/Decrypt method 
            </summary>        
        </member>
        <member name="M:Phoenix.FrameWork.Core.CoreService.#ctor">
            <summary>
            Summary of CoreService.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.CoreService.Initialize(Phoenix.FrameWork.Core.IApplicationSetting)">
            <summary>
            Initialize the Core Service Class using the Application setting receive from the Configuration manager.
            </summary>
            <param name="settings"><see cref="T:Phoenix.FrameWork.Core.IApplicationSetting"/> value received from Configuration Manager</param>
            <returns></returns>
        </member>
        <member name="P:Phoenix.FrameWork.Core.CoreService.AppSetting">
            <summary>
            <see cref="T:Phoenix.FrameWork.Core.IApplicationSetting"/> value for the current application.  Loaded after initialization.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.CoreService.UIAccessProvider">
            <summary>
            Gets/Sets the Screen access control provider
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.CoreService.UINavigation">
            <summary>
            Get/Set the Screen Navigation Element
            If IScreenNavigation is not created then creates the object.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.CoreService.DataService">
            <summary>
            Data Service Object
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.CoreService.ConfigSvc">
            <summary>
            
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.CoreService.DbHelper">
            <summary>
            Valid <see cref="T:Phoenix.FrameWork.Core.IDbHelper"/> database elper for the current server application.  Null for client application.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.CoreService.Translation">
            <summary>
            Gets the Translation object for the current service.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.CoreService.AuthenticationData">
            <summary>
            Get the Authenticatin Data.  This will be loaded by the Authentication Module
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.CoreService.LogPublisher">
            <summary>
            Gets the LogPublisher instance.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.CoreService.IsInitialized">
            <summary>
            Returns true if the core service is initialized.  
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.CoreService.VerifyInitialization">
            <summary>
            Verifies whether the Core is initialized or not.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.CoreService.TranslateText(System.String,System.String,System.String)">
            <summary>
            Handles translation of institution-specific verbiage.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.CoreService.TranslateTextString(System.String,System.String)">
            <summary>
            Translates institution-specific verbiage.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.CoreService.ExceptionMgr">
            <summary>
            Gets the exception mgr instance
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.CoreService.Reset">
            <summary>
            Reset Application Specific Info
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.CoreService.TraceWrite(System.String)">
            <summary>
            TraceWrite just for debug.  Not loaded into the file
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.CoreService.GetAuthSvcClient">
            <summary>
            Gets the authentication service client
            </summary>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.ServerType">
            <summary>
            The Database definition indicates the ServerType used by the Bank.
            </summary>
            <remarks>
            The Server type is to indicate the Server Brand.  It can be either
            <see cref="F:Phoenix.FrameWork.Core.ServerType.Sybase"/>,
            <see cref="F:Phoenix.FrameWork.Core.ServerType.SqlServer"/> or
            <see cref="F:Phoenix.FrameWork.Core.ServerType.Oracle" />.  
            </remarks>
        </member>
        <member name="F:Phoenix.FrameWork.Core.ServerType.Sybase">
            <summary>
            The database server used is Sybase.
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.ServerType.SqlServer">
            <summary>
            The database server used is Microsoft SQL Server
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.ServerType.Oracle">
            <summary>
            The database server used is Oracle. NOTE: Not implemented.
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.LogType">
            <summary>
            Log Type is the enumeration of Logging Type.  
            </summary>
            <remarks>
            The log type is used by the programmer to indicate the type of information, and how to log. 
            The type can be either 
            <see cref="F:Phoenix.FrameWork.Core.LogType.Debug"/>,
            <see cref="F:Phoenix.FrameWork.Core.LogType.Error"/>,
            <see cref="F:Phoenix.FrameWork.Core.LogType.Info"/> or 
            <see cref="F:Phoenix.FrameWork.Core.LogType.Warning"/>
            </remarks>
        </member>
        <member name="F:Phoenix.FrameWork.Core.LogType.Debug">
            <summary>
            Debug log are used to provide the programmers to get details about a situation.
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.LogType.Error">
            <summary>
            Error log are used to indicate this log info is generated due to an error
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.LogType.Info">
            <summary>
            Info Log are just information only.
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.LogType.Warning">
            <summary>
            Warning level indicate the this error is just warning.  Not Critical to stop the application.
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.LogLevel">
            <summary>
             LogLevel controls the level of information written to the log.  
            </summary>
            <remarks>The LogLevel. It can be either
            <see cref="F:Phoenix.FrameWork.Core.LogLevel.None"/>,
            <see cref="F:Phoenix.FrameWork.Core.LogLevel.Normal"/> 
            <see cref="F:Phoenix.FrameWork.Core.LogLevel.Detailed" />.  
            <see cref="F:Phoenix.FrameWork.Core.LogLevel.MoreDetailed" />.  
            The LogLevel may also be used to control which entries go into the log based upon the LogLevel required by the code.
             </remarks>
        </member>
        <member name="F:Phoenix.FrameWork.Core.LogLevel.None">
            <summary>
            None..Means Everything is routed to Trace.WriteLine
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.LogLevel.Normal">
            <summary>
            Could be used to indicate function entry or exit points
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.LogLevel.Detailed">
            <summary>
            Could be used for printing function parameters and return values
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.LogLevel.MoreDetailed">
            <summary>
            Could be used to write detailed info from within the function/event to help in debuggin the problem.
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.MLErrorLevel">
            <summary>
            ML Error Level is the enumeration of the level of error.  
            </summary>
            <remarks>
            The error level is used by the programmer to indicate the the error level information. 
            The level can be either 
            <see cref="F:Phoenix.FrameWork.Core.MLErrorLevel.Error"/> or
            <see cref="F:Phoenix.FrameWork.Core.MLErrorLevel.Warning"/>
            </remarks>
        </member>
        <member name="F:Phoenix.FrameWork.Core.MLErrorLevel.Error">
            <summary>
            Error Level - Error indicates this error is being generated due to real problem
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.MLErrorLevel.Warning">
            <summary>
            Error Level - Warning indicates this error is just warning.  Not Critical to stop the application.
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.MLErrorLevel.None">
            <summary>
            No Error 
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.AuthenticationType">
            <summary>
            Specifies the types of authentication available.
            </summary>
            <remarks>
            Only <see cref="F:Phoenix.FrameWork.Core.AuthenticationType.Proprietary"/> is supported.  Other will be available in future.
            </remarks>
        </member>
        <member name="F:Phoenix.FrameWork.Core.AuthenticationType.Windows">
            <summary>
            Use Windows user name and password for authentication.
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.AuthenticationType.Proprietary">
            <summary>
            Use Phoenix Proprietary method to authenticate the user. 
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.AuthenticationType.Ldap">
            <summary>
            Use LDAP to authenticate the user.
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.FieldType">
            <summary>
            specifies the types for the Business object fields.
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.FieldType.Binary">
            <summary>
            Binary Data Type
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.FieldType.Bit">
            <summary>
            Bit Data Type
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.FieldType.Char">
            <summary>
            Char Data Type represends <see cref="F:System.Data.DbType.StringFixedLength"/>
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.FieldType.DateTime">
            <summary>
            Date Time Data Type <see cref="F:System.Data.DbType.DateTime"/>
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.FieldType.Decimal">
            <summary>
            Decimal Data Type <see cref="F:System.Data.DbType.Decimal"/>
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.FieldType.Float">
            <summary>
            Float Data Type
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.FieldType.Image">
            <summary>
            Image Data Type <see cref="F:System.Data.DbType.Binary"/>
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.FieldType.Int">
            <summary>
            Integer Datatype <see cref="F:System.Data.DbType.Int32"/>
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.FieldType.Numeric">
            <summary>
            Numeric datatype <see cref="F:System.Data.DbType.Decimal"/>
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.FieldType.SmallDateTime">
            <summary>
            Datetime Datatype <see cref="F:System.Data.DbType.DateTime"/>
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.FieldType.SmallInt">
            <summary>
            SmallInt Datatype <see cref="F:System.Data.DbType.Int16"/>
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.FieldType.Text">
            <summary>
            Text data type <see cref="F:System.Data.DbType.String"/>
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.FieldType.TinyInt">
            <summary>
            TinyInt data type <see cref="F:System.Data.DbType.Byte"/>
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.FieldType.VarBinary">
            <summary>
            Var binary data type.
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.FieldType.VarChar">
            <summary>
            varchar data type <see cref="F:System.Data.DbType.String"/>
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.FieldType.BigInt">
            <summary>
            varchar data type <see cref="F:System.Data.DbType.Int64"/>
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.XmDbStatus">
            <summary>
            Xm Db Status = Copy Status of the object
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.XmDbStatus.Day">
            <summary>
            Day mode:  All calls will be routed to Phoenix Database
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.XmDbStatus.CopyOver">
            <summary>
            Copy Over Mode: Data is being copied to XM Database
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.XmDbStatus.Nightly">
            <summary>
            Nightly Mode: Only XM Database is used. 
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.XmDbStatus.CopyBack">
            <summary>
            Copy Back Mode: Data is being copied back to Phoenix Database
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.WsvcType">
            <summary>
            Web Service Type
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.WsvcType.Configuration">
            <summary>
            Configuration Web Service
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.WsvcType.Authentication">
            <summary>
            Authentication Web Service
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.WsvcType.PhoenixXm">
            <summary>
            Phoenix Xm Web Service
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.ExceptionManager">
            <summary>
            Summary description for ExceptionManager.
            o This is a simple class that provides functions for the programmers to create new exceptions, chain them, or rethrow  previously created exceptions.
            o It has logging facilities to dump the log to the trace listener configured by the Debug Log Service
            o It is implemented as a singleton object and belongs to the Phoenix.Core namespace.
            o It is initialized by the CoreService.
            o Programmers always use the NewException (..) method of this class to throw exceptions (both system and application specific). This provides us with a common code location to process the 'throw' command. This method may also create objects belonging to the PhoenixException class. The NewException function just delgates all the calls to PhoenixException Class constructors.
            
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ExceptionManager.#ctor">
            <summary>
            No Argument Constructor
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ExceptionManager.NewException(Phoenix.FrameWork.Core.PhoenixException)">
            <summary>
            If a PhoenixException object is externally created, then use this constructor rethrow it.
            Sample Call:-
            PhoenixException ex = new PhoenixException(MESSAGE,124);
            if (BusinessError)
            	throw Phoenix.Core.CoreServices.ExceptionMgr.NewException(ex);
            </summary>
            <param name="exception">Pass PhoenixException object itself to rethrow it</param>
            <returns>Return the created PhoenixException object so that caller can catch it.</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ExceptionManager.NewException">
            <summary>
            Use this constructor to create a PhoeinxException object with No Message details  which can be used for throwing an exception.
            Sample Call:-
            if (BusinessError)
            	throw Phoenix.Core.CoreServices.ExceptionMgr.NewException();
            </summary>
            <returns>PhoenixException default constructor object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ExceptionManager.NewException(Phoenix.FrameWork.BusFrame.IFieldBase,System.Int32,System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="field"></param>
            <param name="mlMessageId"></param>
            <param name="mlErrorTokens"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ExceptionManager.NewException(Phoenix.FrameWork.BusFrame.IFieldBase,System.Int32,System.Int32,System.String[])">
            <summary>
            Create Phoenix Exception
            </summary>
            <param name="field"></param>
            <param name="codeError"></param>
            <param name="mlMessageId"></param>
            <param name="mlErrorTokens"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ExceptionManager.NewException(System.Int32,System.Int32)">
            <summary>
            Use this constructor to create a PhoenixException object when you intend to use the Message Id defined in ML.
            Sample Call:-
            if (BusinessError)
            	throw Phoenix.Core.CoreServices.ExceptionMgr.NewException(1, 5063);
            </summary>
            <param name="codeErrorNumber">Pass the programmer defined error number that identifies the code segment.</param>
            <param name="mlMessageId">The message id of the requested item.</param>
            <returns>Return the created PhoenixException object so that caller can catch it.</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ExceptionManager.NewException(System.Int32,System.Int32,System.Exception)">
            <summary>
            Use this constructor to create a PhoenixException object when you wish to throw a System Exception by wrapping it into a PhoenixException Object.
            The System Exception goes into the innerException parameter of both this function and the newly created PhoenixException Object. Specify the Message Related Info for the PhoenixException Object using the Parameter Values.
            This method Fetches the ML ErrorText using the mlErrorType and mlMessageId parameters.
            Sample Call:-
            if (InvalidPropertyValue)
            	throw Phoenix.Core.CoreServices.ExceptionMgr.NewException(1234,new InvalidArgumentException(""));
            </summary>
            <param name="codeErrorNumber">Pass the programmer defined error number that identifies the code segment.</param>
            <param name="mlMessageId">The message id of the requested item.</param>
            <param name="innerException">The system exception if any.</param>
            <returns>Return the created PhoenixException object so that caller can catch it.</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ExceptionManager.NewException(System.Int32,System.Int32,System.String[])">
            <summary>
            Use this constructor to create a PhoenixException object and you want the exception manager to fetch the message related values with the token parameters passed in.
            Sample Call:-
            if (UnRecoverableBusinessError)
            	throw Phoenix.Core.CoreServices.ExceptionMgr.NewException(1234,{"DDA","0000045345"});
            </summary>
            <param name="codeErrorNumber">Pass the programmer defined error number that identifies the code segment.</param>
            <param name="mlMessageId">The message id of the requested item.</param>
            <param name="mlErrorTokens">The error tokens that replaces the token place holders %[1-9]! in the actual message text.</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ExceptionManager.NewException(System.Int32,System.Int32,System.Exception,System.String[])">
            <summary>
            Use this constructor to create a PhoenixException object to wrap a system exception and you want the exception manager to fetch the message related values.
            Sample Call:-
            if (UnRecoverableBusinessError)
            	throw Phoenix.Core.CoreServices.ExceptionMgr.NewException(1234,{"DDA","0000045345"},new InvalidArgumentException(""));
            </summary>
            <param name="codeErrorNumber">Pass the programmer defined error number that identifies the code segment.</param>
            <param name="mlMessageId">The message id of the requested item.</param>
            <param name="mlErrorTokens">The error tokens that replaces the token place holders %[1-9]! in the actual message text.</param>
            <param name="innerException">The system exception if any.</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ExceptionManager.DumpLog(Phoenix.FrameWork.Core.PhoenixException)">
            <summary>
            This is a Helper function that is used to dump the contents of the Exception,its Inner Exception states (Including Stack Traces) to the Log file (Trace Listeners) set up by the Debug Log Object.
            </summary>
            <param name="exception">PhoenixException object</param>
        </member>
        <member name="T:Phoenix.FrameWork.Core.Interfaces.IRestCache">
            <summary>
            Pointer to Rest API Global Cache
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Interfaces.IRestCache.GetCachedObjectForTransaction``1(System.String)">
            <summary>
            Gets Cached Object For Current Transaction(Request) of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Interfaces.IRestCache.GetCachedObjectForTransaction(System.String)">
            <summary>
            Gets Generic Cached Object For Current Transaction(Request)
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Interfaces.IRestCache.SetCachedObjectForTransaction(System.String,System.Object)">
            <summary>
            Sets Generic Cached Object For Current Transaction(Request)
            </summary>
            <param name="name"></param>
            <param name="objectToSet"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Interfaces.IRestCache.GetCachedObjectForThread``1(System.String)">
            <summary>
            Gets Cached Object For Current Thread
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Interfaces.IRestCache.SetCachedObjectForThread(System.String,System.Object)">
            <summary>
            Sets Cached Object For Current Thread
            </summary>
            <param name="name"></param>
            <param name="objectToSet"></param>
        </member>
        <member name="T:Phoenix.FrameWork.Core.Interfaces.IRestController">
            <summary>
            Pointer to Rest Controller to access its methods
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Interfaces.IRestController.GetEncIdKeys(Phoenix.FrameWork.BusFrame.IBusinessObject)">
            <summary>
            Gets the Key columns for EncId.
            </summary>
            <param name="busObject"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Interfaces.IRestController.GetEncId(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets the generated encId using key column values
            </summary>
            <param name="encIdKeyValues"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Interfaces.IRestController.GetSelectedColumnList">
            <summary>
            Gets the requested column list for a select list view
            </summary>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.IApplicationSetting">
            <summary>
            IApplicationSetting is the interface definition for the current application.  The implementation will be available in Phoenix.Configuration.ApplicationSetting/>
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IApplicationSetting.IsServer">
            <summary>
            Is the application is Server or not.  true if this setting is for Server otherwise false. 
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IApplicationSetting.IsMLEnabled">
            <summary>
            Is the application is multi language enabled.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IApplicationSetting.ClientLanguage">
            <summary>
            If the application <see cref="P:Phoenix.FrameWork.Core.IApplicationSetting.IsMLEnabled"/> is true then contains valid value about the 
            client user interface language.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IApplicationSetting.IsOfflineSupported">
            <summary>
            True if the client application supports offline; false otherwise
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IApplicationSetting.DbLanguage">
            <summary>
            If the application <see cref="P:Phoenix.FrameWork.Core.IApplicationSetting.IsMLEnabled"/> is true then contains valid value about the 
            database language.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IApplicationSetting.DatabaseDefName">
            <summary>
            Sting value indicating the Database definition name in the configuration.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IApplicationSetting.ReleaseGroupName">
            <summary>
            String value indicating the Release group name in the configuration.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IApplicationSetting.ApplicationId">
            <summary>
            Integer value calculated using <see cref="P:Phoenix.FrameWork.Core.IApplicationSetting.DatabaseDefName"/> and  <see cref="P:Phoenix.FrameWork.Core.IApplicationSetting.ReleaseGroupName"/>
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IApplicationSetting.DeploymentWSUrl">
            <summary>
            Defines the URL location from which the appplication assemblied can be downloaded.  Used only in client applications.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IApplicationSetting.ApplicationWSUrl">
            <summary>
            Defines the WebService location of PhoenixXm application server.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IApplicationSetting.AuthenticationWSUrl">
            <summary>
            Defines the authentication server location.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IApplicationSetting.ConfigurationWSUrl">
            <summary>
            Defines the configuration Webservice location.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IApplicationSetting.ConfigHash">
            <summary>
            Defines the Client IP Address
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IApplicationSetting.OtherInfo">
            <summary>
            Paramter key-value collection
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.AuthorizationType">
            <summary>
            Defined the enumeration for ScreenAccess
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.AuthorizationType.NoAccess">
            <summary>
            No definition
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.AuthorizationType.Read">
            <summary>
            Read Access
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.AuthorizationType.Write">
            <summary>
            Write Access
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.AuthorizationType.New">
            <summary>
            New Access
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.AuthorizationType.NoDefinition">
            <summary>
            No Definition found
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.IUIAccess">
            <summary>
            Defines the interface for IAccessControl
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IUIAccess.GetScreenAccess(System.Int32)">
            <summary>
            Get the access definition defined for the screen
            </summary>
            <param name="screenId">Get the screen Access property for the screen</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IUIAccess.HasReadAcces(System.Int32)">
            <summary>
            Verifies whether the undelying user has read access to the screenId specified
            </summary>
            <param name="screenId">ScreenId to look for</param>
            <returns>True if has write acces; otherwise false</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IUIAccess.HasWriteAccess(System.Int32)">
            <summary>
            Verifies whether the undelying user can write records using the screen identified by the screenId.
            </summary>
            <param name="screenId">ScreenId to look for</param>
            <returns>True if has write acces; otherwise false</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IUIAccess.HasNewAccess(System.Int32)">
            <summary>
            Verifies whether the undelying user can create new records using the screen identified by the screenId.
            </summary>
            <param name="screenId">ScreenId to look for</param>
            <returns>True if has new acces; otherwise false</returns>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IUIAccess.IsSecurityEnabled">
            <summary>
            Get set Application Security
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IUIAccess.IsTellerTree">
            <summary>
            Get set IsTellerTree
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IUIAccess.Available24x7(System.Int32)">
            <summary>
            Retrusn True if 24x7 availability 
            </summary>
            <param name="screenId"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IUIAccess.AvailableOffline(System.Int32)">
            <summary>
            Retrusn True if screen is availbale in OfflineMode
            </summary>
            <param name="screenId"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IUIAccess.GetWindowModule(System.Int32,System.Int32)">
            <summary>
            Select Module from SEC_CLS_REL table
            </summary>
            <param name="parentScreenId"></param>
            <param name="screenId"></param>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.IUINavigation">
            <summary>
            Interface to define screen navigation
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IUINavigation.IsObjectVisible(System.Int32,System.Int32)">
            <summary>
            Gets the Hidden properof the object;
            </summary>
            <param name="screenId"></param>
            <param name="objectId"></param>
            <returns></returns>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IUINavigation.IsUINavigationEnabled">
            <summary>
            Gets/Set the propery to indicate the visible property
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.IAuthenticationData">
            <summary>
            Summary description for IAuthenticationData.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IAuthenticationData.Token">
            <summary>
            Authentication Token
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IAuthenticationData.ExpiryDateTime">
            <summary>
            Expiration Date Time for the Data
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IAuthenticationData.RenewalToken">
            <summary>
            Renewal Token
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.IClientDataService">
            <summary>
            Summary description for IClientDataService.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataService.ProcessCustomAction(Phoenix.FrameWork.BusFrame.IBusinessObject,System.String,Phoenix.FrameWork.BusFrame.IPhoenixSerializable[])">
            <summary>
            Process Custom Action Specified
            </summary>
            <param name="busObject"></param>
            <param name="customActionName"></param>
            <param name="paremeterList"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataService.ProcessCustomAction(Phoenix.FrameWork.BusFrame.IBusinessObject,Phoenix.FrameWork.Core.IClientDataServiceExtension,System.String,Phoenix.FrameWork.BusFrame.IPhoenixSerializable[])">
            <summary>
            Process Custom Action Specified
            </summary>
            <param name="busObject"></param>
            <param name="customActionName"></param>
            <param name="paremeterList"></param>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataService.ProcessRequest">
            <summary>
            Process Request Loaded
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataService.AddObject(Phoenix.FrameWork.BusFrame.IBusinessObject)">
            <summary>
            Add the business object to the current context process Later
            </summary>
            <param name="objToAdd">Business object to add</param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataService.Reset">
            <summary>
            Reset the current  objects loaded into the current context
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataService.RemoveObject(Phoenix.FrameWork.BusFrame.IBusinessObject)">
            <summary>
            Remove the object from the current context
            </summary>
            <param name="objToRemove">Object to remove</param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataService.CreateDependency(Phoenix.FrameWork.BusFrame.IFieldBase,Phoenix.FrameWork.BusFrame.IFieldBase)">
            <summary>
            Create Dependency between two object field elements
            </summary>
            <param name="parent">Parent field to default As</param>
            <param name="childField">Child field to default from</param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataService.ProcessRequest(Phoenix.FrameWork.BusFrame.XmActionType,Phoenix.FrameWork.BusFrame.IBusinessObject)">
            <summary>
            Process the current business object. Resets the current context
            </summary>
            <param name="objToProcess">Add new object</param>
            <param name="action">type of action to process request</param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataService.ProcessRequest(Phoenix.FrameWork.BusFrame.XmActionType,Phoenix.FrameWork.BusFrame.IBusinessObject,Phoenix.FrameWork.Core.IClientDataServiceExtension)">
            <summary>
            Process the current business object. Resets the current context
            </summary>
            <param name="objToProcess">Add new object</param>
            <param name="action">type of action to process request</param>
            <param name="extension">Extension</param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataService.ProcessRequest(Phoenix.FrameWork.BusFrame.IBusinessObject)">
            <summary>
            Process the current business object. Resets the current context
            </summary>
            <param name="objToProcess">Add new object</param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataService.ProcessRequest(Phoenix.FrameWork.BusFrame.IBusinessObject,Phoenix.FrameWork.Core.IClientDataServiceExtension)">
            <summary>
            Process the current business object. Resets the current context
            </summary>
            <param name="objToProcess">Add new object</param>
            <param name="extension">CDS Ext</param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataService.EnumValues(Phoenix.FrameWork.BusFrame.IBusinessObject,Phoenix.FrameWork.BusFrame.IFieldBase[])">
            <summary>
            Enumerate values for the business object
            </summary>
            <param name="busObject">Business object </param>
            <param name="enumList">List of Fields to enumerate</param>
            <returns>ArrayList of <see cref="T:Phoenix.FrameWork.BusFrame.IEnumValueCollection"/> collection if only one Filed is passed</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataService.EnumValues(Phoenix.FrameWork.BusFrame.IBusinessObject,System.String[])">
            <summary>
            Enumerate values for the business object
            </summary>
            <param name="busObject">Business object</param>
            <param name="enumList">List of XmlTag name of  the field to enumerate</param>
            <returns>ArrayList of <see cref="T:Phoenix.FrameWork.BusFrame.IEnumValueCollection"/> collection if only one Filed is passed</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataService.GetForeignKeyValues(Phoenix.FrameWork.BusFrame.IFieldBase)">
            <summary>
            This Get the foreign Key Value
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataService.ResetEnumCache">
            <summary>
            Resets the Enum cache held by CDS.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataService.GetListView(Phoenix.FrameWork.BusFrame.IBusinessObject,Phoenix.FrameWork.BusFrame.IPhoenixSerializable[])">
            <summary>
            Gets the List View Xml Node for the business object
            </summary>
            <param name="busObject">Business object to get the list view from</param>
            <param name="filterList">ArayList of Filters</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataService.GetListViewObjects(Phoenix.FrameWork.BusFrame.IBusinessObject,Phoenix.FrameWork.BusFrame.IPhoenixSerializable[])">
            <summary>
            Creates an array object from the list view
            </summary>
            <param name="busObject"></param>
            <param name="filterList"></param>
            <returns></returns>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IClientDataService.PrimaryDbAvailable">
            <summary>
            Return true if the primary database is available
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IClientDataService.Extension">
            <summary>
            Get Extensions
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataService.GetAsyncCDS">
            <summary>
            Returns a new instance of an Asynchronous CDS
            </summary>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.IClientDataServiceAysnc">
            <summary>
            
            </summary>
            
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataServiceAysnc.ProcessRequestAsync(System.Threading.CancellationToken)">
            <summary>
            Process Request Loaded
            </summary>
            <param name="token">Cancellation token to cancel the operation</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataServiceAysnc.ProcessRequestAsync(System.Threading.CancellationToken,Phoenix.FrameWork.BusFrame.XmActionType,Phoenix.FrameWork.BusFrame.IBusinessObject)">
            <summary>
            Process the current business object. Resets the current context
            </summary>
            <param name="token">Cancellation token to cancel the operation</param>
            <param name="objToProcess">Add new object</param>
            <param name="action">type of action to process request</param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataServiceAysnc.ProcessRequestAsync(System.Threading.CancellationToken,Phoenix.FrameWork.BusFrame.IBusinessObject)">
            <summary>
            Process the current business object. Resets the current context
            </summary>
            <param name="token">Cancellation token to cancel the operation</param>
            <param name="objToProcess">Add new object</param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataServiceAysnc.GetListViewAsync(System.Threading.CancellationToken,Phoenix.FrameWork.BusFrame.IBusinessObject,Phoenix.FrameWork.BusFrame.IPhoenixSerializable[])">
            <summary>
            Gets the List View Xml Node for the business object
            </summary>
            <param name="token">Cancellation token to cancel the operation</param>
            <param name="busObject">Business object to get the list view from</param>
            <param name="filterList">ArayList of Filters</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataServiceAysnc.GetListViewObjectsAsync(System.Threading.CancellationToken,Phoenix.FrameWork.BusFrame.IBusinessObject,Phoenix.FrameWork.BusFrame.IPhoenixSerializable[])">
            <summary>
            Creates an array object from the list view
            </summary>
            <param name="token">Cancellation token to cancel the operation</param>
            <param name="busObject"></param>
            <param name="filterList"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataServiceAysnc.ProcessCustomActionAsync(System.Threading.CancellationToken,Phoenix.FrameWork.BusFrame.IBusinessObject,System.String,Phoenix.FrameWork.BusFrame.IPhoenixSerializable[])">
            <summary>
            Process Custom Action Specified
            </summary>
            <param name="token">Cancellation token to cancel the operation</param>
            <param name="busObject"></param>
            <param name="customActionName"></param>
            <param name="paremeterList"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataServiceAysnc.EnumValuesAsync(System.Threading.CancellationToken,Phoenix.FrameWork.BusFrame.IBusinessObject,Phoenix.FrameWork.BusFrame.IFieldBase[])">
            <summary>
            Enumerate values for the business object
            </summary>
            <param name="token">Cancellation token to cancel the operation</param>
            <param name="busObject">Business object </param>
            <param name="enumList">List of Fields to enumerate</param>
            <returns>ArrayList of <see cref="T:Phoenix.FrameWork.BusFrame.IEnumValueCollection"/> collection if only one Filed is passed</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataServiceAysnc.EnumValuesAsync(System.Threading.CancellationToken,Phoenix.FrameWork.BusFrame.IBusinessObject,System.String[])">
            <summary>
            Enumerate values for the business object
            </summary>
            <param name="token">Cancellation token to cancel the operation</param>
            <param name="busObject">Business object</param>
            <param name="enumList">List of XmlTag name of  the field to enumerate</param>
            <returns>ArrayList of <see cref="T:Phoenix.FrameWork.BusFrame.IEnumValueCollection"/> collection if only one Filed is passed</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataServiceAysnc.AddObject(Phoenix.FrameWork.BusFrame.IBusinessObject)">
            <summary>
            Add the business object to the current context process Later 
            </summary>
            <param name="objToAdd"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataServiceAysnc.RemoveObject(Phoenix.FrameWork.BusFrame.IBusinessObject)">
            <summary>
            Remove the object from the current context
            </summary>
            <param name="objToRemove">Object to remove</param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataServiceAysnc.Reset">
            <summary>
            Reset the current  objects loaded into the current context
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataServiceAysnc.CreateDependency(Phoenix.FrameWork.BusFrame.IFieldBase,Phoenix.FrameWork.BusFrame.IFieldBase)">
            <summary>
            Create Dependency between two object field elements
            </summary>
            <param name="parent">Parent field to default As</param>
            <param name="childField">Child field to default from</param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataServiceAysnc.GetForeignKeyValues(Phoenix.FrameWork.BusFrame.IFieldBase)">
            <summary>
            This Get the foreign Key Value
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataServiceAysnc.ResetEnumCache">
            <summary>
            Resets the Enum cache held by CDS.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IClientDataServiceAysnc.PrimaryDbAvailable">
            <summary>
            Return true if the primary database is available
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.IClientDataServiceExtension">
            <summary>
            Workflow CDS Extension
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IClientDataServiceExtension.Clone">
            <summary>
            Copy the object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.IWfCDSExtension">
            <summary>
            Workflow CDS Extension
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IWfCDSExtension.WfId">
            <summary>
            WorkflowId
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IWfCDSExtension.WfTaskId">
            <summary>
            Workflow TaskId
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.WfTaskKey">
            <summary>
            CDS Extension
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.WfTaskKey.WfId">
            <summary>
            Workflow Id
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.WfTaskKey.WfTaskId">
            <summary>
            Workflow TaskId
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.WfTaskKey.Clone">
            <summary>
            Clone the Data
            </summary>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.ITransactionMonitor">
            <summary>
            Transaction Monitor for CDS Performance Monitoring
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITransactionMonitor.CreateNewUserTran(System.String,System.Int32,System.String,System.String)">
            <summary>
            Records a new entry
            </summary>
            <param name="formName"></param>
            <param name="formScreenId"></param>
            <param name="eventName"></param>
            <param name="controlName"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITransactionMonitor.UpdateUserTran(System.Int32,System.String,System.Int32,System.String,System.String)">
            <summary>
            Updates the previously created entry
            </summary>
            <param name="userTranId"></param>
            <param name="formName"></param>
            <param name="formScreenId"></param>
            <param name="eventName"></param>
            <param name="controlName"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITransactionMonitor.EndUserTran(System.Int32)">
            <summary>
            Clears the previously recorded entry.
            </summary>
            <param name="userTranId"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITransactionMonitor.GetMonitorHeaderInfo">
            <summary>
            Gets the header info to be passed for transaction monitoring purpose.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ITransactionMonitor.CurrentProcessingBO">
            <summary>
            The current BO which the CDS is processing
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITransactionMonitor.SetNextTranId">
            <summary>
            Sets the next transaction id to be passed in the xm request.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITransactionMonitor.GeMonitorInfo">
            <summary>
            Similar to GetMonitorHeaderInfo, but doesn't chekc the log seetings.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.NullCDSExtension">
            <summary>
            Dummy CDS Extension
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.NullCDSExtension.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.NullCDS">
            <summary>
            Dummy CDS
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.NullCDS.PrimaryDbAvailable">
            <summary>
            PrimaryDbAvailable
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.NullCDS.Extension">
            <summary>
            Extension
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.NullCDS.AddObject(Phoenix.FrameWork.BusFrame.IBusinessObject)">
            <summary>
            AddObject
            </summary>
            <param name="objToAdd"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.NullCDS.CreateDependency(Phoenix.FrameWork.BusFrame.IFieldBase,Phoenix.FrameWork.BusFrame.IFieldBase)">
            <summary>
            CreateDependency
            </summary>
            <param name="parent"></param>
            <param name="childField"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.NullCDS.EnumValues(Phoenix.FrameWork.BusFrame.IBusinessObject,Phoenix.FrameWork.BusFrame.IFieldBase[])">
            <summary>
            EnumValues
            </summary>
            <param name="busObject"></param>
            <param name="enumList"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.NullCDS.EnumValues(Phoenix.FrameWork.BusFrame.IBusinessObject,System.String[])">
            <summary>
            EnumValues
            </summary>
            <param name="busObject"></param>
            <param name="enumList"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.NullCDS.GetAsyncCDS">
            <summary>
            GetAsyncCDS
            </summary>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.NullCDS.GetForeignKeyValues(Phoenix.FrameWork.BusFrame.IFieldBase)">
            <summary>
            GetForeignKeyValues
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.NullCDS.GetListView(Phoenix.FrameWork.BusFrame.IBusinessObject,Phoenix.FrameWork.BusFrame.IPhoenixSerializable[])">
            <summary>
            GetListView
            </summary>
            <param name="busObject"></param>
            <param name="filterList"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.NullCDS.GetListViewObjects(Phoenix.FrameWork.BusFrame.IBusinessObject,Phoenix.FrameWork.BusFrame.IPhoenixSerializable[])">
            <summary>
            GetListViewObjects
            </summary>
            <param name="busObject"></param>
            <param name="filterList"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.NullCDS.ProcessCustomAction(Phoenix.FrameWork.BusFrame.IBusinessObject,System.String,Phoenix.FrameWork.BusFrame.IPhoenixSerializable[])">
            <summary>
            ProcessCustomAction
            </summary>
            <param name="busObject"></param>
            <param name="customActionName"></param>
            <param name="paremeterList"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.NullCDS.ProcessCustomAction(Phoenix.FrameWork.BusFrame.IBusinessObject,Phoenix.FrameWork.Core.IClientDataServiceExtension,System.String,Phoenix.FrameWork.BusFrame.IPhoenixSerializable[])">
            <summary>
            ProcessCustomAction
            </summary>
            <param name="busObject"></param>
            <param name="extension"></param>
            <param name="customActionName"></param>
            <param name="paremeterList"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.NullCDS.ProcessRequest">
            <summary>
            ProcessRequest
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.NullCDS.ProcessRequest(Phoenix.FrameWork.BusFrame.XmActionType,Phoenix.FrameWork.BusFrame.IBusinessObject)">
            <summary>
            ProcessRequest
            </summary>
            <param name="action"></param>
            <param name="objToProcess"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.NullCDS.ProcessRequest(Phoenix.FrameWork.BusFrame.XmActionType,Phoenix.FrameWork.BusFrame.IBusinessObject,Phoenix.FrameWork.Core.IClientDataServiceExtension)">
            <summary>
            ProcessRequest
            </summary>
            <param name="action"></param>
            <param name="objToProcess"></param>
            <param name="extension"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.NullCDS.ProcessRequest(Phoenix.FrameWork.BusFrame.IBusinessObject)">
            <summary>
            ProcessRequest
            </summary>
            <param name="objToProcess"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.NullCDS.ProcessRequest(Phoenix.FrameWork.BusFrame.IBusinessObject,Phoenix.FrameWork.Core.IClientDataServiceExtension)">
            <summary>
            ProcessRequest
            </summary>
            <param name="objToProcess"></param>
            <param name="extension"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.NullCDS.RemoveObject(Phoenix.FrameWork.BusFrame.IBusinessObject)">
            <summary>
            RemoveObject
            </summary>
            <param name="objToRemove"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.NullCDS.Reset">
            <summary>
            Reset
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.NullCDS.ResetEnumCache">
            <summary>
            ResetEnumCache
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.IConfigSvcClient">
            <summary>
            Interface to get the configuration web service information
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IConfigSvcClient.IsSvcAvailable">
            <summary>
            Get/Set whether the service is available
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IConfigSvcClient.GetDbDefinition(System.String,System.String)">
            <summary>
            Get Db Definition 
            </summary>
            <param name="groupName"></param>
            <param name="dbDefName"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IConfigSvcClient.GetDbDefinition(System.Int32)">
            <summary>
            Get Db Definition from applicationId
            </summary>
            <param name="applicationId"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IConfigSvcClient.GetOfflineDbDefName(System.String,System.Boolean)">
            <summary>
            Get offline Db Definition
            </summary>
            <param name="logicalName"></param>
            <param name="strongPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IConfigSvcClient.GetApplicationSetting(System.String,System.String)">
            <summary>
            Get Application Settings
            </summary>
            <param name="groupName"></param>
            <param name="dbDefName"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IConfigSvcClient.GetApplicationSetting(System.Int32)">
            <summary>
            Get Application Settings
            </summary>
            <param name="applicationId"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IConfigSvcClient.GetAuthenticationService(System.String)">
            <summary>
            Get the Database names defined for the group
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IConfigSvcClient.GetAuthenticationService(System.Int32)">
            <summary>
            Get Application Settings
            </summary>
            <param name="applicationId"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IConfigSvcClient.GetDatabaseNames(System.String)">
            <summary>
            Get the Database names defined for the group
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IConfigSvcClient.GetDefaultDatabaseName(System.String)">
            <summary>
            Get the default Database Names
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IConfigSvcClient.SetAESEncryption(System.IO.FileInfo)">
            <summary>
            Get the IsNewEncryption Flag by reading the config file
            </summary>
            <param name="cfgFile"></param>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.Server.ICryptoService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Server.ICryptoService.DecryptFileToObject(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="objType"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Server.ICryptoService.DecryptStringToObject(System.Type,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="objType"></param>
            <param name="base64Encoded"></param>
            <param name="isNewEncryption"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Server.ICryptoService.EncryptObjectToFile(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="objToStore"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Server.ICryptoService.EncryptObjectToString(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="objToStore"></param>
            <param name="isNewEncryption"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Server.ICryptoService.EncryptToBase64(System.String,System.String)">
            <summary>
            User for Encryption where the partial key is stored outside the code (PAN Encryption)
            </summary>
            <param name="plainText"></param>
            <param name="partialKey"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Server.ICryptoService.DecryptFromBase64(System.String,System.String)">
            <summary>
             User with decrypting where the partial key is stored outside the code (PAN Decryption)
            </summary>
            <param name="plainText"></param>
            <param name="partialKey"></param>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.Server.IEnhancedCryptoService">
            <summary>
            Interface to access encryption logic in core of type EnhancedCrypto
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Server.IEnhancedCryptoService.EnhancedEncrypt(System.String)">
            <summary>
            Encrypts the passed in string value using enhanced logic.
            </summary>
            <param name="inputValue">String value to be encrypted</param>
            <returns>Encrypted String</returns>	
        </member>
        <member name="M:Phoenix.FrameWork.Core.Server.IEnhancedCryptoService.EnhancedDecrypt(System.String)">
            <summary>
            Decrypts the passed in string value using enhanced logic.
            </summary>
            <param name="inputValue">String to be decrypted</param>
            <returns>Decrypted string</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Server.IEnhancedCryptoService.SimpleEncrypt(System.String)">
            <summary>
            Encrypts the passed in string value using a simple logic.
            </summary>
            <param name="inputValue">String value to be encrypted</param>
            <returns>Encrypted String</returns>	
        </member>
        <member name="M:Phoenix.FrameWork.Core.Server.IEnhancedCryptoService.SimpleDecrypt(System.String)">
            <summary>
            Decrypts the passed in string value using simple logic.
            </summary>
            <param name="inputValue">String to be decrypted</param>
            <returns>Decrypted string</returns>	
        </member>
        <member name="T:Phoenix.FrameWork.Core.ICryptoProvider">
            <summary>
            Defines the basic operations of cryptographic transformations.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ICryptoProvider.Encrypt(System.Byte[])">
            <summary>
            Encrypts data using the Crypto Provider implementd.
            </summary>
            <param name="plainText">PlainText data</param>
            <returns>Encrypted byte array</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ICryptoProvider.Decrypt(System.Byte[])">
            <summary>
            Decrypts data using the Crypto Provider implementd .
            </summary>
            <param name="cipherText">Encrypted date byte array</param>
            <returns>Decrypted byte array</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ICryptoProvider.EncryptToBase64(System.String)">
            <summary>
            Encryptes the string value, and encodes it to Base64.
            </summary>
            <param name="plainText">Data to encrypted and encoded.</param>
            <returns>Encoded, Encrypted value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ICryptoProvider.DecryptFromBase64(System.String)">
            <summary>
            Decode the Base64 value then decrypts the decoded value to return plain data value.
            </summary>
            <param name="base64Text">Data to be decoded and decrypted</param>
            <returns>Decoded, Decrypted value</returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.IRSACryptoProvider">
            <summary>
            RSA Crypto provider 
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IRSACryptoProvider.GetRSAParameters(System.Boolean)">
            <summary>
            GET RSA parameters from the loaded keys
            </summary>
            <param name="forPrivateKey"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IRSACryptoProvider.InitializeDefaultProvider">
            <summary>
            Initialize Default provider. server uses the server key.  
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IRSACryptoProvider.IsClientType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.IDbConfiguration">
            <summary>
            Defines the basic operations of database Configurations.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbConfiguration.ServerType">
            <summary>
            Gets/Sets Server Type
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbConfiguration.XmDbName">
            <summary>
            Gets/Sets XM Database Name
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbConfiguration.ServerName">
            <summary>
            Get/Sets the Database Server Name
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbConfiguration.LanguageId">
            <summary>
            Language Id of the database
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbConfiguration.UserName">
            <summary>
            user name to use in Database
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbConfiguration.Password">
            <summary>
            Password to use in Database
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbConfiguration.OtherConnectionInfo">
            <summary>
            Additional information to use in making the connection info
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbConfiguration.ConnectionString">
            <summary>
            Full Connection string
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbConfiguration.ConnectionStringPartial">
            <summary>
            Partial Connection string without username/password
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbConfiguration.BiUrl">
            <summary>
            Touche Business Intelligence Url
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbConfiguration.MessengerUrl">
            <summary>
            Touche Messenger Url
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.IAuthService">
            <summary>
            Authentication Service Interface
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IAuthService.Url">
            <summary>
            Url Where Autentication service can be located
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IAuthService.AuthType">
            <summary>
            Authentication Type
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.IDbHelper">
            <summary>
            Definition of the Database Helper functions.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.BeginTran">
            <summary>
            Begin transaction on the internal connection
            </summary>
            <returns>Return transaction Count</returns>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbHelper.IsInTransaction">
            <summary>
            Returns True If a BeginTran was issued, and there was no Commit or Rollback was called
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbHelper.CmdTimeOut">
            <summary>
            Gets/sets the command Time out. Default is 10 min
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbHelper.IsOfflineDb">
            <summary>
            True if the database is pointing to Offline
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.Commit">
            <summary>
            Commit the internal transaction.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.Rollback">
            <summary>
            Rollback the inte
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbHelper.IsPrimaryDbAvailable">
            <summary>
            True if the Primary Database is available; false otherwise;
            Information received from XP_CONTROL.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbHelper.IsDenaliServer">
            <summary>
            True if the sqlserver is denali ;
            Information received from ad_gb_bank.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.BeginSavePoint(System.String)">
            <summary>
            Creates a new save point in the default transaction.
            </summary>
            <param name="savepointName">Save point name.</param>
            <returns>0 success</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.BeginSavePoint(System.Data.IDbTransaction,System.String)">
            <summary>
            Create a new save point in the give transaction.
            </summary>
            <param name="tran">Transaction element to be used</param>
            <param name="savepointName">Save point name</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.RollBackSavePoint(System.String)">
            <summary>
            Rollback the save point identified by the name, on default transaction 
            </summary>
            <param name="savepointName">Savepoint name</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.RollBackSavePoint(System.Data.IDbTransaction,System.String)">
            <summary>
             Rollback the save point identified by the name, on the given transaction 
            </summary>
            <param name="tran">Transaction to use</param>
            <param name="savepointName">Savepoint name</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.NewConnection">
            <summary>
            Creates a new <see cref="T:System.Data.IDbConnection"/> object and returns it.
            </summary>
            <returns>Returns <see cref="T:System.Data.IDbConnection"/></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.NewConnection(System.Boolean)">
            <summary>
            Create a new <see cref="T:System.Data.IDbConnection"/> object and returns it.
            </summary>
            <remarks>
            If <see cref="T:System.Boolean">isOpenConnection</see> is true, then open the connection before 
            returning it.
            </remarks>
            <param name="isOpenConnection"><see cref="T:System.Boolean"/> value to indicate whether the connection has to be opend before returned.</param>
            <returns><see cref="T:System.Data.IDbConnection"/> value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.NewConnection(System.String)">
            <summary>
            Create a new <see cref="T:System.Data.IDbConnection"/>object and set the connection string value to 
            </summary>
            <param name="connectionString">string value</param>
            <returns><see cref="T:System.Data.IDbConnection"/> value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.NewCommand(System.Data.IDbConnection)">
            <summary>
            Create a new <see cref="T:System.Data.IDbCommand"/> from the passed in <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <param name="connection"><see cref="T:System.Data.IDbConnection"/> object</param>
            <returns><see cref="T:System.Data.IDbCommand"/> object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.NewCommand(System.Data.IDbTransaction)">
            <summary>
            Create new <see cref="T:System.Data.IDbCommand"/> object from passed in <see cref="T:System.Data.IDbTransaction"/> object.
            </summary>
            <param name="transaction"><see cref="T:System.Data.IDbTransaction"/> object</param>
            <returns><see cref="T:System.Data.IDbCommand"/> object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.NewParameter">
            <summary>
            Creates a <see cref="T:System.Data.IDataParameter"/> for the current provider.
            </summary>
            <returns><see cref="T:System.Data.IDataParameter"/> object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.NewParameter(System.Int32)">
            <summary>
            Create an array of <see cref="T:System.Data.IDataParameter"/> for the current provider
            </summary>
            <param name="size">number of parmetes to create</param>
            <returns><see cref="T:System.Data.IDataParameter"/> object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.NewParameter(System.String,System.Data.DbType)">
            <summary>
            Creates a new parameter using the passed in values.
            </summary>
            <param name="parameterName">string name indicating the value</param>
            <param name="dbType"><see cref="T:System.Data.DbType"/> value</param>
            <returns><see cref="T:System.Data.IDataParameter"/> object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.NewParameter(System.String,Phoenix.FrameWork.Core.FieldType)">
            <summary>
            
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.NewParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Creates a new parameter using the passed in values.
            </summary>
            <param name="parameterName">string name indicating the value</param>
            <param name="dbType"><see cref="T:System.Data.DbType"/> value</param>
            <param name="size">size of the parameter.  Usable for string types.</param>
            <returns><see cref="T:System.Data.IDataParameter"/> object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.NewParameter(System.String,System.Object)">
            <summary>
            Creates a new parameter using the passed in values.
            </summary>
            <param name="parameterName">string name indicating the value</param>
            <param name="value">values to be set.</param>
            <returns><see cref="T:System.Data.IDataParameter"/> object</returns>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbHelper.Connection">
            <summary>
            Gets the internal <see cref="T:System.Data.IDbConnection">Connection</see> object
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbHelper.Transaction">
            <summary>
            Gets the internal <see cref="T:System.Data.IDbTransaction">Transaction</see> object.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbHelper.ConnectionString">
            <summary>
            Gets the Connection strong for the current configuration
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbHelper.DbCurrentTimeStamp">
            <summary>
            returns the SQL string value of the DbCurrentTimeStamp.
            </summary>
            <remarks>This value can be use in SQL Statements. Doesn't contain real datetime value</remarks>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbHelper.DbCurrentDateTime">
            <summary>
            returns the SQL string value of the DbCurrentDateTime.
            </summary>
            <remarks>This value can be use in SQL Statements. Doesn't contain real datetime value</remarks>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbHelper.DbCurrentDate">
            <summary>
            returns the SQL string value of the DbCurrentDate.
            </summary>
            <remarks>This value can be use in SQL Statements. Doesn't contain real datetime value</remarks>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbHelper.PhoenixDbName">
            <summary>
            <see cref="T:System.String"/> value indicating the Phoenix Database to be used.		/// 
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbHelper.XmDbName">
            <summary>
            <see cref="T:System.String"/> value indicating the Phoenix Database to be used.		/// 
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbHelper.DbPrefix">
            <summary>
            <see cref="T:System.String"/> value indicating the current database to be used.
            </summary>
            <remarks>
            relies on <see cref="P:Phoenix.FrameWork.Core.IDbHelper.CopyStatus"/> to decide what to do.
            <para>
            If the phoenix database is available and the name is <b>Phoenix</b> then return value will be <b>Phoenix..</b>
            </para>
            <para>
            If the xapi database name is <b>Xapi</b> and Phoenix datbase is not available then the value will be <b>x_</b>
            </para>
            </remarks>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbHelper.CopyStatus">
            <summary>
            Copy status of the Xapi Database.
            </summary>
            <remarks>
            Can be either 'B', 'C', 'D' or 'N'
            </remarks>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbHelper.XmDbStatus">
            <summary>
            Xm Db Status 
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbHelper.ServerType">
            <summary>
            Returns the current <see cref="P:Phoenix.FrameWork.Core.IDbHelper.ServerType"/>.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.ExecuteNonQuery(System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the internal Connection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery( "Update tbl1 set value = 1 ");
            </remarks>
            <param name="commandText">The T-SQL command</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.ExecuteNonQuery(System.String,System.Collections.ArrayList)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the internal Connection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery( "Update tbl1 set value = 1 ");
            </remarks>
            <param name="commandText">The T-SQL command</param>
            <param name="paramCollection">Arraylist of parameters</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.ExecuteNonQuery(System.Data.IDbConnection,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, "Update tbl1 set value = 1 ");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandText">The T-SQL command</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.ExecuteNonQuery(System.Data.IDbTransaction,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided transaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, "Update tbl1 set col_1 = 1 ");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandText">The  T-SQL command</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.ExecuteNonQuery(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.ExecuteNonQuery(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
             Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
             using the provided parameters.
             </summary>
             <remarks>
             e.g.:  
              int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
             </remarks>
             <param name="transaction">A valid SqlTransaction</param>
             <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
             <param name="commandText">The stored procedure name or T-SQL command</param>
             <param name="commandParameters">An array of SqlParamters used to execute the command</param>
             <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.UpdateAndVerify(System.Data.IDbConnection,System.String,System.Int32)">
            <summary>
            Updates and verifies the number of rows updated.  Creates a new transaction, then makes the SQL execution.
            If the number of rows updated is not equal to expectedrows  then rollsback, otherwise commit.
            </summary>
            <param name="connection">A Valid Database connection</param>
            <param name="commandText">Update Statement.</param>
            <param name="rowsToBeUpdated">expected number of rows to be updated.</param>
            <returns>True if the updated is success otherwise false.</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.ExecuteReader(System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection.
            Uses internal connection object. 
            </summary>
            <remarks>
            e.g.:  
             IDataReader dr = ExecuteReader(  "sp_help");
             IDataReader dr = ExecuteReader(  "Select * from sysobjects");
            </remarks>
            <param name="commandText">T-SQL command</param>
            <returns>An IDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.ExecuteReader(System.String,System.Collections.ArrayList)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection.
            Uses internal connection object. 
            </summary>
            <remarks>
            e.g.:  
             IDataReader dr = ExecuteReader(  "sp_help");
             IDataReader dr = ExecuteReader(  "Select * from sysobjects");
            </remarks>
            <param name="commandText">T-SQL command</param>
            <param name="paramCollection">Parameter Collection Array List</param>
            <returns>An IDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.ExecuteReader(System.Data.IDbConnection,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             IDataReader dr = ExecuteReader( connection, "sp_help");
             IDataReader dr = ExecuteReader( connection, "Select * from sysobjects");
            </remarks>
            <param name="connection">A valid Database  Connection</param>
            <param name="commandText">T-SQL command</param>
            <returns>An IDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.ExecuteReader(System.Data.IDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             IDataReader dr = ExecuteReader( connection, CommandType.StoredProcedure, "sp_help");
             IDataReader dr = ExecuteReader( connection, CommandType.StoredProcedure, "Select * from sysobjects");
            </remarks>
            <param name="connection">A valid Database Connection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An IDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.ExecuteReader(System.Data.IDbTransaction,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided Transaction object. 
            </summary>
            <remarks>
            e.g.:  
             IDataReader dr = ExecuteReader( transaction, "sp_help");
             IDataReader dr = ExecuteReader( transaction, "Select * from sysobjects");
            </remarks>
            <param name="transaction">A valid Database Transaction</param>
            <param name="commandText">T-SQL command</param>
            <returns>An IDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.ExecuteReader(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided transaction object. 
            </summary>
            <remarks>
            e.g.:  
            	SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "sp_help");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.ExecuteReader(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "sp_help", new SqlParameter("@objname", "SP_HELP"));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.ExecuteReader(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.	
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "sp_help", new Parameter("@name", "my_sp"));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.ExecuteScalar(System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <param name="commandText">T-Sql command </param>
            <returns>Return value from the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.ExecuteScalar(System.String,System.Collections.ArrayList)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <param name="commandText">T-Sql command </param>
            <param name="paramCollection">Array list of <see cref="T:System.Data.IDataParameter"/></param>
            <returns>Return value from the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.ExecuteScalar(System.Data.IDbConnection,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int ptid = (int)ExecuteScalar(conn, "psp_get_ptid ""asdf""");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandText">The CommandType (stored procedure, text, etc.)</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.ExecuteScalar(System.Data.IDbTransaction,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int ptid = (int)ExecuteScalar(trans, "psp_get_ptid ""adfaf""");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.ExecuteScalar(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "psp_getptid", new SqlParameter("@tableName", "MUTHU_TEST"));
            </remarks>
            <param name="connection">A valid database connection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of IDataParameter used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.ExecuteScalar(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid Database Transaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.Clone">
            <summary>
            Returns a clone of the DbHelper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelper.NewDataAdapter(System.String)">
            <summary>
            Creates and returns a Data Adapter
            </summary>
            <param name="selectCommandText"></param>
            <returns></returns>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDbHelper.OtherConnectionInfo">
            <summary>
            Other connection information 
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.IOtherConnectionInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IOtherConnectionInfo.ConnectionIsXmDb">
            <summary>
            True if the connection string is for XM Database
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.IDbHelperFactory">
            <summary>
            Definition of Database Helper Factory.
            </summary>
            <remarks>
            The Database Helper factory uses the Configuration and creates the DbHelper object
            according to the configuration.
            </remarks>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelperFactory.GetDbHelper(System.Int32)">
            <summary>
            Creates the Database Helper object according the applcation Id.
            </summary>
            <param name="applicationId">Application id generated by the ConfigurationManager</param>
            <returns>valid Database helper object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IDbHelperFactory.GetDbHelper(System.String,System.String)">
            <summary>
            Creates the Datbase helper object for groupName and dbDefName.
            </summary>
            <param name="groupName">Release group name.</param>
            <param name="dbDefName">Database definition name oto be used for the application.</param>
            <returns>valid database helper object.</returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.IExceptionPublisher">
            <summary>
            Summary description for IExceptionPublisher.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IExceptionPublisher.Publish(System.String)">
            <summary>
            Publish the passed int message.
            </summary>
            <param name="message">message to published.</param>
        </member>
        <member name="T:Phoenix.FrameWork.Core.ILogPublisher">
            <summary>
            Definition of Log Publisher funcitons.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ILogPublisher.LogInfo(System.String)">
            <summary>
            Summary of LogInfo.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ILogPublisher.LogError(System.String)">
            <summary>
            Log the error information. 
            </summary>
            <param name="message">message to be logged</param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ILogPublisher.LogWarning(System.String)">
            <summary>
            Log the warning information.
            </summary>
            <param name="message">message to be logged</param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ILogPublisher.LogDebug(System.String)">
            <summary>
            Log Debug Information.  
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ILogPublisher.LogSql(System.String)">
            <summary>
            Log Sql Messages.  Allowed only when the <see cref="P:Phoenix.FrameWork.Core.IDebugInfo.SqlLevel"/> is greater than LogLevel.None
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ILogPublisher.Initialize(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initialize the logger identified by the name
            </summary>
            <param name="loggerName">Name of the Logger in the configuration</param>
            <param name="configFileName">Config File Name for the logger to load. If null default logger will be created</param>
            <param name="isLogFile">True if Log file need to be created</param>
            <param name="isLogInResponse">True if log has to be returned as part of response</param>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ILogPublisher.FileName">
            <summary>
            Get/Set the file name to use for the debug Log
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ILogPublisher.DebugString">
            <summary>
            Get the debug String
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ILogPublisher.LogError(System.String,System.Boolean)">
            <summary>
            Log the error information. 
            </summary>
            <param name="message">message to be logged</param>
            <param name="ignoreLogSetting">force write into the log file</param>
        </member>
        <member name="T:Phoenix.FrameWork.Core.IDebugInfo">
            <summary>
            Interface definition for Debug Info.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDebugInfo.SqlLevel">
            <summary>
            Set/Get Log level for  the Sql Texts
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDebugInfo.DebugLevel">
            <summary>
            Set/Get Log level for  the Debug Texts
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDebugInfo.WarningLevel">
            <summary>
            Set/Get log level for warning text
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDebugInfo.InfoLevel">
            <summary>
            Set/Get log level for Information
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IDebugInfo.IsLogEnabled">
            <summary>
            set true to create the debug as specified
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.IMessenger">
            <summary>
            Interface for invoking the MessageBox from Business Object ( client only )
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IMessenger.Show(System.Int32,Phoenix.Windows.Forms.MessageType,Phoenix.Windows.Forms.PMessageBoxButtons,Phoenix.Windows.Forms.PMessageBoxDefaultButton,Phoenix.FrameWork.BusFrame.IFieldBase,System.String[])">
            <summary>
            Method to invoke the message box from client BO.
            </summary>
            <param name="mlMessageId"></param>
            <param name="messageType"></param>
            <param name="messageButtons"></param>
            <param name="defaultButton"></param>
            <param name="field"></param>
            <param name="messageTokens"></param>
            <returns>PDialogResult</returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.ICheckVersion2">
            <summary>
            Extended Version
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ICheckVersion2.CheckStatus(System.String,Phoenix.FrameWork.Core.IDbHelper,System.Xml.XmlTextWriter)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="dbHelper"></param>
            <param name="writer"></param>
        </member>
        <member name="T:Phoenix.FrameWork.Core.Language">
            <summary>
            Language Enumerator
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.Language.English">
            <summary>
            The language to be used is English.
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.Language.Spanish">
            <summary>
            Language to be used is Spanish
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.ContainerInfo">
            <summary>
            This class represents the Container Info and stores details about the screen.
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.ContainerInfo._bvProperties">
            <summary>
            BitVector Properties
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ContainerInfo.#ctor">
            <summary>
            Simple Contstuctor
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ContainerInfo.IsInit">
            <summary>
            True if the class is initialized, otherwise false
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ContainerInfo.LanguageId">
            <summary>
            Language Id 
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ContainerInfo.ApplicationId">
            <summary>
            Multilanguage indicator for thecurrent application.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ContainerInfo.ScreenId">
            <summary>
            Current UI screen id.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ContainerInfo.NewRecordTitle">
            <summary>
            The title to be used when adding a new record for this screen	
            </summary>	
        </member>
        <member name="P:Phoenix.FrameWork.Core.ContainerInfo.EditRecordTitle">
            <summary>
            The title to be used when editing an existing record for this screen	
            </summary>		
        </member>
        <member name="P:Phoenix.FrameWork.Core.ContainerInfo.AuditDescription">
            <summary>
            The description to be used while logging audits for this screen
            </summary>		
        </member>
        <member name="P:Phoenix.FrameWork.Core.ContainerInfo.IsAvailable24x7">
            <summary>
            Flag to indicate the availability of the 24x7. if the flag is false
            the screen is not available when the Database is XP_CONTROL.COPY_STATUS
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ContainerInfo.IsAvailableWithPhoenixDbOnly">
            <summary>
            True if the window can run only when the Phoenix Db is available. False otherwise
            This flag works with IsAvailable24x7
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ContainerInfo.IsAvailableOffline">
            <summary>
            Flag to indicate the availability of the screen in offline mode
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ContainerInfo.DoNotShowObjectTags">
            <summary>
            Status to show Object window(Object Tag) details screen
            </summary>	        
        </member>
        <member name="T:Phoenix.FrameWork.Core.ControlInfo">
            <summary>
            This class represents the Control Info and stores the details about the screen object.
            </summary>
            
        </member>
        <member name="M:Phoenix.FrameWork.Core.ControlInfo.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ControlInfo.IsInit">
            <summary>
            True if initialized otherwise false
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ControlInfo.LanguageId">
            <summary>
            Language Id 
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ControlInfo.ApplicationId">
            <summary>
            Application Id, ML representation. Not be confused with COnfiguration.ApplicationId. 
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ControlInfo.ScreenId">
            <summary>
            Screen Id ofthe current UI
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ControlInfo.ObjectId">
            <summary>
            Object Id inside the Screen.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ControlInfo.Label">
            <summary>
            The label text for the object			
            </summary>	
        </member>
        <member name="P:Phoenix.FrameWork.Core.ControlInfo.ProperName">
            <summary>
            The proper name of the object
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ControlInfo.StatusLine">
            <summary>
            The status line text for the object	
            </summary>	
        </member>
        <member name="P:Phoenix.FrameWork.Core.ControlInfo.ToolTip">
            <summary>
            The Tool tip text for the object
            </summary>	
        </member>
        <member name="P:Phoenix.FrameWork.Core.ControlInfo.OverrideLabel">
            <summary>
            Override Label Name for Window Object details screen
            </summary>	
        </member>
        <member name="P:Phoenix.FrameWork.Core.ControlInfo.OverrideTable">
            <summary>
            Override Table Name for Window Object details screen
            </summary>	
        </member>
        <member name="P:Phoenix.FrameWork.Core.ControlInfo.OverrideColumn">
            <summary>
            Override column Name for Window Object details screen
            </summary>	
        </member>
        <member name="P:Phoenix.FrameWork.Core.ControlInfo.OverrideXMLTag">
            <summary>
            Override XML element Name for Window Object details screen
            </summary>	
        </member>
        <member name="P:Phoenix.FrameWork.Core.ControlInfo.DoNotShowObjectTag">
            <summary>
            Status to show Object window(Object Tag) details screen
            </summary>	        
        </member>
        <member name="T:Phoenix.FrameWork.Core.ITranslate">
            <summary>
            The ITranslate class provides the methods to access to all of the Multi Language resource elements
            for the PhoenixXM application.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ITranslate.BaseLanguageId">
            <summary>
            The base language Id. The MLService constructor will set this to English = 1 by default.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITranslate.GetListItem(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            This method shall translate and return the list item text in the language requested (targetLanguageId) given the values for the item in the sourceLanguageId.		
            <seealso cref="M:Phoenix.FrameWork.Core.ITranslate.GetListItemX(System.Int32,System.String)"/>		
            </summary>
            <param name="sourceLanguageId">The Language in which the listItemText parameter is being supplied.</param>
            <param name="targetLanguageId">The Language to which the listItemText parameter must be translated.</param>		
            <param name="listId">The List Id of the list to which the item specified in listItemText belongs to.</param>
            <param name="listItemText">The list item which is to be translated</param>
            <returns>Returns the list item in the target language specified</returns>		
            <example> <code>listItemText = GetListItem ( 1, 2, 100 , "Active"); </code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITranslate.GetListItemX(System.Int32,System.String)">
            <summary>
            This method shall translate and return the list item text in the base language (BaseLanguageId property) given the values for the item in English =1.
            </summary>		
            <param name="listId">The List Id of the list to which the item specified in listItemText belongs to.</param>		
            <param name="listItemText">The list item which is to be translated, this is in English = 1</param>
            <returns>Returns the list item in the Base Language specified</returns>
            <example> <code>listItemText = GetListItemX ( 1000, "Active") </code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITranslate.GetList(System.Int32,System.Int32)">
            <summary>
            This method shall translate and return the entire list with the values separated by the '^' delimiter in the language specified by the languageId parameter.		
            <seealso cref="M:Phoenix.FrameWork.Core.ITranslate.GetListX(System.Int32)"/>
            </summary>
            <param name="languageId">The Language in which the list is requested.</param>		
            <param name="listId">The List Id of the list requested.</param>				
            <returns>Returns the entire list with the values separated by the '^' delimiter in the language specified by the languageId parameter</returns>
            <example> <code>listText = GetList ( 1 , 1000 ) ; </code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITranslate.GetListX(System.Int32)">
            <summary>
            This method shall translate and return the entire list with the values separated by the '^' delimiter in the Base Language (BaseLanguageId property).		
            </summary>				
            <param name="listId">The List Id of the list requested.</param>				
            <returns>Returns the entire list with the values separated by the '^' delimiter in the Base Language (BaseLanguageId property).</returns>
            <example> <code>	listText = GetListX (1000 ) ;</code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITranslate.GetUserMessage(System.Int32,System.Int32)">
            <summary>
            This method shall translate and return the message text for the language and message specified by the languageId and messageId parameters.		
            <seealso cref="M:Phoenix.FrameWork.Core.ITranslate.GetUserMessageX(System.Int32)"/>
            </summary>		
            <param name="languageId">The Language in which the message text is requested.</param>		
            <param name="messageId">The Message Id of the message requested.</param>		
            <returns>Returns the message text for the language and message specified by the languageId and messageId parameters.</returns>
            <example> <code>	messageText = GetUserMessage ( 1 , 20 ) ;</code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITranslate.GetUserMessageX(System.Int32)">
            <summary>
            This method shall translate and return the message text in the Base Language (BaseLanguageId property) for the message specified by the messageId parameter.		
            </summary>						
            <param name="messageId">The Message Id of the message requested.</param>		
            <returns>Returns the message text in the Base Language (BaseLanguageId property).</returns>
            <example> <code>	messageText = GetUserMessageX ( 20 ) ;</code></example>		
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITranslate.GetTranslate(System.Int32,System.Int32,System.Int32)">
            <summary>
            This method shall translate and return the translate text for the language,screen and translate Id's specified by the languageId and screenId and translateId parameters.		
            <seealso cref="M:Phoenix.FrameWork.Core.ITranslate.GetTranslateX(System.Int32,System.Int32)"/>
            </summary>		
            <param name="languageId">The Language in which the translate text is requested.</param>		
            <param name="screenId">The screen Id of the screen to which this translate item belongs to.</param>
            <param name="translateId">The Translate Id of the translate item requested.</param>		
            <returns>Returns the translate text for the language,screen and translate Id's specified by the languageId and screenId and translateId parameters.</returns>
            <example> <code>translateText = GetTranslate ( 1 , 717 , 2 ) ;</code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITranslate.GetTranslateX(System.Int32,System.Int32)">
            <summary>
            This method shall translate and return the translate text in the Base Language (BaseLanguageId property) for the screen and translate Id's specified by the screenId and translateId parameters.		
            </summary>						
            <param name="screenId">The screen Id of the screen to which this translate item belongs to.</param>
            <param name="translateId">The Translate Id of the translate item requested.</param>		
            <returns>Returns the translate text in the Base Language (BaseLanguageId property) for the screen and translate Id's specified by the screenId and translateId parameters.</returns>
            <example> <code>translateText = GetTranslateX ( 717 , 2 ) ;</code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITranslate.GetUIContainerInfo(System.Int32,System.Int32,System.Int32)">
            <summary>
            This method shall retrieve the screen related information and return the same in the ContainerInfo members,NewRecordTitle,EditRecordTitle and AuditDescription in the language specified by the languageId parameter for the screen specified by the screenId parameter.		
            </summary>	
            <param name="languageId">The Language in which the screen information is requested.</param>			
            <param name="applicationId">The application Id.</param>		
            <param name="screenId">The screen Id of the screen.</param>
            <returns>Returns ContainerInfo Class. Extract the members as required. The IsInit public memeber decides whether the method succeeded.</returns>
            <example> <code>
            ContainerInfo formInfo  =  GetUIContainerInfo ( 1 , 1 , 717 );
            if (formInfo.IsInit)
            {
            	..do something using the other public members of formInfo.
            }
            </code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITranslate.GetUIControlInfo(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method shall retrieve the screen object information and return the same in the ControlInfo class members Label,ProperName , StatusLine , ToolTip in the language specified by the languageId parameter for the object specified by the screenId and objectId parameters.		
            </summary>	
            <param name="languageId">The Language in which the screen object information is requested.</param>	
            <param name="applicationId">The application Id.</param>		
            <param name="screenId">The screen Id of the screen.</param>
            <param name="objectId">The object Id of the object.</param>		
            <returns>Returns ControlInfo Class. Extract the members as required. The IsInit public memeber decides whether the method succeeded.</returns>
            <example> <code>
            ControlInfo formObjectInfo  =  GetUIControlInfo ( 1 , 1 , 717, 2 );
            if (formObjectInfo.IsInit)
            {
            	..do something using the other public members of formObjectInfo.
            }
            </code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITranslate.GetTokenizeMessage(System.Int32,System.Int32,System.String[])">
            <summary>
            This method shall translate and return the final message text with all the %[1-9]! replaced with the input string received from messageInput for the language and message specified by the languageId and messageId parameters.		
            <seealso cref="M:Phoenix.FrameWork.Core.ITranslate.GetUserMessageX(System.Int32)"/>
            </summary>		
            <param name="languageId">The Language in which the message text is requested.</param>		
            <param name="messageId">The Message Id of the message requested.</param>		
            <param name="messageInput">The string array of message input replaces the %!! in the actual message text.</param>
            <returns>Returns the message text for the language and message specified by the languageId and messageId parameters.</returns>
            <example> <code>	messageText = GetUserMessage ( 1 , 20 ) ;</code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITranslate.GetTokenizeMessageX(System.Int32,System.String[])">
            <summary>
            This method shall translate and return the fianl message text with all the %[1-9]! replaced with the input string received from messageInput in the Base Language (BaseLanguageId property) for the message specified by the messageId parameter.		
            </summary>						
            <param name="messageId">The Message Id of the message requested.</param>		
            <param name="messageInput">The string array of message input replaces the %!! in the actual message text.</param>
            <returns>Returns the message text in the Base Language (BaseLanguageId property).</returns>
            <example> <code>	messageText = GetUserMessageX ( 20 ) ;</code></example>		
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITranslate.GetTokenizeTranslate(System.Int32,System.Int32,System.Int32,System.String[])">
            <summary>
            This method shall translate and return the final translate text with all the %[1-9]! replaced by input string received from translateInput array for the language,screen and translate Id's specified by the languageId and screenId and translateId parameters.		
            <seealso cref="M:Phoenix.FrameWork.Core.ITranslate.GetTranslateX(System.Int32,System.Int32)"/>
            </summary>		
            <param name="languageId">The Language in which the translate text is requested.</param>		
            <param name="screenId">The screen Id of the screen to which this translate item belongs to.</param>
            <param name="translateId">The Translate Id of the translate item requested.</param>		
            <param name="translateInput">The string array of translate input replaces the %!! in the actual translate text.</param>
            <returns>Returns the translate text for the language,screen and translate Id's specified by the languageId and screenId and translateId parameters.</returns>
            <example> <code>translateText = GetTranslate ( 1 , 717 , 2 ) ;</code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITranslate.GetTokenizeTranslateX(System.Int32,System.Int32,System.String[])">
            <summary>
            This method shall translate and return the final translate text with all the %[1-9]! replaced by input string received from translateInput array in the Base Language (BaseLanguageId property) for the screen and translate Id's specified by the screenId and translateId parameters.		
            </summary>						
            <param name="screenId">The screen Id of the screen to which this translate item belongs to.</param>
            <param name="translateId">The Translate Id of the translate item requested.</param>
            <param name="translateInput">The string array of translate input replaces the %!! in the actual translate text.</param>		
            <returns>Returns the clean translate text in the Base Language (BaseLanguageId property) for the screen and translate Id's specified by the screenId and translateId parameters.</returns>
            <example> <code>translateText = GetTranslateX ( 717 , 2 ) ;</code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITranslate.GetListDecodeValue(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            This method shall translate and return the decode value in the language requested (targetLanguageId) given the value for the codeValue in the sourceLanguageId.		
            <seealso cref="M:Phoenix.FrameWork.Core.ITranslate.GetListDecodeValue(System.Int32,System.Int32,System.Int32,System.String)"/>		
            </summary>
            <param name="sourceLanguageId">The Language in which the codeValue parameter is being supplied.</param>
            <param name="targetLanguageId">The Language to which the codeValue parameter must be translated.</param>		
            <param name="listId">The List Id of the list to which the item specified in codeValue belongs to.</param>
            <param name="codeValue">The list item which is to be translated</param>
            <returns>Returns the decode value in the target language specified</returns>		
            <example> <code>decodeValueText = GetListDecodeValue ( 1, 2, 100 , "Active"); </code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITranslate.GetListDecodeValueX(System.Int32,System.String)">
            <summary>
            This method shall translate and return the decode value in the base language (BaseLanguageId property) given the value for codeValue in English =1.
            </summary>		
            <param name="listId">The List Id of the list to which the item specified in codeValue belongs to.</param>		
            <param name="codeValue">The list item which is to be translated, this is in English = 1</param>
            <returns>Returns the decode value in the Base Language specified</returns>
            <example> <code>decodeValueText = GetListItemX ( 1000, "Active") </code></example>
        </member>
        <member name="T:Phoenix.FrameWork.Core.ITranslationService">
            <summary>
            Translation Service Providers
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ITranslationService.Services">
            <summary>
            List of transation service Providers
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITranslationService.GetListItem(System.String,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            This method shall translate and return the list item text in the language requested (targetLanguageId) given the values for the item in the sourceLanguageId.		
            </summary>	
            <param name="translationProvider">translation provider name; null to use default provider</param>
            <param name="sourceLanguageId">The Language in which the listItemText parameter is being supplied.</param>
            <param name="targetLanguageId">The Language to which the listItemText parameter must be translated.</param>		
            <param name="listId">The List Id of the list to which the item specified in listItemText belongs to.</param>
            <param name="listItemText">The list item which is to be translated</param>
            <returns>Returns the list item in the target language specified</returns>		
            <example> <code>listItemText = GetListItem ( 1, 2, 100 , "Active"); </code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITranslationService.GetList(System.String,System.Int32,System.Int32)">
            <summary>
            This method shall translate and return the entire list with the values separated by the '^' delimiter in the language specified by the languageId parameter.		
            </summary>	
            <param name="translationProvider">translation provider name; null to use default provider</param>
            <param name="languageId">The Language in which the list is requested.</param>		
            <param name="listId">The List Id of the list requested.</param>				
            <returns>Returns the entire list with the values separated by the '^' delimiter in the language specified by the languageId parameter</returns>
            <example> <code>listText = GetList ( 1 , 1000 ) ; </code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITranslationService.GetUserMessage(System.String,System.Int32,System.Int32)">
            <summary>
            This method shall translate and return the message text for the language and message specified by the languageId and messageId parameters.		
            </summary>	
            <param name="translationProvider">translation provider name; null to use default provider</param>		
            <param name="languageId">The Language in which the message text is requested.</param>		
            <param name="messageId">The Message Id of the message requested.</param>		
            <returns>Returns the message text for the language and message specified by the languageId and messageId parameters.</returns>
            <example> <code>	messageText = GetUserMessage ( 1 , 20 ) ;</code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITranslationService.GetTranslate(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method shall translate and return the translate text for the language,screen and translate Id's specified by the languageId and screenId and translateId parameters.		
            </summary>	
            <param name="translationProvider">translation provider name; null to use default provider</param>		
            <param name="languageId">The Language in which the translate text is requested.</param>		
            <param name="screenId">The screen Id of the screen to which this translate item belongs to.</param>
            <param name="translateId">The Translate Id of the translate item requested.</param>		
            <returns>Returns the translate text for the language,screen and translate Id's specified by the languageId and screenId and translateId parameters.</returns>
            <example> <code>translateText = GetTranslate ( 1 , 717 , 2 ) ;</code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITranslationService.GetUIContainerInfo(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method shall retrieve the screen related information and return the same in the ContainerInfo members,NewRecordTitle,EditRecordTitle and AuditDescription in the language specified by the languageId parameter for the screen specified by the screenId parameter.		
            </summary>	
            <param name="translationProvider">translation provider name; null to use default provider</param>	
            <param name="languageId">The Language in which the screen information is requested.</param>			
            <param name="applicationId">The application Id.</param>		
            <param name="screenId">The screen Id of the screen.</param>
            <returns>Returns ContainerInfo Class. Extract the members as required. The IsInit public memeber decides whether the method succeeded.</returns>
            <example> <code>
            ContainerInfo formInfo  =  GetUIContainerInfo ( 1 , 1 , 717 );
            if (formInfo.IsInit)
            {
            	..do something using the other public members of formInfo.
            }
            </code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITranslationService.GetUIControlInfo(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method shall retrieve the screen object information and return the same in the ControlInfo class members Label,ProperName , StatusLine , ToolTip in the language specified by the languageId parameter for the object specified by the screenId and objectId parameters.		
            </summary>	
            <param name="languageId">The Language in which the screen object information is requested.</param>	
            <param name="translationProvider">translation provider name; null to use default provider</param>		
            <param name="applicationId">The application Id.</param>		
            <param name="screenId">The screen Id of the screen.</param>
            <param name="objectId">The object Id of the object.</param>		
            <returns>Returns ControlInfo Class. Extract the members as required. The IsInit public memeber decides whether the method succeeded.</returns>
            <example> <code>
            ControlInfo formObjectInfo  =  GetUIControlInfo ( 1 , 1 , 717, 2 );
            if (formObjectInfo.IsInit)
            {
            	..do something using the other public members of formObjectInfo.
            }
            </code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITranslationService.GetTokenizeMessage(System.String,System.Int32,System.Int32,System.String[])">
            <summary>
            This method shall translate and return the final message text with all the %[1-9]! replaced with the input string received from messageInput for the language and message specified by the languageId and messageId parameters.		
            </summary>	
            <param name="translationProvider">translation provider name; null to use default provider</param>		
            <param name="languageId">The Language in which the message text is requested.</param>		
            <param name="messageId">The Message Id of the message requested.</param>		
            <param name="messageInput">The string array of message input replaces the %!! in the actual message text.</param>
            <returns>Returns the message text for the language and message specified by the languageId and messageId parameters.</returns>
            <example> <code>	messageText = GetUserMessage ( 1 , 20 ) ;</code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITranslationService.GetTokenizeTranslate(System.String,System.Int32,System.Int32,System.Int32,System.String[])">
            <summary>
            This method shall translate and return the final translate text with all the %[1-9]! replaced by input string received from translateInput array for the language,screen and translate Id's specified by the languageId and screenId and translateId parameters.		
            </summary>	
            <param name="translationProvider">translation provider name; null to use default provider</param>		
            <param name="languageId">The Language in which the translate text is requested.</param>		
            <param name="screenId">The screen Id of the screen to which this translate item belongs to.</param>
            <param name="translateId">The Translate Id of the translate item requested.</param>		
            <param name="translateInput">The string array of translate input replaces the %!! in the actual translate text.</param>
            <returns>Returns the translate text for the language,screen and translate Id's specified by the languageId and screenId and translateId parameters.</returns>
            <example> <code>translateText = GetTranslate ( 1 , 717 , 2 ) ;</code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ITranslationService.GetListDecodeValue(System.String,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            This method shall translate and return the decode value in the language requested (targetLanguageId) given the value for the codeValue in the sourceLanguageId.		
            </summary>	
            <param name="translationProvider">translation provider name; null to use default provider</param>
            <param name="sourceLanguageId">The Language in which the codeValue parameter is being supplied.</param>
            <param name="targetLanguageId">The Language to which the codeValue parameter must be translated.</param>		
            <param name="listId">The List Id of the list to which the item specified in codeValue belongs to.</param>
            <param name="codeValue">The list item which is to be translated</param>
            <returns>Returns the decode value in the target language specified</returns>		
            <example> <code>decodeValueText = GetListDecodeValue ( 1, 2, 100 , "Active"); </code></example>
        </member>
        <member name="T:Phoenix.FrameWork.Core.ICheckVersion">
            <summary>
            Summary description for ICheckVersion
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ICheckVersion.ValidateVersion(Phoenix.FrameWork.Core.IDbHelper,System.String)">
            <summary>
            Validate the SW version and Database Verision of the system
            Throws exception 
            </summary>
            <param name="dbHelper"></param>
            <param name="exeName">Application name/Exe name</param>
            <returns>true if valid</returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.IManageableService">
            <summary>
            if the service is manageable by Start, stop operation
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IManageableService.BaseDirectory">
            <summary>
            Base directory of the service
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IManageableService.Start">
            <summary>
            Start the Listener
            </summary>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IManageableService.Stop">
            <summary>
            Stop Listener
            </summary>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IManageableService.GetStatus">
            <summary>
            Get the status of the Listener
            </summary>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.IListenerDomainManager">
            <summary>
            Workflow Listener Domain Manager
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IListenerDomainManager.Initialize(System.Boolean,System.String)">
            <summary>
            Initialize the Listener Service
            </summary>
            <param name="runningInserver"></param>
            <param name="BaseDirectory"></param>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.IListenerDomain">
            <summary>
            Listener Domain
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IListenerDomain.DomainName">
            <summary>
            Application Domain Name
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IListenerDomain.ReleaseGroupName">
            <summary>
            Release Group Name
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IListenerDomain.DbDefinitionName">
            <summary>
            Database Definition Name
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IListenerDomain.RunningInServer">
            <summary>
            Is the domain is invokded in Server or Client
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IListenerDomain.Initialize(System.Boolean,System.String)">
            <summary>
            Initialize the Listener Service
            </summary>
            <param name="runningInserver"></param>
            <param name="BaseDirectory"></param>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.LogPublisher">
            <summary>
            LogPublisher Implements ILogPublisher and is reponsible for logging entries to the debug log.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.LogPublisher.#ctor">
            <summary>
            Default Constructor that sets the logLevels to None.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.LogPublisher.#ctor(Phoenix.FrameWork.Core.LogLevel,Phoenix.FrameWork.Core.LogLevel)">
            <summary>
            Constructor that could be used to set the LogLevels for Info and Warnings.
            </summary>
            <param name="infoLevel">Level(None,Normal,Detailed,MoreDetailed of Information that needs to be logged.</param>
            <param name="warningLevel">Level(None,Normal,Detailed,MoreDetailed of Information that needs to be logged.</param>
        </member>
        <member name="P:Phoenix.FrameWork.Core.LogPublisher.InfoLevel">
            <summary>
            Implements ILogPublisher InfoLevel
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.LogPublisher.WarningLevel">
            <summary>
            Implements ILogPublisher WarningLevel
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.LogPublisher.DebugLevel">
            <summary>
            Implements ILogPublisher WarningLevel
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.LogPublisher.SqlLevel">
            <summary>
            Implements ILogPublisher WarningLevel
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.LogPublisher.IsLogEnabled">
            <summary>
            True if the Logging is enabled. IF false no log will be enabled
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.LogPublisher.DebugString">
            <summary>
            Get the debug string: This implementation doesn't support the DebugInfo
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.LogPublisher.FileName">
            <summary>
            Get/Set File name for the logger.  Not supported for this publishers
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.LogPublisher.LogInfo(System.String)">
            <summary>
            Log information 
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.LogPublisher.LogError(System.String)">
            <summary>
            Implements ILogPublisher LogError
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.LogPublisher.LogError(System.String,System.Boolean)">
            <summary>
            Implements ILogPublisher LogError
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.LogPublisher.LogWarning(System.String)">
            <summary>
            Implements ILogPublisher LogWarning
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.LogPublisher.LogDebug(System.String)">
            <summary>
            Implements ILogPublisher LogWarning
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.LogPublisher.LogSql(System.String)">
            <summary>
            Implements ILogPublisher LogWarning
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.LogPublisher.Initialize(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initialise the Logpublisher
            </summary>
            <param name="loggerName">Not Used</param>
            <param name="configFileName">Not Used</param>
            <param name="isLogInResponse">Used in server for sending the log information in response</param>
            <param name="isLogInFile">Not Used</param>
        </member>
        <member name="T:Phoenix.FrameWork.Core.PhoenixException">
            <summary>
            Summary description for PhoenixException.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.PhoenixException.XmlTag">
            <summary>
            XmlTag Which caused this 
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.PhoenixException.MLMessageId">
            <summary>
            Public property sets or gets ML Message ID. This would be used when we use a ML message to represent the exception text.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.PhoenixException.MLTranslateId">
            <summary>
            Public property sets or gets ML Trabslate ID. This would be used when we use a ML translate to represent the exception text.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.PhoenixException.MLScreenId">
            <summary>
            Public property sets or gets ML Screen Id. This would be used when we use a ML translate to represent the exception text.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.PhoenixException.MLErrorText">
            <summary>
            Public property sets or gets ML Error Text. This would be filled with the translated text in the required lanaguge.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.PhoenixException.MLErrorLevel">
            <summary>
            Public property sets or gets ML Error level , which could be either a Warning or an Error.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.PhoenixException.CodeErrorNumber">
            <summary>
            Public property sets or gets the Code Error Number. This would be used by the programmers to uniquely identify the code segment causing the error.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.PhoenixException.#ctor">
            <summary>
            Use this constructor to create a PhoeinxException object with No Message details  which can be used for throwing an exception.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.PhoenixException.#ctor(Phoenix.FrameWork.BusFrame.IFieldBase,System.Int32,System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="field"></param>
            <param name="mlMessageId"></param>
            <param name="mlErrorTokens"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.PhoenixException.#ctor(Phoenix.FrameWork.BusFrame.IFieldBase,System.Int32,System.Int32,System.String[])">
            <summary>
            Create Phoenix Exception
            </summary>
            <param name="field"></param>
            <param name="codeError"></param>
            <param name="mlMessageId"></param>
            <param name="mlErrorTokens"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.PhoenixException.#ctor(System.Int32,System.Int32)">
            <summary>
            Use this constructor to throw phoenix exception if you have message id.
            </summary>
            <param name="codeErrorNumber">Pass the programmer defined error number that identifies the code segment.</param>
            <param name="mlMessageId">The message id of the requested item.</param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.PhoenixException.#ctor(System.Int32,System.Int32,System.String[])">
            <summary>
            Use this when the Message Text contains parameters ({0}).
            </summary>
            <param name="codeErrorNumber">Pass the programmer defined error number that identifies the code segment.</param>
            <param name="mlMessageId">The message id of the requested item.</param>
            <param name="mlErrorTokens">The error tokens that replaces the token place holders %[1-9]! in the translate message text.</param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.PhoenixException.#ctor(System.Int32,System.Int32,Phoenix.FrameWork.Core.MLErrorLevel)">
            <summary>
            Use this constructor to throw phoenix exception with messageId, messageText and MLErrorLevel information.
            </summary>
            <param name="codeErrorNumber">Pass the programmer defined error number that identifies the code segment.</param>
            <param name="mlMessageId">The message id of the requested item.</param>
            <param name="mlErrorLevel">The error level, for instance Error, Warning etc.</param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.PhoenixException.#ctor(System.Int32,System.Int32,Phoenix.FrameWork.Core.MLErrorLevel,System.Exception)">
            <summary>
            Use this constructor to throw phoenix exception if you have message id.
            </summary>
            <param name="codeErrorNumber">Pass the programmer defined error number that identifies the code segment.</param>
            <param name="mlMessageId">The message id of the requested item.</param>
            <param name="innerException">Inner exception which created this </param>
            <param name="mlErrorLevel">ML Error Level</param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.PhoenixException.#ctor(System.Int32,System.Int32,System.Exception,System.String[])">
            <summary>
            Use this constructor to throw phoenix exception if you have message id.
            </summary>
            <param name="codeErrorNumber">Pass the programmer defined error number that identifies the code segment.</param>
            <param name="mlMessageId">The message id of the requested item.</param>
            <param name="innerException"></param>
            <param name="tokens"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.PhoenixException.#ctor(System.Int32,System.Int32,Phoenix.FrameWork.Core.MLErrorLevel,System.Exception,System.String[])">
            <summary>
            Use this constructor to throw phoenix exception with messageId, messageText and MLErrorLevel information.
            </summary>
            <param name="codeErrorNumber">Pass the programmer defined error number that identifies the code segment.</param>
            <param name="mlMessageId">The message id of the requested item.</param>
            <param name="mlErrorLevel">The error level, for instance Error, Warning etc.</param>
            <param name="innerException">Inner Exception</param>
            <param name="messageTokens">messageTokens</param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.PhoenixException.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serialize to XMl
            </summary>
            <param name="xw"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.PhoenixException.LoadFromNode(System.Xml.XmlNode)">
            <summary>
            Create new node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.PhoenixException.ToString">
            <summary>
            Customized ToString() method created for phoenix exception object.
            Gets the customized phoenix exception information with chained system exception details. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.TranslationService">
            <summary>
            Translation Service
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.TranslationService.BaseLanguageId">
            <summary>
            The base language Id. The MLService constructor will set this to English = 1 by default.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TranslationService.GetListItem(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            This method shall translate and return the list item text in the language requested (targetLanguageId) given the values for the item in the sourceLanguageId.		
            <seealso cref="M:Phoenix.FrameWork.Core.TranslationService.GetListItemX(System.Int32,System.String)"/>		
            </summary>
            <param name="sourceLanguageId">The Language in which the listItemText parameter is being supplied.</param>
            <param name="targetLanguageId">The Language to which the listItemText parameter must be translated.</param>		
            <param name="listId">The List Id of the list to which the item specified in listItemText belongs to.</param>
            <param name="listItemText">The list item which is to be translated</param>
            <returns>Returns the list item in the target language specified</returns>		
            <example> <code>listItemText = GetListItem ( 1, 2, 100 , "Active"); </code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TranslationService.GetListItemX(System.Int32,System.String)">
            <summary>
            This method shall translate and return the list item text in the base language (BaseLanguageId property) given the values for the item in English =1.
            </summary>		
            <param name="listId">The List Id of the list to which the item specified in listItemText belongs to.</param>		
            <param name="listItemText">The list item which is to be translated, this is in English = 1</param>
            <returns>Returns the list item in the Base Language specified</returns>
            <example> <code>listItemText = GetListItemX ( 1000, "Active") </code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TranslationService.GetList(System.Int32,System.Int32)">
            <summary>
            This method shall translate and return the entire list with the values separated by the '^' delimiter in the language specified by the languageId parameter.		
            <seealso cref="M:Phoenix.FrameWork.Core.TranslationService.GetListX(System.Int32)"/>
            </summary>
            <param name="languageId">The Language in which the list is requested.</param>		
            <param name="listId">The List Id of the list requested.</param>				
            <returns>Returns the entire list with the values separated by the '^' delimiter in the language specified by the languageId parameter</returns>
            <example> <code>listText = GetList ( 1 , 1000 ) ; </code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TranslationService.GetListX(System.Int32)">
            <summary>
            This method shall translate and return the entire list with the values separated by the '^' delimiter in the Base Language (BaseLanguageId property).		
            </summary>				
            <param name="listId">The List Id of the list requested.</param>				
            <returns>Returns the entire list with the values separated by the '^' delimiter in the Base Language (BaseLanguageId property).</returns>
            <example> <code>	listText = GetListX (1000 ) ;</code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TranslationService.GetUserMessage(System.Int32,System.Int32)">
            <summary>
            This method shall translate and return the message text for the language and message specified by the languageId and messageId parameters.		
            <seealso cref="M:Phoenix.FrameWork.Core.TranslationService.GetUserMessageX(System.Int32)"/>
            </summary>		
            <param name="languageId">The Language in which the message text is requested.</param>		
            <param name="messageId">The Message Id of the message requested.</param>		
            <returns>Returns the message text for the language and message specified by the languageId and messageId parameters.</returns>
            <example> <code>	messageText = GetUserMessage ( 1 , 20 ) ;</code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TranslationService.GetUserMessageX(System.Int32)">
            <summary>
            This method shall translate and return the message text in the Base Language (BaseLanguageId property) for the message specified by the messageId parameter.		
            </summary>						
            <param name="messageId">The Message Id of the message requested.</param>		
            <returns>Returns the message text in the Base Language (BaseLanguageId property).</returns>
            <example> <code>	messageText = GetUserMessageX ( 20 ) ;</code></example>		
        </member>
        <member name="M:Phoenix.FrameWork.Core.TranslationService.GetTranslate(System.Int32,System.Int32,System.Int32)">
            <summary>
            This method shall translate and return the translate text for the language,screen and translate Id's specified by the languageId and screenId and translateId parameters.		
            <seealso cref="M:Phoenix.FrameWork.Core.TranslationService.GetTranslateX(System.Int32,System.Int32)"/>
            </summary>		
            <param name="languageId">The Language in which the translate text is requested.</param>		
            <param name="screenId">The screen Id of the screen to which this translate item belongs to.</param>
            <param name="translateId">The Translate Id of the translate item requested.</param>		
            <returns>Returns the translate text for the language,screen and translate Id's specified by the languageId and screenId and translateId parameters.</returns>
            <example> <code>translateText = GetTranslate ( 1 , 717 , 2 ) ;</code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TranslationService.GetTranslateX(System.Int32,System.Int32)">
            <summary>
            This method shall translate and return the translate text in the Base Language (BaseLanguageId property) for the screen and translate Id's specified by the screenId and translateId parameters.		
            </summary>						
            <param name="screenId">The screen Id of the screen to which this translate item belongs to.</param>
            <param name="translateId">The Translate Id of the translate item requested.</param>		
            <returns>Returns the translate text in the Base Language (BaseLanguageId property) for the screen and translate Id's specified by the screenId and translateId parameters.</returns>
            <example> <code>translateText = GetTranslateX ( 717 , 2 ) ;</code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TranslationService.GetUIContainerInfo(System.Int32,System.Int32,System.Int32)">
            <summary>
            This method shall retrieve the screen related information and return the same in the ContainerInfo members,NewRecordTitle,EditRecordTitle and AuditDescription in the language specified by the languageId parameter for the screen specified by the screenId parameter.		
            </summary>	
            <param name="languageId">The Language in which the screen information is requested.</param>			
            <param name="applicationId">The application Id.</param>		
            <param name="screenId">The screen Id of the screen.</param>
            <returns>Returns ContainerInfo Class. Extract the members as required. The IsInit public memeber decides whether the method succeeded.</returns>
            <example> <code>
            ContainerInfo formInfo  =  GetUIContainerInfo ( 1 , 1 , 717 );
            if (formInfo.IsInit)
            {
            	..do something using the other public members of formInfo.
            }
            </code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TranslationService.GetUIControlInfo(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method shall retrieve the screen object information and return the same in the ControlInfo class members Label,ProperName , StatusLine , ToolTip in the language specified by the languageId parameter for the object specified by the screenId and objectId parameters.		
            </summary>	
            <param name="languageId">The Language in which the screen object information is requested.</param>	
            <param name="applicationId">The application Id.</param>		
            <param name="screenId">The screen Id of the screen.</param>
            <param name="objectId">The object Id of the object.</param>		
            <returns>Returns ControlInfo Class. Extract the members as required. The IsInit public memeber decides whether the method succeeded.</returns>
            <example> <code>
            ControlInfo formObjectInfo  =  GetUIControlInfo ( 1 , 1 , 717, 2 );
            if (formObjectInfo.IsInit)
            {
            	..do something using the other public members of formObjectInfo.
            }
            </code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TranslationService.GetTokenizeMessage(System.Int32,System.Int32,System.String[])">
            <summary>
            This method shall translate and return the final message text with all the %[1-9]! replaced with the input string received from messageInput for the language and message specified by the languageId and messageId parameters.		
            <seealso cref="M:Phoenix.FrameWork.Core.TranslationService.GetUserMessageX(System.Int32)"/>
            </summary>		
            <param name="languageId">The Language in which the message text is requested.</param>		
            <param name="messageId">The Message Id of the message requested.</param>		
            <param name="messageInput">The string array of message input replaces the %!! in the actual message text.</param>
            <returns>Returns the message text for the language and message specified by the languageId and messageId parameters.</returns>
            <example> <code>	messageText = GetUserMessage ( 1 , 20 ) ;</code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TranslationService.GetTokenizeMessageX(System.Int32,System.String[])">
            <summary>
            This method shall translate and return the fianl message text with all the %[1-9]! replaced with the input string received from messageInput in the Base Language (BaseLanguageId property) for the message specified by the messageId parameter.		
            </summary>						
            <param name="messageId">The Message Id of the message requested.</param>		
            <param name="messageInput">The string array of message input replaces the %!! in the actual message text.</param>
            <returns>Returns the message text in the Base Language (BaseLanguageId property).</returns>
            <example> <code>	messageText = GetUserMessageX ( 20 ) ;</code></example>		
        </member>
        <member name="M:Phoenix.FrameWork.Core.TranslationService.GetTokenizeTranslate(System.Int32,System.Int32,System.Int32,System.String[])">
            <summary>
            This method shall translate and return the final translate text with all the %[1-9]! replaced by input string received from translateInput array for the language,screen and translate Id's specified by the languageId and screenId and translateId parameters.		
            <seealso cref="M:Phoenix.FrameWork.Core.TranslationService.GetTranslateX(System.Int32,System.Int32)"/>
            </summary>		
            <param name="languageId">The Language in which the translate text is requested.</param>		
            <param name="screenId">The screen Id of the screen to which this translate item belongs to.</param>
            <param name="translateId">The Translate Id of the translate item requested.</param>		
            <param name="translateInput">The string array of translate input replaces the %!! in the actual translate text.</param>
            <returns>Returns the translate text for the language,screen and translate Id's specified by the languageId and screenId and translateId parameters.</returns>
            <example> <code>translateText = GetTranslate ( 1 , 717 , 2 ) ;</code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TranslationService.GetTokenizeTranslateX(System.Int32,System.Int32,System.String[])">
            <summary>
            This method shall translate and return the final translate text with all the %[1-9]! replaced by input string received from translateInput array in the Base Language (BaseLanguageId property) for the screen and translate Id's specified by the screenId and translateId parameters.		
            </summary>						
            <param name="screenId">The screen Id of the screen to which this translate item belongs to.</param>
            <param name="translateId">The Translate Id of the translate item requested.</param>
            <param name="translateInput">The string array of translate input replaces the %!! in the actual translate text.</param>		
            <returns>Returns the clean translate text in the Base Language (BaseLanguageId property) for the screen and translate Id's specified by the screenId and translateId parameters.</returns>
            <example> <code>translateText = GetTranslateX ( 717 , 2 ) ;</code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TranslationService.GetListDecodeValue(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            This method shall translate and return the decode value in the language requested (targetLanguageId) given the value for the codeValue in the sourceLanguageId.		
            </summary>
            <param name="sourceLanguageId">The Language in which the codeValue parameter is being supplied.</param>
            <param name="targetLanguageId">The Language to which the codeValue parameter must be translated.</param>		
            <param name="listId">The List Id of the list to which the item specified in codeValue belongs to.</param>
            <param name="codeValue">The list item which is to be translated</param>
            <returns>Returns the decode value in the target language specified</returns>		
            <example> <code>decodeValueText = GetListDecodeValue ( 1, 2, 100 , "Active"); </code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TranslationService.GetListDecodeValueX(System.Int32,System.String)">
            <summary>
            This method shall translate and return the decode value in the base language (BaseLanguageId property) given the value for codeValue in English =1.
            </summary>		
            <param name="listId">The List Id of the list to which the item specified in codeValue belongs to.</param>		
            <param name="codeValue">The list item which is to be translated, this is in English = 1</param>
            <returns>Returns the decode value in the Base Language specified</returns>
            <example> <code>decodeValueText = GetListItemX ( 1000, "Active") </code></example>
        </member>
        <member name="P:Phoenix.FrameWork.Core.TranslationService.Services">
            <summary>
            Get the list of services
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TranslationService.GetListItem(System.String,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            This method shall translate and return the list item text in the language requested (targetLanguageId) given the values for the item in the sourceLanguageId.		
            <seealso cref="M:Phoenix.FrameWork.Core.TranslationService.GetListItemX(System.Int32,System.String)"/>		
            </summary>	
            <param name="translationProvider">translation provider name; null to use default provider</param>
            <param name="sourceLanguageId">The Language in which the listItemText parameter is being supplied.</param>
            <param name="targetLanguageId">The Language to which the listItemText parameter must be translated.</param>		
            <param name="listId">The List Id of the list to which the item specified in listItemText belongs to.</param>
            <param name="listItemText">The list item which is to be translated</param>
            <returns>Returns the list item in the target language specified</returns>		
            <example> <code>listItemText = GetListItem ( 1, 2, 100 , "Active"); </code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TranslationService.GetList(System.String,System.Int32,System.Int32)">
            <summary>
            This method shall translate and return the entire list with the values separated by the '^' delimiter in the language specified by the languageId parameter.		
            <seealso cref="M:Phoenix.FrameWork.Core.TranslationService.GetListX(System.Int32)"/>
            </summary>	
            <param name="translationProvider">translation provider name; null to use default provider</param>
            <param name="languageId">The Language in which the list is requested.</param>		
            <param name="listId">The List Id of the list requested.</param>				
            <returns>Returns the entire list with the values separated by the '^' delimiter in the language specified by the languageId parameter</returns>
            <example> <code>listText = GetList ( 1 , 1000 ) ; </code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TranslationService.GetUserMessage(System.String,System.Int32,System.Int32)">
            <summary>
            This method shall translate and return the message text for the language and message specified by the languageId and messageId parameters.		
            <seealso cref="M:Phoenix.FrameWork.Core.TranslationService.GetUserMessageX(System.Int32)"/>
            </summary>	
            <param name="translationProvider">translation provider name; null to use default provider</param>		
            <param name="languageId">The Language in which the message text is requested.</param>		
            <param name="messageId">The Message Id of the message requested.</param>		
            <returns>Returns the message text for the language and message specified by the languageId and messageId parameters.</returns>
            <example> <code>	messageText = GetUserMessage ( 1 , 20 ) ;</code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TranslationService.GetTranslate(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method shall translate and return the translate text for the language,screen and translate Id's specified by the languageId and screenId and translateId parameters.		
            <seealso cref="M:Phoenix.FrameWork.Core.TranslationService.GetTranslateX(System.Int32,System.Int32)"/>
            </summary>	
            <param name="translationProvider">translation provider name; null to use default provider</param>		
            <param name="languageId">The Language in which the translate text is requested.</param>		
            <param name="screenId">The screen Id of the screen to which this translate item belongs to.</param>
            <param name="translateId">The Translate Id of the translate item requested.</param>		
            <returns>Returns the translate text for the language,screen and translate Id's specified by the languageId and screenId and translateId parameters.</returns>
            <example> <code>translateText = GetTranslate ( 1 , 717 , 2 ) ;</code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TranslationService.GetUIContainerInfo(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method shall retrieve the screen related information and return the same in the ContainerInfo members,NewRecordTitle,EditRecordTitle and AuditDescription in the language specified by the languageId parameter for the screen specified by the screenId parameter.		
            </summary>	
            <param name="translationProvider">translation provider name; null to use default provider</param>	
            <param name="languageId">The Language in which the screen information is requested.</param>			
            <param name="applicationId">The application Id.</param>		
            <param name="screenId">The screen Id of the screen.</param>
            <returns>Returns ContainerInfo Class. Extract the members as required. The IsInit public memeber decides whether the method succeeded.</returns>
            <example> <code>
            ContainerInfo formInfo  =  GetUIContainerInfo ( 1 , 1 , 717 );
            if (formInfo.IsInit)
            {
            	..do something using the other public members of formInfo.
            }
            </code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TranslationService.GetUIControlInfo(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method shall retrieve the screen object information and return the same in the ControlInfo class members Label,ProperName , StatusLine , ToolTip in the language specified by the languageId parameter for the object specified by the screenId and objectId parameters.		
            </summary>	
            <param name="translationProvider">translation provider name; null to use default provider</param>		
            <param name="languageId">The Language in which the screen object information is requested.</param>	
            <param name="applicationId">The application Id.</param>		
            <param name="screenId">The screen Id of the screen.</param>
            <param name="objectId">The object Id of the object.</param>		
            <returns>Returns ControlInfo Class. Extract the members as required. The IsInit public memeber decides whether the method succeeded.</returns>
            <example> <code>
            ControlInfo formObjectInfo  =  GetUIControlInfo ( 1 , 1 , 717, 2 );
            if (formObjectInfo.IsInit)
            {
            	..do something using the other public members of formObjectInfo.
            }
            </code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TranslationService.GetTokenizeMessage(System.String,System.Int32,System.Int32,System.String[])">
            <summary>
            This method shall translate and return the final message text with all the %[1-9]! replaced with the input string received from messageInput for the language and message specified by the languageId and messageId parameters.		
            <seealso cref="M:Phoenix.FrameWork.Core.TranslationService.GetUserMessageX(System.Int32)"/>
            </summary>	
            <param name="translationProvider">translation provider name; null to use default provider</param>		
            <param name="languageId">The Language in which the message text is requested.</param>		
            <param name="messageId">The Message Id of the message requested.</param>		
            <param name="messageInput">The string array of message input replaces the %!! in the actual message text.</param>
            <returns>Returns the message text for the language and message specified by the languageId and messageId parameters.</returns>
            <example> <code>	messageText = GetUserMessage ( 1 , 20 ) ;</code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TranslationService.GetTokenizeTranslate(System.String,System.Int32,System.Int32,System.Int32,System.String[])">
            <summary>
            This method shall translate and return the final translate text with all the %[1-9]! replaced by input string received from translateInput array for the language,screen and translate Id's specified by the languageId and screenId and translateId parameters.		
            <seealso cref="M:Phoenix.FrameWork.Core.TranslationService.GetTranslateX(System.Int32,System.Int32)"/>
            </summary>	
            <param name="translationProvider">translation provider name; null to use default provider</param>		
            <param name="languageId">The Language in which the translate text is requested.</param>		
            <param name="screenId">The screen Id of the screen to which this translate item belongs to.</param>
            <param name="translateId">The Translate Id of the translate item requested.</param>		
            <param name="translateInput">The string array of translate input replaces the %!! in the actual translate text.</param>
            <returns>Returns the translate text for the language,screen and translate Id's specified by the languageId and screenId and translateId parameters.</returns>
            <example> <code>translateText = GetTranslate ( 1 , 717 , 2 ) ;</code></example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TranslationService.GetListDecodeValue(System.String,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            This method shall translate and return the decode value in the language requested (targetLanguageId) given the value for the codeValue in the sourceLanguageId.		
            </summary>	
            <param name="translationProvider">translation provider name; null to use default provider</param>
            <param name="sourceLanguageId">The Language in which the codeValue parameter is being supplied.</param>
            <param name="targetLanguageId">The Language to which the codeValue parameter must be translated.</param>		
            <param name="listId">The List Id of the list to which the item specified in codeValue belongs to.</param>
            <param name="codeValue">The list item which is to be translated</param>
            <returns>Returns the decode value in the target language specified</returns>		
            <example> <code>decodeValueText = GetListDecodeValue ( 1, 2, 100 , "Active"); </code></example>
        </member>
        <member name="T:Phoenix.FrameWork.Core.ApplicationSvcProviders">
            <summary>
            Application Service Provider
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ApplicationSvcProviders.#ctor">
            <summary>
            Basic Constructor
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ApplicationSvcProviders.CommonProviders">
            <summary>
            Common Providers
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ApplicationSvcProviders.TranslationProvider">
            <summary>
            Translation Service Provider
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ApplicationSvcProviders.AuthenticationProviders">
            <summary>
            Authentication proviers
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ApplicationSvcProviders.BusObjectProviders">
            <summary>
            Business Object Providers
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ApplicationSvcProviders.LogProviders">
            <summary>
            Log Providers
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ApplicationSvcProviders.AuthorizationProviders">
            <summary>
            Authorization Providers
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.ApplicationSvcProviders.SerProviderFileName">
            <summary>
            Service Provider File Name {ServiceProviders.xml}
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ApplicationSvcProviders.Instance">
            <summary>
            Singleton Instance
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ApplicationSvcProviders.GetProvider(System.String,System.String)">
            <summary>
            Get Service Provider
            </summary>
            <param name="group"></param>
            <param name="elementName"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ApplicationSvcProviders.GetProvider(System.String)">
            <summary>
            GetProvider
            </summary>
            <param name="xPath"></param>
            <returns></returns>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ApplicationSvcProviders.ServiceProviderFilePath">
            <summary>
            GetFileName
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.ConfigCollection">
            <summary>
            Collection to store information
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ConfigCollection.#ctor">
            <summary>
            Basic constructor
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ConfigCollection.GetKeyForItem(Phoenix.FrameWork.Core.ConfigEntry)">
            <summary>
            Get the key for the item passed
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.ConfigEntry">
            <summary>
            Configuration Entry
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.ConfigEntry.#ctor">
            <summary>
            Simple Constuctor
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ConfigEntry.Key">
            <summary>
            Key of the value
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.ConfigEntry.Value">
            <summary>
            Value of the configuration element
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.AssemblyResolver">
            <summary>
            Summary description for AssemblyResolver.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.AssemblyResolver.SourceDir">
            <summary>
            Get/Sets the source Directory used for.
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.AssemblyVerifier">
            <summary>
            
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.AssemblyVerifier.StrongNameSignatureVerificationEx(System.String,System.Boolean,System.Boolean@)">
            <summary>
            Verifies whether the assemby is strong signed or not.
            </summary>
            <param name="wszFilePath"></param>
            <param name="fForceVerification"></param>
            <param name="pfWasVerified"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.AssemblyVerifier.VerifyAssemblyIsSigned(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Verifies whether as assembly is phoenix signed or not.If not , then it should be in the 'white list'
            else the system will throw an execption.
            </summary>
            <param name="assembly"></param>
            <param name="throwException"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.AssemblyVerifier.VerifyAssemblyIsSigned(System.Reflection.Assembly)">
            <summary>
            Verifies whether as assembly is phoenix signed or not.If not , then it should be in the 'white list'
            else the system will throw an execption.
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.AssemblyVerifier.PopulateNonPhoenixFileList(System.String,System.String)">
            <summary>
            Generates the list of files which are non-phoenix with their public keys, if applicable.
            </summary>
            <param name="dllsDirPath"></param>
            <param name="nonPhoenixFileListPath"></param>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.Utilities.Conversion">
            <summary>
            Summary description for Conversion.
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.Utilities.Conversion.DateTimeFmt">
            <summary>
            Universal DateTime format. 
            </summary>
            <remarks>
            Can be used in SQL.  The format used in yyyy-M-d H:m:s.fff
            </remarks>
        </member>
        <member name="F:Phoenix.FrameWork.Core.Utilities.Conversion.DateFmt">
            <summary>
            Universal Date Format. The format used is yyyy-M-d
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.Utilities.Conversion.DateTimeISOFmt">
            <summary>
            Date Time Format ISO
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.Conversion.DateTimeToString(System.DateTime)">
            <summary>
            Converts the DateTime value to string using the <see cref="F:Phoenix.FrameWork.Core.Utilities.Conversion.DateTimeFmt"/>
            </summary>
            <remarks>
            Uses <see cref="M:System.DateTime.ToString(System.String)"/> to convert the value.
            </remarks>
            <param name="dateTimeValue">datetime value to convert</param>
            <returns>string value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.Conversion.DateToString(System.DateTime)">
            <summary>
            Converts the Date value to string using the <see cref="F:Phoenix.FrameWork.Core.Utilities.Conversion.DateFmt"/> format.
            </summary>
            <remarks>
            Uses <see cref="M:System.DateTime.ToString(System.String)"/> to convert value. Any time infoarmation passed 
            will be ignored.
            </remarks>
            <param name="dateValue">Date value to converted</param>
            <returns>string date value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.Conversion.DateTimeToXmlString(System.DateTime)">
            <summary>
            Converts the Date value to string using <see cref="F:Phoenix.FrameWork.Core.Utilities.Conversion.DateTimeISOFmt"/>
            </summary>
            <param name="dateValue">Value to Convert</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.Conversion.StringXmlToDate(System.String)">
            <summary>
            Converts the string date value which is in the format <see cref="F:Phoenix.FrameWork.Core.Utilities.Conversion.DateFmt"/> to <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="dateValue">string date value</param>
            <returns><see cref="T:System.DateTime"/> value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.Conversion.StringToDate(System.String)">
            <summary>
            Converts the string date value which is in the format <see cref="F:Phoenix.FrameWork.Core.Utilities.Conversion.DateFmt"/> to <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="dateValue">string date value</param>
            <returns><see cref="T:System.DateTime"/> value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.Conversion.StringToDateTime(System.String)">
            <summary>
            Converts the string date value which is in the format <see cref="F:Phoenix.FrameWork.Core.Utilities.Conversion.DateTimeFmt"/> to <see cref="T:System.DateTime"/> value. 
            </summary>
            <param name="dateTimeValue">string date value</param>
            <returns><see cref="T:System.DateTime"/> value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.Conversion.ToBase64(System.String)">
            <summary>
            Returns the Base64 encoded string.
            </summary>
            <param name="input">string value to be base64 encoded/</param>
            <returns>Base64 encoded string</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.Conversion.FromBase64(System.String)">
            <summary>
            Decodes the base64 encodedd string to normal string
            </summary>
            <param name="input">Base64 encoded string</param>
            <returns>Decoded string</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.Conversion.ToBase64UrlSafe(System.String)">
            <summary>
            Encode the inputText in to base64 urlsafe. 
            </summary>
            <param name="inputText"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.Conversion.ToBase64UrlSafe(System.Byte[])">
            <summary>
            Encode the charArray in to base64 urlsafe. 
            </summary>
            <param name="charArray"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.Conversion.FromBase64UrlSafe(System.String)">
            <summary>
            Returns the  actual string encoded  using <see cref="M:Phoenix.FrameWork.Core.Utilities.Conversion.ToBase64UrlSafe(System.String)"/>
            </summary>
            <param name="inputText">Url Safe Base 64 Encoded test</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.Conversion.FromBase64UrlSafeBytes(System.String)">
            <summary>
            Returns the  actual string encoded  using <see cref="M:Phoenix.FrameWork.Core.Utilities.Conversion.ToBase64UrlSafe(System.String)"/>
            </summary>
            <param name="inputText">Url Safe Base 64 Encoded test</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.Conversion.CalcHMACSHABase64(System.String,System.String)">
            <summary>
            Calculate the hash HMACSHA256 and convert it to Base64 String
            </summary>
            <param name="secretKey"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.Utilities.FileXmlUtilities">
            <summary>
            FileXmlUtilities class privides the utility function for create objects from Xml and save xml from objects.
            </summary>
            <remarks>
            provides staic methods for easy access.
            </remarks>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.FileXmlUtilities.ObjectToFile(System.Object,System.String)">
            <summary>
            Serialze the object and store into the file.
            </summary>
            <param name="objToStore">Object to serialize into file</param>
            <param name="fileName">file name</param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.FileXmlUtilities.FileToObject(System.Type,System.String)">
            <summary>
            Reades the file and deserialze the information into one single object.
            </summary>
            <param name="objType">type of object needs to be deserialized</param>
            <param name="fileName">File name to deserialze from</param>
            <returns>Valid object of type passed if deserialization is success, otherwise null.</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.FileXmlUtilities.ObjectToString(System.Object)">
            <summary>
            serialize the object to string.
            </summary>
            <remarks>uses the <see cref="T:System.Xml.Serialization.XmlSerializer"/></remarks>
            <param name="toConvert">Object to serialize.</param>
            <returns>serialized string</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.FileXmlUtilities.StringToObject(System.Type,System.String)">
            <summary>
            Deserialize the string to object.
            </summary>
            <param name="objType">Type of the object to be deserialized.</param>
            <param name="input">string value of the serialized object</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.Utilities.GlobalObjects">
            <summary>
            Global Service class is the placeholder for storing variables passed acros objects,
            windows, etc.
            </summary>
            <remarks>
            This class is implemented as singleton.  The programmers is not allowed to create this object.
            The acces to the object is provided using <see cref="P:Phoenix.FrameWork.Core.Utilities.GlobalObjects.Instance"/>.
            </remarks>
        </member>
        <member name="P:Phoenix.FrameWork.Core.Utilities.GlobalObjects.Instance">
            <summary>
            Instance provides the access to the Singleton object.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.Utilities.GlobalObjects.InternalGlobalVars">
            <summary>
            InternalGlobalVars - Used by phoenix.client.host.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.Utilities.GlobalObjects.Item(System.String)">
            <summary>
            Provides an idexer to the stored collection.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.GlobalObjects.Remove(System.String)">
            <summary>
            Remove the object specified by the key.
            </summary>
            <param name="variableName">key value of the object.</param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.GlobalObjects.Clear">
            <summary>
            Cleats the collection.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.GlobalObjects.KeyExists(System.String)">
            <summary>
            Verify if the named Variable exists
            </summary>
            <param name="variableName">Name</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.GlobalObjects.GetStringValue(System.String)">
            <summary>
             Return String Value  from the Global Object Cache
            </summary>
            <param name="variableName"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.GlobalObjects.GetIntValue(System.String)">
            <summary>
             Return Int Value  from the Global Object Cache
            </summary>
            <param name="variableName"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.GlobalObjects.GetDateValue(System.String)">
            <summary>
            Return Date Value  from the Global Object Cache
            </summary>
            <param name="variableName"></param>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.Utilities.AdditionalAppDomain">
            <summary>
            Additional Appdomain
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.Utilities.AdditionalAppDomain.Instance">
            <summary>
            Application Instance
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.AdditionalAppDomain.Initialize(System.String)">
            <summary>
            
            </summary>
            <param name="friendlyName"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.AdditionalAppDomain.Initialize(System.String,System.AppDomainSetup)">
            <summary>
            Initialize the private domain
            </summary>
            <param name="friendlyName"></param>
            <param name="setup"></param>
        </member>
        <member name="T:Phoenix.FrameWork.Core.Utilities.ObjectFactory">
            <summary>
            Summary description for ObjectFactory.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.ObjectFactory.GetCryptoService">
            <summary>
            Get Crypto Service
            </summary>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.ObjectFactory.GetEnhancedCryptoService">
            <summary>
            Get Enhanced Crypto Service
            </summary>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.ObjectFactory.GetRjnCryptoService">
            <summary>
            Get Rjn Crypto Service
            </summary>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.ObjectFactory.LoadAssembly(System.String)">
            <summary>
            Finds and load assembly from the internal resource
            </summary>
            <param name="resKey">Resource Key to identify the assembly name</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.ObjectFactory.CreateObject(System.String)">
            <summary>
            Creates the object from Resource Look Up
            </summary>
            <param name="resKey">Object Name to lookup</param>
            <returns>Object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.ObjectFactory.CreateObject(System.Resources.ResourceManager,System.String)">
            <summary>
            Creates the object from Resource Look Up
            </summary>
            <param name="resMan">Resource Manager</param>
            <param name="objName">Object Name to lookup</param>
            <returns>Object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.ObjectFactory.Create(System.String)">
            <summary>
            Returns an object instantiated by the Activator, using fully-qualified combined assembly-type  supplied.
            "Microsoft.ApplicationBlocks.ConfigurationManagement.XmlFileStorage,   Microsoft.ApplicationBlocks.ConfigurationManagement, 
            		Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
            </summary>
            <param name="fullTypeName">the fully-qualified type name</param>
            <returns>instance of requested assembly/type typed as System.Object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.ObjectFactory.Create(System.String,System.String)">
            <summary>
            Returns an object instantiated by the Activator, using fully-qualified asm/type supplied.
            Assembly parameter example: "Microsoft.ApplicationBlocks.ConfigurationManagement, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
            Type parameter example: Microsoft.ApplicationBlocks.ConfigurationManagement.XmlFileStorage"
            </summary>
            <param name="assemblyName">fully-qualified assembly name</param>
            <param name="typeName">the type name</param>
            <returns>instance of requested assembly/type typed as System.Object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.ObjectFactory.Create(System.String,System.String,System.Object[])">
            <summary>
            Returns an object instantiated by the Activator, using fully-qualified asm/type supplied.
            Assembly parameter example: "Microsoft.ApplicationBlocks.ConfigurationManagement, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
            Type parameter example: Microsoft.ApplicationBlocks.ConfigurationManagement.XmlFileStorage"
            FULL TYPE NAME AS WRITTEN IN CONFIG IS: 
            "Microsoft.ApplicationBlocks.ConfigurationManagement.XmlFileStorage,   Microsoft.ApplicationBlocks.ConfigurationManagement, 
            		Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
            </summary>
            <param name="assemblyName">fully-qualified assembly name</param>
            <param name="typeName">the type name</param>
            <param name="constructorArguments">constructor arguments for type to be created</param>
            <returns>instance of requested assembly/type typed as System.Object</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.ObjectFactory.LoadAssemblyOnly(System.String)">
            <summary>
            Load Assembly
            </summary>
            <param name="asmName"></param>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.Utilities.PollingAgent">
            <summary>
            Polling Agent to retrieve envelopes status from Engine
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.PollingAgent.Initialize">
            <summary>
            Initializes the polling agent
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.Utilities.StringEx">
            <summary>
            Extended string. Provides simple utily functions.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.StringEx.Replicate(System.String,System.Int32)">
            <summary>
            Summary of Replicate.
            </summary>
            <param name="inputValue"></param>
            <param name="nTimes"></param>
            <returns></returns>	
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.StringEx.Reverse(System.String)">
            <summary>
            Summary of Reverse.
            </summary>
            <param name="strValue"></param>
            <returns></returns>	
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.StringEx.GetHashCode32(System.String)">
            <summary>
            GetHashCode for both 32 and 64 bit 
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper">
            <summary>
            XmlNodeHelper is a utility function which can be used to access the Xml node elements.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.#ctor">
            <summary>
            Simple Constructor
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetChildValueString(System.Xml.XmlNode,System.String)">
            <summary>
            Finds the child node of childName and returns the string value.
            </summary>
            <remarks>
            If child node is not found then throws an <see cref="T:Phoenix.FrameWork.Core.Utilities.XmlNodeNotFoundException"/>
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="childName">name of the child</param>
            <returns>string value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetChildValueShort(System.Xml.XmlNode,System.String)">
            <summary>
            Finds the child node of childName and returns the short value.
            </summary>
            <remarks>
            If child node is not found then throws an <see cref="T:Phoenix.FrameWork.Core.Utilities.XmlNodeNotFoundException"/>
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="childName">name of the child</param>
            <returns>short value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetChildValueInt(System.Xml.XmlNode,System.String)">
            <summary>
            Finds the child node of childName and returns the int value.
            </summary>
            <remarks>
            If child node is not found then throws an <see cref="T:Phoenix.FrameWork.Core.Utilities.XmlNodeNotFoundException"/>
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="childName">name of the child</param>
            <returns>int value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetChildValueLong(System.Xml.XmlNode,System.String)">
            <summary>
            Finds the child node of childName and returns the long value.
            </summary>
            <remarks>
            If child node is not found then throws an <see cref="T:Phoenix.FrameWork.Core.Utilities.XmlNodeNotFoundException"/>
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="childName">name of the child</param>
            <returns>long value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetChildValueByte(System.Xml.XmlNode,System.String)">
            <summary>
            Finds the child node of childName and returns the byte value.
            </summary>
            <remarks>
            If child node is not found then throws an <see cref="T:Phoenix.FrameWork.Core.Utilities.XmlNodeNotFoundException"/>
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="childName">name of the child</param>
            <returns>byte value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetChildValueChar(System.Xml.XmlNode,System.String)">
            <summary>
            Finds the child node of childName and returns the char value.
            </summary>
            <remarks>
            If child node is not found then throws an <see cref="T:Phoenix.FrameWork.Core.Utilities.XmlNodeNotFoundException"/>
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="childName">name of the child</param>
            <returns>char value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetChildValueDateTime(System.Xml.XmlNode,System.String)">
            <summary>
            Finds the child node of childName and returns the DateTime value.
            </summary>
            <remarks>
            If child node is not found then throws an <see cref="T:Phoenix.FrameWork.Core.Utilities.XmlNodeNotFoundException"/>
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="childName">name of the child</param>
            <returns>DateTime value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetChildValueDecimal(System.Xml.XmlNode,System.String)">
            <summary>
            Finds the child node of childName and returns the decimal value.
            </summary>
            <remarks>
            If child node is not found then throws an <see cref="T:Phoenix.FrameWork.Core.Utilities.XmlNodeNotFoundException"/>
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="childName">name of the child</param>
            <returns>decimal value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetChildValueDouble(System.Xml.XmlNode,System.String)">
            <summary>
            Finds the child node of childName and returns the double value.
            </summary>
            <remarks>
            If child node is not found then throws an <see cref="T:Phoenix.FrameWork.Core.Utilities.XmlNodeNotFoundException"/>
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="childName">name of the child</param>
            <returns>double value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetChildValueString(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Finds the child node of childName and returns the string value.
            </summary>
            <remarks>
            If child node is not found then returns default value.
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="childName">name of the child</param>
            <param name="defaultValue">default value to be used</param>
            <returns>string value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetChildValueShort(System.Xml.XmlNode,System.String,System.Int16)">
            <summary>
            Finds the child node of childName and returns the short value.
            </summary>
            <remarks>
            If child node is not found then returns default value.
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="childName">name of the child</param>
            <param name="defaultValue">default value to be used</param>
            <returns>short value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetChildValueInt(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Finds the child node of childName and returns the int value.
            </summary>
            <remarks>
            If child node is not found then returns default value.
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="childName">name of the child</param>
            <param name="defaultValue">default value to be used</param>
            <returns>int value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetChildValueLong(System.Xml.XmlNode,System.String,System.Int64)">
            <summary>
            Finds the child node of childName and returns the long value.
            </summary>
            <remarks>
            If child node is not found then returns default value.
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="childName">name of the child</param>
            <param name="defaultValue">default value to be used</param>
            <returns>long value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetChildValueByte(System.Xml.XmlNode,System.String,System.Byte)">
            <summary>
            Finds the child node of childName and returns the byte value.
            </summary>
            <remarks>
            If child node is not found then returns default value.
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="childName">name of the child</param>
            <param name="defaultValue">default value to be used</param>
            <returns>byte value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetChildValueChar(System.Xml.XmlNode,System.String,System.Char)">
            <summary>
            Finds the child node of childName and returns the char value.
            </summary>
            <remarks>
            If child node is not found then returns default value.
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="childName">name of the child</param>
            <param name="defaultValue">default value to be used</param>
            <returns>char value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetChildValueDateTime(System.Xml.XmlNode,System.String,System.DateTime)">
            <summary>
            Finds the child node of childName and returns the DateTime value.
            </summary>
            <remarks>
            If child node is not found then returns default value.
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="childName">name of the child</param>
            <param name="defaultValue">default value to be used</param>
            <returns>DateTime value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetChildValueDecimal(System.Xml.XmlNode,System.String,System.Decimal)">
            <summary>
            Finds the child node of childName and returns the decimal value.
            </summary>
            <remarks>
            If child node is not found then returns default value.
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="childName">name of the child</param>
            <param name="defaultValue">default value to be used</param>
            <returns>decimal value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetChildValueDouble(System.Xml.XmlNode,System.String,System.Double)">
            <summary>
            Finds the child node of childName and returns the double value.
            </summary>
            <remarks>
            If child node is not found then returns default value.
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="childName">name of the child</param>
            <param name="defaultValue">default value to be used</param>
            <returns>double value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetElementValueString(System.Xml.XmlNode)">
            <summary>
            Get the value out of the current <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="node">Xml node to get the value out</param>
            <returns>string value of the node</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetElementValueShort(System.Xml.XmlNode)">
            <summary>
            Get the value out of the current <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="node">Xml node to get the value out</param>
            <returns>short value of the node</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetElementValueInt(System.Xml.XmlNode)">
            <summary>
            Get the value out of the current <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="node">Xml node to get the value out</param>
            <returns>int value of the node</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetElementValueLong(System.Xml.XmlNode)">
            <summary>
            Get the value out of the current <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="node">Xml node to get the value out</param>
            <returns>long value of the node</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetElementValueByte(System.Xml.XmlNode)">
            <summary>
            Get the value out of the current <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="node">Xml node to get the value out</param>
            <returns>byte value of the node</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetElementValueChar(System.Xml.XmlNode)">
            <summary>
            Get the value out of the current <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="node">Xml node to get the value out</param>
            <returns>char value of the node</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetElementValueDateTime(System.Xml.XmlNode)">
            <summary>
            Get the value out of the current <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="node">Xml node to get the value out</param>
            <returns>DateTime value of the node</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetElementValueDecimal(System.Xml.XmlNode)">
            <summary>
            Get the value out of the current <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="node">Xml node to get the value out</param>
            <returns>decimal value of the node</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetElementValueDouble(System.Xml.XmlNode)">
            <summary>
            Get the value out of the current <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="node">Xml node to get the value out</param>
            <returns>double value of the node</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetElementValueShort(System.Xml.XmlNode,System.Int16)">
            <summary>
            Get the value out of the current <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <remarks>
            If node value is invalid then returns default value.
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="defaultValue">default value to be used</param>
            <returns>short value of the node</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetElementValueInt(System.Xml.XmlNode,System.Int32)">
            <summary>
            Get the value out of the current <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <remarks>
            If node value is invalid then returns default value.
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="defaultValue">default value to be used</param>
            <returns>int value of the node</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetElementValueLong(System.Xml.XmlNode,System.Int64)">
            <summary>
            Get the value out of the current <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <remarks>
            If node value is invalid then returns default value.
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="defaultValue">default value to be used</param>
            <returns>long value of the node</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetElementValueByte(System.Xml.XmlNode,System.Byte)">
            <summary>
            Get the value out of the current <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <remarks>
            If node value is invalid then returns default value.
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="defaultValue">default value to be used</param>
            <returns>byte value of the node</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetElementValueChar(System.Xml.XmlNode,System.Char)">
            <summary>
            Get the value out of the current <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <remarks>
            If node value is invalid then returns default value.
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="defaultValue">default value to be used</param>
            <returns>char value of the node</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetElementValueDateTime(System.Xml.XmlNode,System.DateTime)">
            <summary>
            Get the value out of the current <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <remarks>
            If node value is invalid then returns default value.
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="defaultValue">default value to be used</param>
            <returns>DateTime value of the node</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetElementValueDecimal(System.Xml.XmlNode,System.Decimal)">
            <summary>
            Get the value out of the current <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <remarks>
            If node value is invalid then returns default value.
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="defaultValue">default value to be used</param>
            <returns>decimal value of the node</returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeHelper.GetElementValueDouble(System.Xml.XmlNode,System.Double)">
            <summary>
            Get the value out of the current <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <remarks>
            If node value is invalid then returns default value.
            </remarks>
            <param name="node">Xml Node to be used</param>
            <param name="defaultValue">default value to be used</param>
            <returns>double value of the node</returns>
        </member>
        <member name="T:Phoenix.FrameWork.Core.Utilities.XmlNodeNotFoundException">
            <summary>
            Xml Node not found Exception
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.Utilities.XmlNodeNotFoundException.#ctor(System.String)">
            <summary>
            Create the node not found exception with node name
            </summary>
            <param name="nodeName"></param>
        </member>
        <member name="T:Phoenix.FrameWork.Core.IAuthSvcClient">
            <summary>
            Authenticaion Service Client implementation
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IAuthSvcClient.AuthenticateUser(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Authenticate the user and Gets the YserId
            </summary>
            <param name="appName"></param>
            <param name="userId"></param>
            <param name="password"></param>
            <param name="relGroup"></param>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IAuthSvcClient.VerifyUser(System.String,System.String)">
            <summary>
            Verifies the user Name and password
            </summary>
            <param name="userId"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IAuthSvcClient.RenewAuthToken(Phoenix.FrameWork.Core.IAuthenticationData)">
            <summary>
            Renew Authentication Token
            </summary>
            <param name="authData"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IAuthSvcClient.RenewAuthToken(System.String,Phoenix.FrameWork.Core.IAuthenticationData)">
            <summary>
            Renew
            </summary>
            <param name="wsvcsUrl"></param>
            <param name="authData"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IAuthSvcClient.ResetPassword(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Reset Password to match the Current UserName
            </summary>
            <param name="relGroup"></param>
            <param name="database"></param>
            <param name="appName"></param>
            <param name="superUserId"></param>
            <param name="superUserPwd"></param>
            <param name="resetUserName"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.IAuthSvcClient.ChangePassword(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Authenticate the user and Gets the YserId
            </summary>
            <param name="appName"></param>
            <param name="userId"></param>
            <param name="password"></param>
            <param name="relGroup"></param>
            <param name="database"></param>
            <param name="newPassword"></param>
            <returns></returns>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IAuthSvcClient.ResultInfo">
            <summary>
            Result from the last call
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.IAuthResult">
            <summary>
            Authentication Result;
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IAuthResult.EmployeeId">
            <summary>
            Authenticated Employee Id
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IAuthResult.LastLogonDt">
            <summary>
            Last Logon Date Time
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IAuthResult.FailedLogons">
            <summary>
            Number of failed Logons
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IAuthResult.FailedLogonLimit">
            <summary>
            Failed Logons Allowed
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IAuthResult.FailReason">
            <summary>
            Failed Reason
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IAuthResult.ErrorInfo">
            <summary>
            Error information
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IAuthResult.GraceLogonsAvailable">
            <summary>
            Grace Logins available
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.IAuthResult.Messages">
            <summary>
            Messages
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.PHashedArrayList">
            <summary>
            Phoenix Hasned Array List.  
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.PHashedArrayList.Count">
            <summary>
            Returns the number of elements in the Enum;
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.PHashedArrayList.HashCount">
            <summary>
            Get the Number of items in the Hashtable
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Core.PHashedArrayList.ListCount">
            <summary>
            Get the Number of items inthe List
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.PHashedArrayList.Remove(System.Object)">
            <summary>
            Remove the object Identified by the Tag
            </summary>
            <param name="tagName"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.PHashedArrayList.Add(System.Object,System.Object)">
            <summary>
            Add element to the Hash
            </summary>
            <param name="tagName"></param>
            <param name="objectToAdd"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.PHashedArrayList.ContainsKey(System.Object)">
            <summary>
            Check whether the key exists
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Phoenix.FrameWork.Core.PHashedArrayList.Item(System.Object)">
            <summary>
            Gets the Object iudentified by the key.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.PHashedArrayList.Reset">
            <summary>
            Reset the Collection
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.PHashedArrayList.GetEnumerator">
            <summary>
            Gets the enumerator;
            </summary>
            <returns></returns>
        </member>
        <member name="F:Phoenix.FrameWork.Core.RestCacheConstants.DefaultValueCache">
            <summary>
            DefaultValueCache
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.RestCacheConstants.BusGlobalVars">
            <summary>
            BusGlobalVars
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.RestCacheConstants.CoreServiceDbHelper">
            <summary>
            CoreServiceDbHelper
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.RestCacheConstants.CoreServiceIsInit">
            <summary>
            CoreServiceIsInit
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.RestCacheConstants.XmCurrentService">
            <summary>
            XmCurrentService
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.RestCacheConstants.GlobalObjects">
            <summary>
            GlobalObjects
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.RestCacheConstants.SetPropertiesIgnoreInvalidXmlTags">
            <summary>
            SetPropertiesIgnoreInvalidXmlTags
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.RestCacheConstants.SetPropertiesSerializeOtherInfo">
            <summary>
            SetPropertiesIgnoreInvalidXmlTags
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.RestCacheConstants.SetPropertiesSerializeObjectState">
            <summary>
            SetPropertiesSerializeObjectState
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.RestCacheConstants.SetPropertiesTruncateText">
            <summary>
            SetPropertiesTruncateText
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.RestCacheConstants.SetPropertiesDefineIsNull">
            <summary>
            SetPropertiesDefineIsNull
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.RestCacheConstants.SetPropertiesFullEndTag">
            <summary>
            SetPropertiesFullEndTag
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.RestCacheConstants.SetPropertiesSerializeUIProperties">
            <summary>
            SetPropertiesSerializeUIProperties
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.RestCacheConstants.SetPropertiesSerializeAuditKey">
            <summary>
            SetPropertiesSerializeAuditKey
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.RestCacheConstants.SetPropertiesArithIgnore">
            <summary>
            SetPropertiesArithIgnore
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.RestCacheConstants.GlobalVarsGlobalVars">
            <summary>
            GlobalVarsGlobalVars
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.RestCacheConstants.GlobalVarsSIsLangNeutralInitialized">
            <summary>
            GlobalVarsSIsLangNeutralInitialized
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.RestCacheConstants.GlobalVarsUserName">
            <summary>
            GlobalVarsUserName
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.RestCacheConstants.GlobalVarsEmplName">
            <summary>
            GlobalVarsEmplName
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.RestCacheConstants.GlobalVarsViewAudits">
            <summary>
            GlobalVarsViewAudits
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.Core.RestCacheConstants.GlobalVarsInstitutionType">
            <summary>
            GlobalVarsInstitutionType
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.TimedLock">
            <summary>
            Class provides a nice way of obtaining a lock that will time out 
            with a cleaner syntax than using the whole Monitor.TryEnter() method.
            </summary>
            <remarks>
            Adapted from Ian Griffiths article http://www.interact-sw.co.uk/iangblog/2004/03/23/locking 
            </remarks>
            <example>
            Instead of:
            <code>
            lock(obj)
            {
            	//Thread safe operation
            }
            
            do this:
            
            using(TimedLock.Lock(obj))
            {
            	//Thread safe operations
            }
            
            </code>
            </example>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TimedLock.Lock(System.Object)">
            <summary>
            Attempts to obtain a lock on the specified object for up 
            to 10 seconds.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TimedLock.Lock(System.Object,System.TimeSpan)">
            <summary>
            Attempts to obtain a lock on the specified object for up to 
            the specified timeout.
            </summary>
            <param name="o"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Core.TimedLock.Dispose">
            <summary>
            Disposes of this lock.
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Core.LockTimeoutException">
            <summary>
            Thrown when a lock times out.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.LockTimeoutException.#ctor">
            <summary>
            Creates a new <see cref="T:Phoenix.FrameWork.Core.LockTimeoutException"/> instance.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Core.LockTimeoutException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.LockTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.LockTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Core.LockTimeoutException.ToString">
            <summary>
            Returns a string representation of the exception.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.RecordStatus">
            <summary>
            Defined a values that indicate the record object status.
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.RecordStatus.None">
            <summary>
            Object is created but not initalized.
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.RecordStatus.Initialized">
            <summary>
            Initialized with field details
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.RecordStatus.LoadedXml">
            <summary>
            Field values are loaded from xml
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.RecordStatus.NeedParameter">
            <summary>
            This record can't be processed, because it needs additional parameters
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.RecordStatus.DataFetched">
            <summary>
            Data Fetched from the Database
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.RecordStatus.Success">
            <summary>
            Process was success
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.RecordStatus.Failure">
            <summary>
            Process action failed
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.XmActionType">
            <summary>
            Defines the list of Actions that can be performed on a Phoenix Business Object
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.XmActionType.None">
            <summary>
            No Action Defined
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.XmActionType.Delete">
            <summary>
            Delete the Record
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.XmActionType.New">
            <summary>
            Create a new record
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.XmActionType.Select">
            <summary>
            Select the data into the record
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.XmActionType.Update">
            <summary>
            Update the data specified in the record
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.XmActionType.EnumOnly">
            <summary>
            Enumerate Only
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.XmActionType.ListView">
            <summary>
            List the data relevent to this object
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.XmActionType.Default">
            <summary>
            Default the data based on the parameters.
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.XmActionType.Custom">
            <summary>
            Do a Custom Action defined in the object
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.FieldStatus">
            <summary>
            List of status a Field can have
            </summary>
            <remarks>
            The field status indicates status of last action.
            </remarks>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.FieldStatus.Initialized">
            <summary>
            Initialized
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.FieldStatus.AttribEdit">
            <summary>
            Individual Edit
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.FieldStatus.XmlLoad">
            <summary>
            Field was loaded from Xml
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.FieldStatus.DbFetch">
            <summary>
            Field was fetched from Database
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.XmEnumerationType">
            <summary>
            XmEnumeration type indicates the type of Enumeration Can be used in
            conjunction with XmActionType
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.XmEnumerationType.None">
            <summary>
            Nothing defined
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.XmEnumerationType.EnumAll">
            <summary>
            Enumerate All possible
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.XmEnumerationType.EnumSelective">
            <summary>
            Enumerate only the indicated fiedl
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.XmEnumerationType.EnumFKValues">
            <summary>
            Enumerate Foreign Key Values
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.DbConstraintType">
            <summary>
            Enumeration contains the list of supported constraint types.
            </summary>
            <remarks>
            A constraint list is a predefined list of element on which a data filed is based on.
            For example a Status field may be constrained by list of status such as 'Active', 'Closed', 'New'.
            </remarks>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.DbConstraintType.CodeMustExist">
            <summary>
            Code Value Must Exists int the Constraint List
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.DbConstraintType.CodeMayExist">
            <summary>
            It not necesary to have code value in the constraint list.
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.DbConstraintType.DescriptionMustExit">
            <summary>
            Description value must exist in the constraint list
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.DbConstraintType.DescriptionMayExist">
            <summary>
            Description value may exist in the list
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.DbIdentityType">
            <summary>
            Defins what type of identiy the data field is mapped to
            </summary>
            <remarks>
            In general the Identity columns in the tables are database Identity or
            identity  value generated from a table.
            </remarks>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.DbIdentityType.None">
            <summary>
            Not an Identity field
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.DbIdentityType.DbIdentity">
            <summary>
            Identity is provided from the database server
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.DbIdentityType.PCPtid">
            <summary>
            Identity is calculated from PC_PTID table.
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.IBusinessObject">
            <summary>
            Interface definition for Business Object
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusinessObject.Serialize(System.Xml.XmlWriter,Phoenix.FrameWork.BusFrame.IDependencyMap,Phoenix.FrameWork.BusFrame.IPhoenixSerializable[],System.String[],System.Boolean,System.Boolean)">
            <summary>
            Serialize Business Object
            </summary>
            <param name="xmlWriter"></param>
            <param name="dependsMap"></param>
            <param name="paramList"></param>
            <param name="enumList"></param>
            <param name="isResponse"></param>
            <param name="isDirtyOnly"></param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusinessObject.LoadFromXml(System.Xml.XmlNode,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Loads from the XmlNode
            </summary>
            <param name="xmlElement">Xml Node to load from</param>
            <param name="isClient">boolean value indicating Client/Server</param>
            <param name="isLoadEnumOnly">boolean indicating Load Enumeration only</param>
            <param name="validateObjectId">true if object id from xml need to be validated; false otherwise</param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusinessObject.LoadNodeToObject(System.Xml.XmlNode,System.Boolean,System.Boolean)">
            <summary>
            Load node to object
            </summary>
            <param name="xmlElement"></param>
            <param name="isLoadEnumOnly"></param>
            <param name="isClient"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusinessObject.LoadMessages(System.Xml.XmlNode)">
            <summary>
            Load Messages only,  into the object
            </summary>
            <param name="objNode">Xml Node representing the object</param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusinessObject.LoadObjectState(System.Xml.XmlNode)">
            <summary>
            Load object state identified by VIEW_STATE
            </summary>
            <param name="objNode">Xml Node representing the object</param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusinessObject.LoadOtherInfo(System.Xml.XmlNode)">
            <summary>
            Load OtherInfo identified by OTHER_INFO tag
            </summary>
            <param name="objNode">Xml Node representing the object</param>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IBusinessObject.ActionType">
             <summary>
            
             </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IBusinessObject.CustomActionName">
             <summary>
            
             </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IBusinessObject.TableName">
            <summary>
            Get the base table name of the object
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusinessObject.GetHashCode">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IBusinessObject.IdentityField">
            <summary>
            Identity Field
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IBusinessObject.AuditKey">
            <summary>
            Get/Set the Audit Key
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IBusinessObject.XmBatchReturnCode">
            <summary>
            XM Batch Return Code
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IBusinessObject.XmReturnCode">
            <summary>
            Xm Instance Return Code
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IBusinessObject.Messages">
            <summary>
            Messages
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IBusinessObject.DbObjects">
             <summary>
            
             </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IBusinessObject.SerializeValueAsAttribute">
            <summary>
            Get/Sets the use use Elements to serialize property.
            </summary>
            <remarks>
            If false the all childe node will be serialized with values in elements. otherwise in attributes
            </remarks>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IBusinessObject.SerializeObjectStateOnError">
            <summary>
            If true, the object state variables will be serailized even on error.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusinessObject.ResetFieldStatus(Phoenix.FrameWork.BusFrame.FieldStatus)">
            <summary>
            Reset all fields to the specified status
            </summary>
            <param name="newStatus"></param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusinessObject.ResetAllEnums(System.Boolean)">
            <summary>
            Reset the enumerable field outputs according to the boolean value passed
            </summary>
            <param name="isEnumOutput">value to set  property of the fields in the collection</param>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IBusinessObject.EnumType">
            <summary>
            Get/Sets Enumeration type property forthe XmAction
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusinessObject.GetIFieldBase(System.String)">
            <summary>
            Gets the field by the xmlTag name identified by xmlTag Name
            </summary>
            <param name="xmlTag">Xml Tag of the field; If null value is passed null will be returned</param>
            <returns><see cref="T:Phoenix.FrameWork.BusFrame.IFieldBase"/> object if the field exist;otherwise null</returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusinessObject.EnumValue(System.String)">
            <summary>
            Enumerate the constraint Values
            </summary>
            <param name="xmlTagName">XmlName to be used to get the data</param>
            <returns>ArrayList of <see cref="M:Phoenix.FrameWork.BusFrame.IBusinessObject.EnumValue(System.String)"/></returns>
            <exception>InvalidXmlTagException</exception>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IBusinessObject.DependencyMap">
            <summary>
            Get/Set the dependencyMap
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IBusinessObject.ParamNodes">
            <summary>
            Get/Sets paramNodes arraylist reference.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusinessObject.LoadFromObj(Phoenix.FrameWork.BusFrame.IBusinessObject)">
            <summary>
            Copies( Loads ) the object from source object
            NOTE: serialize the request Xml from the source object, and loads it to the current object
            </summary>
            <param name="sourceObj">Source Object to load from</param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusinessObject.LoadFromObj(Phoenix.FrameWork.BusFrame.IBusinessObject,System.Boolean)">
            <summary>
            Copies( Loads ) the object from source object
            </summary>
            <param name="sourceObj">Source Object to load from</param>
            <param name="useResponseXml">controls how the source object has to be serialized as xml.</param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusinessObject.DoAction(Phoenix.FrameWork.Core.IDbHelper)">
            <summary>
            Perform the action specified by the XmActionType
            </summary>
            <param name="dbHelper">DbHelper object</param>
            <returns><see cref="T:Phoenix.FrameWork.BusFrame.RecordStatus"/> for the action performed</returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusinessObject.CreateObject(System.Boolean)">
            <summary>
            Create a business object of the same type
            </summary>
            <param name="isServerObject">To indicate whether the created object is client or server</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusinessObject.NotifyPropertyChanged(Phoenix.FrameWork.BusFrame.IFieldBase)">
            <summary>
            Notify property changed
            </summary>
            <param name="field"></param>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IBusinessObject.AuditDescription">
            <summary>
            Audit Description
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IBusinessObject.AuditScreenId">
            <summary>
            Audit Screen Id
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusinessObject.SetAuditDef(Phoenix.FrameWork.Core.IDbHelper,System.Int32)">
            <summary>
            Function to set the Audit Definition
            </summary>
            <param name="dbHelper"></param>
            <param name="tableIndex"></param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusinessObject.SetFieldValue(System.String,System.Object)">
             <summary>
            
             </summary>
             <param name="XmlTag"></param>
             <param name="valueToset"></param>
             <returns>0 if failed, 1 if sucess,-1 if field not found</returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusinessObject.SetFieldValue(System.String,System.Object,Phoenix.FrameWork.BusFrame.EventBehavior)">
             <summary>
            
             </summary>
             <param name="xmlTag"></param>
             <param name="valueToSet"></param>
             <param name="behavior"></param>
             <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusinessObject.SetWorkflowKey(Phoenix.FrameWork.Core.IWfCDSExtension)">
            <summary>
            Set Workflow Key
            </summary>
            <param name="extension"></param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusinessObject.GetWorkflowKey">
            <summary>
            Get Workflow Keys
            </summary>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.IPhoenixSerializable">
            <summary>
            Summary description for IPhoenixSerializable.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IPhoenixSerializable.Serialize(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Serialize the Xml Object
            </summary>
            <param name="xmlWriter"></param>
            <param name="serializeValueAsAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IPhoenixSerializable.LoadFromXml(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Load the current object from XmlNode
            </summary>
            <param name="node"></param>
            <param name="valueSerializedAsAttribute"></param>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.IFieldBase">
            <summary>
            Interface Definition for Field Base
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IFieldBase.Container">
             <summary>
            
             </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IFieldBase.Value">
            <summary>
            Returns the Value Object:
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IFieldBase.ValueObject">
             <summary>
            
             </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IFieldBase.IsTableHasMap(System.Int32)">
             <summary>
             Verify the table id has a map.
             </summary>
            
             <param name="tableId">Table Id.</param>
             <returns>Returns true if the table has map in this field.</returns>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IFieldBase.IdentityType">
            <summary>
            Get/sets  the Identity type of the field if the field is Identity
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IFieldBase.IsEnumerable">
            <summary>
            Gets the Enumerable property of the field.  True if the field contains a constraint.
            </summary>
            <remarks>
            A field is considered enumerable only when it has a  attached to it.
            </remarks>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IFieldBase.IsEnumOutput">
            <summary>
            Gets/Sets the property to indicate the XM to enumerate output.
            </summary>
            <remarks>
            A field is enumerable only when it has a constraint attached to it.
            </remarks>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IFieldBase.IsEnumCacheable">
            <summary>
            Get whether  the enumrated values are cacheable
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IFieldBase.GetTableName(System.Boolean)">
            <summary>
            Get the database table name for which this field is mapped.
            </summary>
            <remarks>
            If a field has more than one table+column mapped then the default table name is
            returned.
            </remarks>
            <param name="usePrimDb">true if the Primary Db has to be used; false otherwise</param>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IFieldBase.Constraint">
             <summary>
            
             </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IFieldBase.EnumValues">
            <summary>
            Enumerated Values of the Array.
            </summary>
            <remarks>
            Throws exception if the field <see cref="P:Phoenix.FrameWork.BusFrame.IFieldBase.IsEnumerable"/> is false.
            </remarks>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IFieldBase.NotifyPropertyChanged(System.String)">
            <summary>
            Send property change notification
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IFieldBase.StringValue">
            <summary>
            String Value
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IFieldBase.SqlString">
            <summary>
            Sql String Value
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IFieldBase.GetAuditSql(Phoenix.FrameWork.Core.IDbHelper,System.Boolean,System.Int32)">
            <summary>
            Get Audit SQL
            </summary>
            <param name="dbHelper"></param>
            <param name="isPrimDb"></param>
            <param name="tableId"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IFieldBase.SetValue(System.Object,Phoenix.FrameWork.BusFrame.EventBehavior)">
            <summary>
            Set Field Value
            </summary>
            <param name="valueToSet"></param>
            <param name="behavior"></param>
            <returns></returns>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IFieldBase.SkipAudit">
            <summary>
            Get/Set fields property so that the property can be excluded from being audited. Default to false if not set
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IFieldBase.AuditColumnName">
            <summary>
            Set to override the fieldname for the audits
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.EventBehavior">
            <summary>
            Enumeration to control set value behavior
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.EventBehavior.Default">
            <summary>
            Default behavior, fires the Value Changed event only when
            the current value is different than the previous value
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.EventBehavior.Force">
            <summary>
            Force the value behavior irrespective of new and previous value
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.EventBehavior.None">
            <summary>
            treat as not change change
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.IDbObject">
             <summary>
            
             </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IDbObject.PrimaryName">
            <summary>
            Gets the  Table Name or Stored Procedure name in the Primary Database
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IDbObject.SecondaryName">
            <summary>
            Gets the Table Name or Stored Procedure name in the Primary Database
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IDbObject.IsStoreProc">
            <summary>
            Gets the bool value of the property IsStoreProc.
            </summary>
            <remarks>
            The value will be true if the object is StoreProc, flase if it is a table.
            </remarks>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.IDbObjectCollection">
            <summary>
            Field Collections
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IDbObjectCollection.Add(Phoenix.FrameWork.BusFrame.IDbObject)">
            <summary>
            Add the DbObject
            </summary>
            <param name="dbObject">Object to Add</param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IDbObjectCollection.Add(System.String)">
            <summary>
            Adds a new Table object to the collection
            </summary>
            <param name="primaryTableName"></param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IDbObjectCollection.Add(System.String,System.String)">
            <summary>
            Adds a new Table object to the collection
            </summary>
            <param name="primTableName"></param>
            <param name="secondaryTableName"></param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IDbObjectCollection.Add(System.String,System.String,System.Boolean)">
            <summary>
            Add a new Table/Stored Proc Object to collection Object
            </summary>
            <param name="primObjectName"></param>
            <param name="secondaryObjectName"></param>
            <param name="isStoreProc"></param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IDbObjectCollection.GetIndex(System.String)">
            <summary>
            Get the index of the Object
            </summary>
            <param name="objectName"></param>
            <returns></returns>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IDbObjectCollection.HasStoredProcMap">
            <summary>
            True if the object has stored procedure mapping
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IDbObjectCollection.Count">
            <summary>
            Returns the count in the collection
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IDbObjectCollection.TableName(System.Int32,System.Boolean)">
            <summary>
            Get the Table Name from
            </summary>
            <param name="index">table index stats from 0.</param>
            <param name="isPrimaryDb"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IDbObjectCollection.TableAlias(System.Int32)">
             <summary>
            
             </summary>
             <param name="index"></param>
             <returns></returns>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IDbObjectCollection.Item(System.Int32)">
            <summary>
            Indexer to get the DbObject
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.IDependencyMap">
            <summary>
            Interface Definition for Dependency Map
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IDependencyMap.AddDependency(Phoenix.FrameWork.BusFrame.IFieldBase,Phoenix.FrameWork.BusFrame.IFieldBase)">
            <summary>
            Create new dependency
            </summary>
            <param name="parentField"></param>
            <param name="childField"></param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IDependencyMap.AddDependency(Phoenix.FrameWork.BusFrame.IBusinessObject,Phoenix.FrameWork.BusFrame.IFieldBase,Phoenix.FrameWork.BusFrame.IBusinessObject,Phoenix.FrameWork.BusFrame.IFieldBase)">
            <summary>
            Create a new dependency
            </summary>
            <param name="parent"></param>
            <param name="parentField"></param>
            <param name="child"></param>
            <param name="childField"></param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IDependencyMap.HasDefaultFrom(System.Int32)">
            <summary>
            Check whether the form has defaults
            </summary>
            <param name="objId"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IDependencyMap.HasDefaultAs(System.Int32)">
            <summary>
            Verifies whether the object is participating in a DefaultAs request Xml.
            </summary>
            <param name="objId">Object hash code</param>
            <returns>True if the object is associated to a Default As</returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IDependencyMap.GetDefaultAs(System.Int32,Phoenix.FrameWork.BusFrame.IFieldBase)">
            <summary>
            Get the defaultAs Name
            </summary>
            <param name="objId"></param>
            <param name="field">Field name to ge the DefaultAs</param>
            <returns>null if no DefaultAs found, else a string value</returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IDependencyMap.GetDefaultFrom(System.Int32,Phoenix.FrameWork.BusFrame.IFieldBase)">
            <summary>
            Get the defaultFrom name
            </summary>
            <param name="objId">Object Hash Code</param>
            <param name="field">Field to look for default from name</param>
            <returns>null if no defaultFrom found, else a string value</returns>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.IPhoenixDataType">
            <summary>
            Interface to defines the IntoValues
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IPhoenixDataType.SetValue(System.Object)">
            <summary>
            Set the Value property of the object
            </summary>
            <param name="value">Value of the object</param>
            <returns>True if success;false otherwise</returns>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IPhoenixDataType.IsNull">
            <summary>
            Get the Nullable property
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IPhoenixDataType.XmlTag">
            <summary>
            Get/Sets the Xml Tag for the property
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IPhoenixDataType.Length">
            <summary>
            Get/Sets the maxLength for the property
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.IConstraint">
            <summary>
            Interface Definition for Constraint
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IConstraint.ListId">
            <summary>
            Gets/Sets the Static List Id of the constraint. Use ML and load the constraints.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IConstraint.Is24x7Supported">
            <summary>
            Set the 24x7 support for the constraint
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IConstraint.EnumValues">
            <summary>
            Gets the <see cref="T:System.Collections.ArrayList"/> of EnumValues for this constraint.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IConstraint.IsNullable">
            <summary>
            Gets/Sets the information about whether the constraint is nullable or not.
            </summary>
            <remarks>
            When this value is true, then a CodeValue of -1, and Description of --Null-- will be added to the constraint.
            </remarks>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IConstraint.IsCacheable">
            <summary>
            Get the property value for Caching. True indicates the enumerated value is cacheable for later use.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IConstraint.Populate(Phoenix.FrameWork.Core.IDbHelper,System.Boolean,System.Boolean)">
            <summary>
            Populates the Constraint using dbHelper
            </summary>
            <param name="dbHelper">Database helper for the connection</param>
            <param name="resetFlag">True if you want to repopulate the constraint;</param>
            <param name="usePrimaryDb">True to use primary database</param>
            <returns>Returns true if success; otherwise false.</returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IConstraint.Populate(Phoenix.FrameWork.Core.IDbHelper,System.String,System.Boolean,System.Boolean)">
             <summary>
            
             </summary>
             <param name="dbHelper">Database helper for the connection</param>
             <param name="additionalWhere">Additional where to be used</param>
             <param name="resetFlag">True if you want to repopulate the constraint;</param>
             <param name="usePrimary">True  to use primary</param>
             <returns>Returns true if success; otherwise false.</returns>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IConstraint.IsPopulated">
            <summary>
            True if the constraint is populated; otherwise false
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IConstraint.Values">
            <summary>
            Get the Enumration Value Collection
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IConstraint.GetEnumValue(Phoenix.FrameWork.Core.IDbHelper,System.String,System.Boolean,System.Boolean,System.Object)">
             <summary>
            
             </summary>
             <param name="dbHelper">Database helper for the connection</param>
             <param name="additionalWhere">Additional where to be used</param>
             <param name="resetFlag">True if you want to repopulate the constraint;</param>
             <param name="usePrimary">True  to use primary</param>
             <param name="valueToGet">Value to get</param>
             <returns>Returns true if success; otherwise false.</returns>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IConstraint.ConstraintType">
            <summary>
            Gets/Sets the <see cref="T:Phoenix.FrameWork.BusFrame.DbConstraintType"/> type of the constraint.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IConstraint.IsStaticList">
            <summary>
            Returns true if the Constrains is populated using <see cref="P:Phoenix.FrameWork.BusFrame.IConstraint.ListId"/>.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IConstraint.SpecialSql">
            <summary>
            Sets the special Sql for the constraint.
            </summary>
            <remarks>
            useful for the user enhancd sql to be used for Populating the constraint.
            </remarks>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IConstraint.ExtraWhere">
            <summary>
            Gets/Sets the additional Where clause to use in the SQL build.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IConstraint.IsActiveOnly">
            <summary>
            Sets or Gets the information for the constraint to include Active elements only.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IConstraint.IsEffectiveDated">
            <summary>
            Gets/Sets the information about whether the constraint is Effective dated.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IConstraint.SetFieldStatus(System.Object,Phoenix.Windows.Forms.VisibilityState,Phoenix.Windows.Forms.EnableState)">
            <summary>
            Set enum status of the enumeration
            </summary>
            <param name="codeValue"></param>
            <param name="visible"></param>
            <param name="enabled"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IConstraint.Reset(System.Boolean)">
            <summary>
            Reset the enum value collection
            </summary>
            <param name="userAddedOnly">true to reset only the fields added by the programmer</param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IConstraint.AddKey(System.Object,System.String)">
            <summary>
            Adds a enum value to the collection
            </summary>
            <param name="codeValue">code value for the enum List</param>
            <param name="description">description value for the enum List</param>
            <returns>returns <see cref="T:System.Int32">index</see> value in the internal collection. </returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IConstraint.AddKey(System.Object,System.String,System.Boolean)">
            <summary>
            Adds the object in to collection
            </summary>
            <param name="codeValue">code value for the enum List</param>
            <param name="description">description value for the enum List</param>
            <param name="addBeforeNone">flag to indicate whether to add the entry before the 'None'entry</param>
            <returns>returns <see cref="T:System.Int32">index</see> value in the internal collection. </returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IConstraint.LoadFromStaticList(System.String,System.Boolean)">
            <summary>
            Load the collectin from ^ seperated string
            </summary>
            <param name="listValue"></param>
            <param name="isCodedList"></param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IConstraint.LoadFromStaticList(System.Int32,System.Boolean)">
            <summary>
            Load the enumeration from ML Translatin Id
            </summary>
            <param name="listValue"></param>
            <param name="isCodedList"></param>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.IEnumValue">
             <summary>
            
             </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IEnumValue.CodeValue">
            <summary>
            Gets the code value <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IEnumValue.Description">
            <summary>
            Gets the description value <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IEnumValue.CombinedValue">
            <summary>
            Gets the concatenated value of <see cref="P:Phoenix.FrameWork.BusFrame.IEnumValue.CodeValue"/> and <see cref="P:Phoenix.FrameWork.BusFrame.IEnumValue.Description"/>
            </summary>
            <remarks>
            The code value  and description value is concatenated using " - ".
            </remarks>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.IEnumValueCollection">
             <summary>
            
             </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IEnumValueCollection.GetKeyIndex(System.Object)">
            <summary>
            Returns the zero-based index of the first occurrence of a value <see cref="P:Phoenix.FrameWork.BusFrame.IEnumValue.CodeValue">codeValue</see>
            </summary>
            <param name="codeValue">code value to be searched for</param>
            <returns>The zero-based index of the first occurrence of value within the entire collection, if found; otherwise, -1. </returns>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IEnumValueCollection.Descriptions">
            <summary>
            Gets the <see cref="T:System.Collections.ArrayList"/> of description <see cref="T:System.String"/> value.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IEnumValueCollection.GetDescriptionIndex(System.String)">
            <summary>
            Returns the zero-based index of the first occurrence of a value <see cref="P:Phoenix.FrameWork.BusFrame.IEnumValue.Description"/>
            </summary>
            <param name="description">Description value to be searched for</param>
            <returns>The zero-based index of the first occurrence of value within the entire collection, if found; otherwise, -1. </returns>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.IStatusSortHelper">
            <summary>
            Status Sort Helper
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IStatusSortHelper.ConvertStatusSort(System.String)">
            <summary>
            Returns the Status Sort Equivalent for the status passed
            </summary>
            <param name="statusSort"></param>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.IBusframeExtension">
            <summary>
            Interface defining AccountInfo service
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusframeExtension.ValidateBackDatedEffectiveDt(Phoenix.FrameWork.BusFrame.IFieldBase,Phoenix.FrameWork.Core.IDbHelper)">
            <summary>
            Validate Backdated Effective Date
            </summary>
            <param name="field">Effective Date field</param>
            <param name="dbHelper">dbHelper to use for database operations</param>
            <returns>return null if valid; otherwise a valid error message</returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusframeExtension.ReformatAcctNo(System.String,System.String,System.String)">
            <summary>
            Reformat the account number.
            Removes the non alphanumeric chars and reformats the account
            NOTE: must pass either acctType or applType
            </summary>
            <param name="acctNo">Account number to be formatted</param>
            <param name="acctType">acctType if available</param>
            <param name="applType">applType if available</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusframeExtension.GetAlwaysUsePrimaryDb(Phoenix.FrameWork.Core.IDbHelper,Phoenix.FrameWork.BusFrame.IBusinessObject)">
             <summary>
            
             </summary>
             <param name="dbHelper"></param>
             <param name="businessObject"></param>
             <returns></returns>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IBusframeExtension.AuditProvider">
            <summary>
            Audit Store Provider
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusframeExtension.Initialize(Phoenix.FrameWork.BusFrame.IBusinessObject)">
            <summary>
            Initialize the extension
            </summary>
            <param name="parentObject"></param>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IBusframeExtension.Parent">
            <summary>
            Get the parent object
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IBusframeExtension.InteractiveMessages">
            <summary>
            Interactive Message
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.IInteractiveMessages">
            <summary>
            Interactive messages
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IInteractiveMessages.GetUserResponse(System.Int32,Phoenix.Windows.Forms.MessageType,Phoenix.Windows.Forms.PMessageBoxButtons,Phoenix.Windows.Forms.PMessageBoxDefaultButton,Phoenix.Windows.Forms.PDialogResult,Phoenix.FrameWork.BusFrame.IFieldBase,System.String[])">
            <summary>
            Get User Response
            </summary>
            <param name="mlMessageId"></param>
            <param name="messageType"></param>
            <param name="messageButtons"></param>
            <param name="defaultButton"></param>
            <param name="quitOnResponse"></param>
            <param name="field"></param>
            <param name="messageTokens"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IInteractiveMessages.SerializeToXML(System.Int32@)">
            <summary>
            Serialize to xml
            </summary>
            <param name="pendingResponseCount"></param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IInteractiveMessages.LoadFromXML(System.Int32@)">
            <summary>
            Load from XML 
            </summary>
            <param name="pendingResponseCount"></param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IInteractiveMessages.Show(Phoenix.Windows.Forms.IFormExtensionBase,System.Int32@,System.Boolean@)">
            <summary>
            Show message
            </summary>
            <param name="formExtension"></param>
            <param name="responseCollectedCount"></param>
            <param name="quitProcessing"></param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IInteractiveMessages.Reset">
            <summary>
            Reset message
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.IAuditStoreProvider">
            <summary>
            Audit Store Provider
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IAuditStoreProvider.AcctNo">
            <summary>
            Account Number
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IAuditStoreProvider.AcctType">
            <summary>
            Account Type
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IAuditStoreProvider.ScreenPtid">
            <summary>
            Screen Identifier for the record
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IAuditStoreProvider.TablePtid">
            <summary>
            Record Identifie
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IAuditStoreProvider.AddAuditInfo(Phoenix.FrameWork.BusFrame.IFieldBase)">
            <summary>
            Collection to add audits
            </summary>
            <param name="field"></param>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IAuditStoreProvider.ApplCode">
            <summary>
            Application Code
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IAuditStoreProvider.CreateAuditEntry(Phoenix.FrameWork.Core.IDbHelper,System.Boolean)">
             <summary>
            
             </summary>
             <param name="dbHelper"></param>
             <param name="isPrimaryDb"></param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IAuditStoreProvider.CreateAuditEntry(Phoenix.FrameWork.Core.IDbHelper,System.Decimal,System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
            
             </summary>
             <param name="dbHelper"></param>
             <param name="tablePtid"></param>
             <param name="tableName"></param>
             <param name="columnName"></param>
             <param name="prevValue"></param>
             <param name="newValue"></param>
             <param name="actualPrevValue"></param>
             <param name="actualNewValue"></param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IAuditStoreProvider.CreateAuditEntry(Phoenix.FrameWork.Core.IDbHelper,System.Int32,System.String,System.Boolean,System.Int32,System.String,System.Int32,System.Decimal,System.Decimal,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
            
             </summary>
             <param name="dbHelper"></param>
             <param name="branchNo"></param>
             <param name="applCode"></param>
             <param name="isNew"></param>
             <param name="emplId"></param>
             <param name="auditDescription"></param>
             <param name="screenId"></param>
             <param name="screenPtid"></param>
             <param name="tablePtid"></param>
             <param name="tableName"></param>
             <param name="acctNo"></param>
             <param name="acctType"></param>
             <param name="columnName"></param>
             <param name="prevValue"></param>
             <param name="newValue"></param>
             <param name="actualPrevValue"></param>
             <param name="actualNewValue"></param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IAuditStoreProvider.CreateAuditEntry(Phoenix.FrameWork.Core.IDbHelper,System.String,System.String,System.String,System.String,System.String)">
             <summary>
            
             </summary>
             <param name="dbHelper"></param>
             <param name="columnName"></param>
             <param name="prevValue"></param>
             <param name="newValue"></param>
             <param name="actualPrevValue"></param>
             <param name="actualNewValue"></param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IAuditStoreProvider.DefaultAuditInfo">
             <summary>
            
             </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IAuditStoreProvider.IsNew">
             <summary>
            
             </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IAuditStoreProvider.StoreProcCmdStart">
             <summary>
            
             </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IAuditStoreProvider.Parent">
            <summary>
            Parent Business object
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.IBusObjectHelper">
            <summary>
            Business Object Helper
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IBusObjectHelper.GetBusinessObject(System.String,System.Boolean)">
            <summary>
            Return a business obeject based on the reskKey
            </summary>
            <param name="resKey"></param>
            <param name="isServer"></param>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.ISwaggerDocument">
            <summary>
            Swagger Document specific
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.ISwaggerDocument.Description">
            <summary>
            Description of the Object in Swagger.Info
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.ISwaggerDocument.Title">
            <summary>
            Tile information displayed in Swagger.Info
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.ISwaggerDocument.MenuText">
            <summary>
            Menu Text as displayed in Swagger Menu
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.ISwaggerDocument.GetPaths(System.Boolean,System.String)">
            <summary>
            Gets the list of Swagger operationss supported vis REST
            </summary>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.IOpenApiBOExt">
            <summary>
            REST Extension For Business Objects
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IOpenApiBOExt.CreateJsonResponse">
            <summary>
            Flag to indicate whether to create response as Json
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IOpenApiBOExt.RestController">
            <summary>
            Pointer to Controller in Rest API
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IOpenApiBOExt.AddEncIdToResponse">
            <summary>
            Flag to indicate whether to add encId to Json response
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IOpenApiBOExt.BusPropertiesFieldNameMap">
            <summary>
            Mapping of Business Properties Names to Json Field Names
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IOpenApiBOExt.GetJsonFieldName(System.String)">
            <summary>
            Gets Json field name for the Xml name.
            </summary>
            <param name="xmlFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IOpenApiBOExt.GetXmlTagName(System.String)">
            <summary>
            Gets Xml Tag name for the Json Field name.
            </summary>
            <param name="jsonFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IOpenApiBOExt.SetXmlLoadValues">
            <summary>
            Sets the business properties XmlLoadValue from the Value.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IOpenApiBOExt.RequestXmlTags">
            <summary>
            Name of Business Properties Passed In Request
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IOpenApiBOExt.ValidateRequestTagsOnly">
            <summary>
            Flag to indicate whether to validate only tags coming in request.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IOpenApiBOExt.InitializeAndValidateRequest">
            <summary>
            Method to initialize/validate the rest request
            </summary>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IOpenApiBOExt.ModifyResponse">
            <summary>
            Method to modify the Rest Response
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IOpenApiBOExt.ModifySingleRecordResponse(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Method to modify the single record response result.
            </summary>
            <param name="resultDict"></param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IOpenApiBOExt.ModifyListRecordResponse(System.Object)">
            <summary>
            Method to modify the single list record response result.
            </summary>
            <param name="recordObject">record as JRaw object</param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IOpenApiBOExt.OnAfterBusObjDoAction">
            <summary>
            Method to do custom stuff after the business object do action is executed.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IOpenApiBOExt.GetEncIdKeys">
            <summary>
            Gets the Key columns for EncId.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IOpenApiBOExt.GetEncId(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets the generated encId using key column values
            </summary>
            <param name="encIdKeyValues"></param>
            <returns></returns>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IOpenApiBOExt.RequestObject">
            <summary>
            Request Object of the Rest Call.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IOpenApiBOExt.ResponseResult">
            <summary>
            Response Result of the Rest Call.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IOpenApiBOExt.GetAuditInfo">
            <summary>
            Gets Audit Parameters for the Business Object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IOpenApiBOExt.GetNotesInfo">
            <summary>
            Gets Notes Parameters for the Business Object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IOpenApiBOExt.MoveValueFromRequestToBusField(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,Phoenix.FrameWork.BusFrame.IPhoenixDataType)">
            <summary>
            Moves the value from request json(dictionary) to a business field( property/ object state ).
            </summary>
            <param name="requestObject"></param>
            <param name="requestFieldName"></param>
            <param name="busField"></param>
            <returns></returns>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IOpenApiBOExt.HeaderReqContext">
            <summary>
            Request Context Object as passed in header
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IOpenApiBOExt.RootPath">
            <summary>
            Base REST Path of the Business Object
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IOpenApiBOExt.IsGenericPath(System.String)">
            <summary>
            Determines whether the paased path corresponds to a generic action
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IOpenApiBOExt.GetPath(Phoenix.FrameWork.BusFrame.XmActionType,System.String,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the Rest endpoint for a given action type/ response type id / custom action name.
            </summary>
            <param name="actionType"></param>
            <param name="responseTypeId"></param>
            <param name="customActionName"></param>
            <param name="module"></param>
            <param name="isAuditAction"></param>
            <param name="isNotesAction"></param>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.IOpenApiBOAction">
            <summary>
            Business Object Action Extension to be accessed in REST API
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IOpenApiBOAction.CustomActionName">
            <summary>
            Name of Cuustom Action.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IOpenApiBOAction.ActionType">
            <summary>
            Action Type
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IOpenApiBOAction.ResponseTypeId">
            <summary>
            ResponseTypeId of Action
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IOpenApiBOAction.CustomActionParamsInList">
            <summary>
            Description of Action
            </summary>
            
            <summary>
            Gets the Input Param List For Custom Action.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IOpenApiBOAction.CustomActionParamsOutList">
            <summary>
            Gets the Output Param List For Custom Action.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IOpenApiBOAction.GetRequestModelProperties">
            <summary>
            Gets the collection of properties which make up the request model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IOpenApiBOAction.GetResponseModelProperties">
            <summary>
            Gets the collection of properties which make up the response model.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IOpenApiBOAction.BusPropertiesToSkipInResponse">
            <summary>
            Name of Business Properties to Skip In Response
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IOpenApiBOAction.BusPropertiesToSkipInRequest">
            <summary>
            Name of Business Properties to Skip In Request
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IOpenApiBOAction.PathHasModuleEncId">
            <summary>
            Flag to indicate whether the Rest Path has module encId as part of it's route
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IOpenApiBOAction.PathHasRecordEncId">
            <summary>
            Flag to indicate whether the Rest Path has record encId as part of it's route
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IOpenApiBOAction.IsAuditAction">
            <summary>
            Flag to indicate whether action is an audit action
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IOpenApiBOAction.IsNotesAction">
            <summary>
            Flag to indicate whether action is notes action
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IOpenApiBOAction.EncIdTableName">
            <summary>
            Table Name to which the encId in path corresponds to.
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.IFieldRestDecorator">
            <summary>
            REST Decorator For Fields.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IFieldRestDecorator.Name">
            <summary>
            Name of field
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IFieldRestDecorator.Description">
            <summary>
            Description of Field
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IFieldRestDecorator.Required">
            <summary>
            Required flag for field
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IFieldRestDecorator.MaxLength">
            <summary>
            Max length of field
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IFieldRestDecorator.MinValue">
            <summary>
            Minimum value for field
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IFieldRestDecorator.MaxValue">
            <summary>
            Maximum value for field.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IFieldRestDecorator.FieldType">
            <summary>
            Datatype of field
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.IFieldRestDecorator.ParamType">
            <summary>
            REST Param Type
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.IFieldRestDecorator.GetTypeFromFieldType">
            <summary>
            Converts FieldType to Type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.ISwaggerPath">
            <summary>
            Information for BO Action exposed via REST.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.ISwaggerPath.Path">
            <summary>
            Path if null the Document RootPath will be used.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.ISwaggerPath.OperationId">
            <summary>
            Unique string used to identify the operation. The id MUST be unique among all operations described in the API.
            Tools and libraries MAY use the operationId to uniquely identify an operation, therefore,
            it is RECOMMENDED to follow common programming naming conventions.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.ISwaggerPath.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.ISwaggerPath.Summary">
            <summary>
            Semmary of Action
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.ISwaggerPath.HttpVerb">
            <summary>
            Invocation Verb for Action
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.ISwaggerPath.Parameters">
            <summary>
            Swagger Parameters
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.ISwaggerPath.Responses">
            <summary>
            Swagger Parameters
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.ISwaggerPath.Produces">
            <summary>
            Ouput for the Action
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.ISwaggerPath.Consumes">
            <summary>
            Input for the Action
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.ISwaggerPath.Tags">
            <summary>
            Tags associated with the path
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.ISwaggerResponse">
            <summary>
            Response Information For REST/Swaggger
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.ISwaggerResponse.Name">
            <summary>
            Response Name to use
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.ISwaggerResponse.StatusCode">
            <summary>
            Status Code tied to response
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.ISwaggerResponse.Description">
            <summary>
            Description of Response
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.ISwaggerResponse.ResponseSchema">
            <summary>
            Complete ResponseSchema
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.ISwaggerParameter">
            <summary>
            Swagger Parameters
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.ISwaggerParameter.ArrayItemName">
            <summary>
            Setting this propery will make this scheam as an type of array with the arry of items defined by the ArrayItemName 
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.ISwaggerParameter.Properties">
            <summary>
            Parameters
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.RestParamType">
            <summary>
            REST Parameter Type Enumeration
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.RestParamType.None">
            <summary>
            Unidentified param type used for initialization.
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.RestParamType.Body">
            <summary>
            Parameter passed in body of request
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.RestParamType.Query">
            <summary>
            Parameter passed as query parameter
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.RestParamType.Header">
            <summary>
            Parameter passed in header
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.RestParamType.Path">
            <summary>
            Parameter passed in request url( part of path )
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.HttpVerb">
            <summary>
            HttpVerb
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.HttpVerb.NONE">
            <summary>
            Unidentified type - used for initialization.
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.HttpVerb.GET">
            <summary>
            GET
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.HttpVerb.POST">
            <summary>
            POST
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.HttpVerb.PATCH">
            <summary>
            PATCH
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.HttpVerb.PUT">
            <summary>
            PUT
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.HttpVerb.DELETE">
            <summary>
            DELETE
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.HttpStatusCode">
            <summary>
            Common Http Status Codes Supported
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.HttpStatusCode.Success">
            <summary>
            200 - Success
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.HttpStatusCode.ServerError">
            <summary>
            500 - Server Error
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.HttpStatusCode.NotFound">
            <summary>
            404 - Not Found
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.HttpStatusCode.UnAuthorized">
            <summary>
            401 - UnAuthorized 
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.HttpStatusCode.BadRequest">
            <summary>
            400 - Bad Request
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.HttpStatusCode.SuccesPartial">
            <summary>
            206 - Partial 
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.HttpStatusCode.SuccessAccepted">
            <summary>
            202 - The request has been accepted for processing, but the processing has not been completed. The request might or might not eventually be acted upon, as it might be disallowed when processing actually takes place. There is no facility for re-sending a status code from an asynchronous operation such as this.
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.PMessage">
             <summary>
            
             </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.PMessage.Buttons">
            <summary>
            Message Box Buttons
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.PMessage.Response">
            <summary>
            Response for the message
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.PMessage.DefaultButton">
            <summary>
            Default Button to be selected when the message is presnted to user. Applies only for interactive messages.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.PMessage.QuitOnResponse">
            <summary>
            The user respone on which the system quits further processing. Applies only for interactive messages.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.PMessage.XmlTag">
            <summary>
            XmlTag for the corresponding field
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.PMessage.Id">
            <summary>
            Error Id if applicable
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.PMessage.Text">
            <summary>
            Get/Set Error Text
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.PMessage.Severity">
            <summary>
            ErrorType
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.PMessage.MessageType">
            <summary>
            Message Type indicating type of the message
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PMessage.#ctor(System.String,System.Int32,System.String,Phoenix.FrameWork.Core.MLErrorLevel)">
            <summary>
            Default Constructor
            </summary>
            <param name="xmlTag"></param>
            <param name="errorId"></param>
            <param name="errorText"></param>
            <param name="severity"></param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PMessage.#ctor(System.String,System.Int32,System.String,Phoenix.FrameWork.Core.MLErrorLevel,Phoenix.Windows.Forms.MessageType)">
            <summary>
            Default Constructor
            </summary>
            <param name="xmlTag">Xml Tag refering to the field</param>
            <param name="errorId">Error Id</param>
            <param name="errorText">Error text</param>
            <param name="severity">Severity</param>
            <param name="messageType">Message type</param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PMessage.#ctor(System.Xml.XmlNode)">
             <summary>
            
             </summary>
             <param name="xmlNode"></param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PMessage.#ctor">
            <summary>
            Simple Constructor
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PMessage.#ctor(System.String,System.Int32,System.String,Phoenix.FrameWork.Core.MLErrorLevel,System.String)">
            <summary>
            Default Constructor
            </summary>
            <param name="xmlTag">Xml Tag refering to the field</param>
            <param name="errorId">Error Id</param>
            <param name="errorText">Error text</param>
            <param name="severity">Severity</param>
            <param name="trace">Trace Information</param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PMessage.#ctor(System.String,System.Int32,System.String,Phoenix.FrameWork.Core.MLErrorLevel,System.String,Phoenix.Windows.Forms.MessageType)">
            <summary>
            Default Constructor
            </summary>
            <param name="xmlTag">Xml Tag refering to the field</param>
            <param name="errorId">Error Id</param>
            <param name="errorText">Error text</param>
            <param name="severity">Severity</param>
            <param name="trace">Trace Information</param>
            <param name="messageType">Message type</param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PMessage.Serialize(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Serialize the Data into XMl writer passed
            </summary>
            <param name="xmlWriter">Xml writer</param>
            <param name="valueSerializedAsAttributes">true to serialize  the value as attributes; false otherwise</param>
            <returns></returns>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.PMessage.Trace">
            <summary>
            Trace Information if available
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PMessage.LoadFromNode(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Load the PMessage class from the Xml Node passed
            </summary>
            <param name="valueNode">Node value to load from</param>
            <param name="showNullWarning">Not USED</param>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.PMessageCollection">
            <summary>
            Error Collection
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PMessageCollection.Add(Phoenix.FrameWork.BusFrame.PMessage)">
            <summary>
            Add Message Object
            </summary>
            <param name="msgObject"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PMessageCollection.AddError(Phoenix.FrameWork.BusFrame.IFieldBase,System.Int32,System.String,Phoenix.Windows.Forms.MessageType)">
            <summary>
            Add error to the collection
            </summary>
            <param name="field"></param>
            <param name="errorId"></param>
            <param name="errorText"></param>
            <param name="messageType"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PMessageCollection.AddError(Phoenix.FrameWork.BusFrame.IFieldBase,System.Int32,System.String)">
            <summary>
            Add Error to the collection
            </summary>
            <param name="field">field to ge tthe </param>
            <param name="errorId">Error Id</param>
            <param name="errorText">Error text</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PMessageCollection.AddError(Phoenix.FrameWork.BusFrame.IFieldBase,System.String)">
            <summary>
            Add Error
            </summary>
            <param name="field">field to ge tthe </param>
            <param name="errorText">Error text</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PMessageCollection.AddError(System.Int32,Phoenix.FrameWork.BusFrame.IFieldBase,System.String[])">
            <summary>
            Add error to the collection
            </summary>
            <param name="mlMessageId">ml Message Id</param>
            <param name="field">field which caused the error</param>
            <param name="messageTokens">token to replace in the message</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PMessageCollection.AddWarning(System.Int32,Phoenix.FrameWork.BusFrame.IFieldBase,System.String[])">
            <summary>
            Add warning to the collection
            </summary>
            <param name="mlMessageId">ml Message Id</param>
            <param name="field">field which caused the error</param>
            <param name="messageTokens">token to replace in the message</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PMessageCollection.AddWarning(Phoenix.FrameWork.BusFrame.IFieldBase,System.Int32,System.String)">
            <summary>
            Add Warning
            </summary>
            <param name="field">field corresponding to the error</param>
            <param name="errorId">warning Id</param>
            <param name="errorText">warning Text</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PMessageCollection.AddWarning(Phoenix.FrameWork.BusFrame.IFieldBase,System.Int32,System.String,Phoenix.Windows.Forms.MessageType)">
            <summary>
            Add warning
            </summary>
            <param name="field">field corresponding to the error</param>
            <param name="errorId">warning Id</param>
            <param name="errorText">warning Text</param>
            <param name="messageType">Message Tyoe</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PMessageCollection.AddWarning(Phoenix.FrameWork.BusFrame.IFieldBase,System.String)">
            <summary>
            Add Warning
            </summary>
            <param name="field">field corresponding to the error</param>
            <param name="errorText">warning Text</param>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.PMessageCollection.ErrorCount">
            <summary>
            Get the number of Errors
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.PMessageCollection.WarningCount">
            <summary>
            Get the number of informations
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PMessageCollection.Serialize(System.Xml.XmlWriter,System.Boolean)">
             <summary>
            
             </summary>
             <param name="xmlWriter"></param>
             <param name="valueSerializedAsAttributes"></param>
             <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PMessageCollection.LoadFromNode(System.Xml.XmlNode,System.Boolean)">
             <summary>
            
             </summary>
             <param name="valueNode"></param>
             <param name="showNullWarning"></param>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PMessageCollection.Show(System.Int32,Phoenix.Windows.Forms.MessageType,Phoenix.Windows.Forms.PMessageBoxButtons,Phoenix.Windows.Forms.PMessageBoxDefaultButton,Phoenix.FrameWork.BusFrame.IFieldBase,System.String[])">
            <summary>
            Method invoked from the business object to pop up message box
            </summary>
            <param name="mlMessageId"></param>
            <param name="messageType"></param>
            <param name="messageButtons"></param>
            <param name="defaultButton"></param>
            <param name="field"></param>
            <param name="messageTokens"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PMessageCollection.Clear">
            <summary>
            Clear the List
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PMessageCollection.GetMessageById(System.Int32)">
            <summary>
            Get the message identified by the messageId
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.PXmlWriter">
            <summary>
            Summary description for PXmlWriter.
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.PXmlWriter.IsOpen">
            <summary>
            Returns whether the writer is open or not
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PXmlWriter.#ctor">
            <summary>
            Simple Constructor
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PXmlWriter.#ctor(System.Text.Encoding)">
            <summary>
            Simple Constructor
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.PXmlWriter.StringWriter">
            <summary>
            Get the StringWriter of the object
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.BusFrame.PXmlWriter.XmlWriter">
            <summary>
            Get the Xml Writer of the object
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PXmlWriter.Open">
            <summary>
            Opens a closed writer
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PXmlWriter.Open(System.Text.Encoding)">
            <summary>
            Opens a closed writer
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PXmlWriter.Close">
            <summary>
            Close the internal streams
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.BusFrame.PXmlWriter.ToString">
            <summary>
            Return the string value of the object
            </summary>
            <returns>String</returns>
        </member>
        <member name="T:Phoenix.FrameWork.BusFrame.StringConstants">
            <summary>
            Summary description for StringConstants.
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.RECORD">
            <summary>
            XAPI RECORD  [RECORD]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.RESPONSE">
            <summary>
            XAPI RESPONSE Nodes [RESPONSE]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.SEQUENCE">
            <summary>
            Sequence  [Sequence]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.REFERENCE">
            <summary>
            Reference Number [ReferenceNo]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.RETURN_CODE">
            <summary>
            REturn Code [ReturnCode]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.OVRD_INFO1">
            <summary>
            Override Info 1 [OvrdInfo1]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.OVRD_INFO2">
            <summary>
            Override Info 2	[OvrdInfo2]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.SQL_ERROR">
            <summary>
            SQL Error [SQL]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.XAPI_RESPONSE">
            <summary>
            Xapi Response [XAPI_RESPONSE]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.HRESULT">
            <summary>
            HRESULt [HRESULT]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.NAME">
            <summary>
            name attribute [name]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.VALUE">
            <summary>
            value attribute [value]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.nRC">
            <summary>
            nRC Return Code [Rc]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.PARAMETERS">
            <summary>
            Parameter name [_PARAMETERS_]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.PARAM">
            <summary>
            Parameter name [ _param]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.FILTER">
            <summary>
            Filter element name [_filter]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.FILTER_OPERATOR">
            <summary>
            Filter opertaor [operator]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.OBJECT_ID">
            <summary>
            Object Id [objectId]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.ENUM_TYPE">
            <summary>
            Enumeration Type [enumType]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.ACTION_ALL_FIELDS">
            <summary>
            Select All Field Attribute
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.SELECTED_FIELD">
            <summary>
            Selected Field attribute
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.CUSTOM_ACTION">
            <summary>
            Custom Action  [customAction]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.VALUE_AS_ATTRIBUTES">
            <summary>
            Serialize value as attributes
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.DEFAULT_AS">
            <summary>
            Defaults As attribute [defaultAs]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.DEFAULT_FROM">
            <summary>
            Default from attribute [defaultFrom]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.ENUMERATE">
            <summary>
            Enumerate value [enumerate]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.FOREIGN_KEY_VALUE">
            <summary>
            Foreign Key value [fkValue]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.IS_NULL">
            <summary>
            Is Null Value [isNull]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.CONSTRAINT">
            <summary>
            Constraint [Constraint]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.TRUE_VALUE">
            <summary>
            True Value [1]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.FALSE_VALUE">
            <summary>
            False Value [0]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.OPTION">
            <summary>
            Constraint Option [Option]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.CODE_VALUE">
            <summary>
            Code value for the constraints [code]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.DESCRIPTION_VALUE">
            <summary>
            Description value for the constraints [desc]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.XM_DB_STATUS">
            <summary>
            Xm Db Copy Status [XmDbStatus]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.PRIM_DB_AVAIL">
            <summary>
            Primary Db Available[PrimDbAvailable]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.RIM_NO">
            <summary>
            Rim Number [RimNo]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.LOGON_INFO">
            <summary>
            Logon Info [LOGON_INFO]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.DEBUG_INFO">
            <summary>
            Debug Info Tag [DEBUG_INFO]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.ERROR">
            <summary>
            Error Message GROUP: [ERROR]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.MESSAGE">
            <summary>
            Message Tag [Message]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.TRACE">
            <summary>
            Trace Tav [Trace]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.LEVEL">
            <summary>
            Level Tag [Level]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.ID">
            <summary>
            Id Tag [Id]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.MsgId">
            <summary>
            MessageId  [MsgId]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.MsgSeverityType">
            <summary>
            MsgSeverityType [MsgId]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.MsgSeverity">
            <summary>
            MsgSeverity  [MsgId]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.MsgText">
            <summary>
            MsgSeverity  [MsgId]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.XmlTag">
            <summary>
            MsgSeverity  [MsgId]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.CDataOutput">
            <summary>
            CData Output
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.SERVICE_INFO">
            <summary>
            Service Info Group
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.USER_INFO">
            <summary>
            User Info Group
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.AuthToken">
            <summary>
            Auth Token
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.CARD_INFO">
            <summary>
            CARD_INFO group
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.UPDATE">
            <summary>
            UPDATE group
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.MONETARY">
            <summary>
            MONETARY Group
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.INQUIRY">
            <summary>
            INQUIRY Group
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.DB_ACTION">
            <summary>
            DB_ACTIOn Group
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.RAW_SQL">
            <summary>
            Raw SQL Group
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.XAPI">
            <summary>
            XAPI Group
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.OTHER_INFO">
            <summary>
            String constant for OTHER_INFO
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.SerializeFieldsOnCustomAction">
            <summary>
            Serialize fields on Custom action
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.RelGroup">
            <summary>
            Release Group
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.DbName">
            <summary>
            Database Definition Name
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.ModuleName">
            <summary>
            Module Name
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.PHOENIX_PROPERTIES">
            <summary>
            Field Property attribute: Hex number
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.FIELD_TYPE">
            <summary>
            Field Type attribute
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.ALLOWED_LENGTH">
            <summary>
            Allowed Length
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.VIEW_STATE">
            <summary>
            Allowed Length
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.OUTPUT_TYPEID">
            <summary>
            OutputTypeId element
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.LIST_STARTFROM">
            <summary>
            list From Attribute
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.LIST_NEXT">
            <summary>
            list Count Attribute
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.LIST_MORE">
            <summary>
            Atribute to indicate the list has more result
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.LIST_SCHEMA">
            <summary>
            Atribute to indicate the list has more result
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.AUDIT_KEY">
            <summary>
            Atribute to indicate the list has more result
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.MsgButtons">
            <summary>
            element name to indicate buttons for the message
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.MsgResponse">
            <summary>
            element name to indicate response for the message
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.MsgDefaultButton">
            <summary>
            element name to indicate default button for the interactive type message
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.MsgQuitOnResponse">
            <summary>
            element name to indicate the user response on which the system quits processing for the interactive type message
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.ORDER_BY">
            <summary>
            group indicating ORDER BY
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.FIELD">
            <summary>
            field element [Field]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.SORT">
            <summary>
            sort attribute [sort]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.TRAN_INFO">
            <summary>
            TRAN_INFO xml Tag [TRAN_INFO]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.XAPI_TRAN_CODE">
            <summary>
            XAPI_TRAN_CODE xml Tag [XapiTranCode]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.EFFECTIVE_DT">
            <summary>
            EFFECTIVE_DT xml Tag [EffectiveDt]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.ORIG_BRANCH_NO">
            <summary>
            ORIG_BRANCH_NO xml Tag [OrigBranchNo]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.WF_INFO">
            <summary>
            WF_INFO xml Tag [__WFKEY]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.WF_ID">
            <summary>
            Workflow Id [wfId]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.WF_TASK_ID">
            <summary>
            Workflow Task Id [wfTaskId]
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.SerializeChildBusObjects">
            <summary>
            attribute to indicate whether to Serialize child business objects on response.
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.MODULE_INFO">
            <summary>
            Module name based on windows. Done to handle hard coded module in Merged application.
            </summary>
        </member>
        <member name="F:Phoenix.FrameWork.BusFrame.StringConstants.CLIENT_NETWORK_USER">
            <summary>
            For PhoenixXmExecute Task we need ClientNetworkUser was provided in XML Node.
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Config.ConfigBase">
            <summary>
            Base Class of all Configuration elements
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Config.ConfigBase.#ctor">
            <summary>
            Simple Constructor
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Config.ConfigBase.Name">
            <summary>
            Name of the Configuration element.
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Config.IOtherInfo">
            <summary>
            Onther Information collection used to collection configuration information
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Config.IOtherInfo.Name">
            <summary>
            Name of the configuration parameter
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Config.IOtherInfo.MaskDisplay">
            <summary>
            Does this information must be maked when displayed
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Config.IOtherInfo.Value">
            <summary>
            Value of the configuration parameter
            </summary>
        </member>
        <member name="T:Phoenix.FrameWork.Config.OtherInfo">
            <summary>
            Parameter Information
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Config.OtherInfo.#ctor">
            <summary>
            Simle constructor
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Config.OtherInfo.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of the paramter</param>
            <param name="value">value for the parameter</param>
        </member>
        <member name="M:Phoenix.FrameWork.Config.OtherInfo.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of the paramter</param>
            <param name="value">value for the parameter</param>
            <param name="masked">value of the param should be masked when displayed.</param>
        </member>
        <member name="P:Phoenix.FrameWork.Config.OtherInfo.Value">
            <summary>
            Parameter value
            </summary>
        </member>
        <member name="P:Phoenix.FrameWork.Config.OtherInfo.MaskDisplay">
            <summary>
            The value of the param should be masked when displayed.
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Config.OtherInfo.GetSchema">
            <summary>
            Get schema; return nulls
            </summary>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Config.OtherInfo.ReadXml(System.Xml.XmlReader)">
            <summary>
            Read the Xml
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Phoenix.FrameWork.Config.OtherInfo.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Write the Xml
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Phoenix.FrameWork.Config.OtherInfoCollection">
            <summary>
            Other Info collection
            </summary>
        </member>
        <member name="M:Phoenix.FrameWork.Config.OtherInfoCollection.GetKeyForItem(Phoenix.FrameWork.Config.OtherInfo)">
            <summary>
            implementation of get key
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.FrameWork.Config.OtherInfoCollection.LoadFromXmlNode(System.Xml.XmlNode)">
            <summary>
            Load the Xml Node information information into the colleciton. 
            NOTE: will not reset the collection. 
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="T:Phoenix.Windows.Forms.PBoolState">
            <summary>
            Boolean State
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PBoolState.Default">
            <summary>
            Don't change anything, or Initial Default
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PBoolState.False">
            <summary>
            False Value
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PBoolState.True">
            <summary>
            True Value
            </summary>
        </member>
        <member name="T:Phoenix.Windows.Forms.EnableState">
            <summary>
            Enable State for the field
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.EnableState.Default">
            <summary>
            Don't Change anything
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.EnableState.Enable">
            <summary>
            Enabled 
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.EnableState.Disable">
            <summary>
            Disabled
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.EnableState.DisableShowText">
            <summary>
            Disabled Show Text
            </summary>
        </member>
        <member name="T:Phoenix.Windows.Forms.VisibilityState">
            <summary>
            Visibility State
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.VisibilityState.Default">
            <summary>
            Don't change the existing value
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.VisibilityState.Hide">
            <summary>
            Hidden State
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.VisibilityState.Show">
            <summary>
            Visible State
            </summary>
        </member>
        <member name="T:Phoenix.Windows.Forms.NullabilityState">
            <summary>
            Nullability State
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.NullabilityState.Default">
            <summary>
            Don't change anything or  Initial value
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.NullabilityState.Null">
            <summary>
            Nullable
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.NullabilityState.NotNull">
            <summary>
            Not Nullable
            </summary>
        </member>
        <member name="T:Phoenix.Windows.Forms.PDialogResult">
            <summary>
            Result of the Message Box
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PDialogResult.None">
            <summary>
            Nothing is returned from the dialog box. This means that the modal dialog continues running.
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PDialogResult.OK">
            <summary>
            The dialog box return value is OK (usually sent from a button labeled OK).
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PDialogResult.Cancel">
            <summary>
            The dialog box return value is Cancel (usually sent from a button labeled Cancel).
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PDialogResult.Abort">
            <summary>
            The dialog box return value is Abort (usually sent from a button labeled Abort).
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PDialogResult.Retry">
            <summary>
            The dialog box return value is Retry (usually sent from a button labeled Retry).
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PDialogResult.Ignore">
            <summary>
            The dialog box return value is Ignore (usually sent from a button labeled Ignore).
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PDialogResult.Yes">
            <summary>
            The dialog box return value is Yes (usually sent from a button labeled Yes).
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PDialogResult.No">
            <summary>
            The dialog box return value is No (usually sent from a button labeled No).
            </summary>
        </member>
        <member name="T:Phoenix.Windows.Forms.PMessageBoxButtons">
            <summary>
            Messgae Box Buttons
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PMessageBoxButtons.OK">
            <summary>
            OK
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PMessageBoxButtons.OKCancel">
            <summary>
            Ok + Cancel
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PMessageBoxButtons.AbortRetryIgnore">
            <summary>
            Abort + Retry + Ignore
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PMessageBoxButtons.YesNoCancel">
            <summary>
            Yes + No + Cancel
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PMessageBoxButtons.YesNo">
            <summary>
            Yes + No
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PMessageBoxButtons.RetryCancel">
            <summary>
            Retry + Cancel
            </summary>
        </member>
        <member name="T:Phoenix.Windows.Forms.PValidationResult">
            <summary>
            Validation result enumeration
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PValidationResult.Ok">
            <summary>
            Validation is success
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PValidationResult.Cancel">
            <summary>
            validation is not success
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PValidationResult.Retry">
            <summary>
            validation is not ok, but retry
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PValidationResult.OkRefresh">
            <summary>
            The validation is Ok, but refresh of data is needed
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PValidationResult.CancelRefresh">
            <summary>
            The validation is not sucesss, and refresh of data is needed
            </summary>
        </member>
        <member name="T:Phoenix.Windows.Forms.PMessageBoxDefaultButton">
            <summary>
            Message Box Default Buttons
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PMessageBoxDefaultButton.Button1">
            <summary>
            Button 1
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PMessageBoxDefaultButton.Button2">
            <summary>
            Button 2
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PMessageBoxDefaultButton.Button3">
            <summary>
            Button 3
            </summary>
        </member>
        <member name="T:Phoenix.Windows.Forms.MessageType">
            <summary>
            MessageType
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.MessageType.Stop">
            <summary>
            Stop
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.MessageType.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.MessageType.Question">
            <summary>
            Question
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.MessageType.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.MessageType.Debug">
            <summary>
            Debug
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.MessageType.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.MessageType.SQLError">
            <summary>
            SQLError
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.MessageType.NullTest">
            <summary>
            NullTest
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.MessageType.Duplicate">
            <summary>
            Duplicate
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.MessageType.NoChanges">
            <summary>
            NoChanges
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.MessageType.UnsavedChanges">
            <summary>
            UnsavedChanges
            </summary>
        </member>
        <member name="T:Phoenix.Windows.Forms.PScreenType">
            <summary>
            Phoenix common screen types.  Initialize Action manager with the default actions.
            The programmers should override OnAction methods
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PScreenType.List">
            <summary>
             List view window.  Close, Edit, New actions will be available by default
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PScreenType.ListWithSave">
            <summary>
            Editable List view window. Close and Save actions will be available by default
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PScreenType.Editable">
            <summary>
            Editable Window.  Close, Save action will be available
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PScreenType.EditableWithAddNext">
            <summary>
            Edit window with AddNext. Close, Save, AddNext actions will be available
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PScreenType.Display">
            <summary>
            Display Window takes control. Still Close action will be provided.  This is the Default
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PScreenType.None">
            <summary>
            Display None
            </summary>
        </member>
        <member name="T:Phoenix.Windows.Forms.PResolutionType">
            <summary>
            The resolution type applicable to the screen. The Default is 800 x 600
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PResolutionType.Size800x600">
            <summary>
            Screen Size( resolution ) is 800 x 600
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.PResolutionType.Size1024x768">
            <summary>
            Screen Size( resolution ) is 1024 x 768
            </summary>
        </member>
        <member name="T:Phoenix.Windows.Forms.INotesInfo">
            <summary>
            Interface to define the cont
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.INotesInfo.ScreenId">
            <summary>
            Screen Id of the Notes
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.INotesInfo.ScreenPtid">
            <summary>
            Screen Ptid of the Note
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.INotesInfo.AcctType">
            <summary>
            Account Type of the note
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.INotesInfo.AcctNo">
            <summary>
            Account Number of the Note
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.INotesInfo.RimNo">
            <summary>
            RimNo of the Note
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.INotesInfo.TableName">
            <summary>
            Table Name to locate the note
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.INotesInfo.MemoType">
            <summary>
            Memo Type indicator to define note type
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.INotesInfo.OtherInfo">
            <summary>
            Other information
            </summary>
        </member>
        <member name="T:Phoenix.Windows.Forms.PNotes">
            <summary>
            Class to handle the notes information
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.PNotes.ScreenId">
            <summary>
            Screen Id of the Notes
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.PNotes.ScreenPtid">
            <summary>
            Screend Ptid of the Note. Normally PTID
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.PNotes.AcctType">
            <summary>
            Account Type
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.PNotes.AcctNo">
            <summary>
            Account Number
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.PNotes.RimNo">
            <summary>
            Curtomer Number
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.PNotes.TableName">
            <summary>
            Table Name
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.PNotes.MemoType">
            <summary>
            Memo type indicator on the record
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.PNotes.OtherInfo">
            <summary>
            Other information
            </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.PNotes.ToString">
            <summary>
            ToString format
            </summary>
            <returns></returns>
        </member>
        <member name="M:Phoenix.Windows.Forms.PNotes.LoadFromString(System.String)">
            <summary>
            Loads the string value into the object
            </summary>
            <param name="stringValue"></param>
            <returns></returns>
        </member>
        <member name="T:Phoenix.Windows.Forms.IStatusBar">
            <summary>
            Interface to be implmented by the StatusBar
            </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.IStatusBar.SetStatusText(System.String)">
            <summary>
            set the status text
            </summary>
            <param name="statusText"></param>
        </member>
        <member name="M:Phoenix.Windows.Forms.IStatusBar.ResetStaus">
            <summary>
            Reset the status text.
            </summary>
        </member>
        <member name="T:Phoenix.Windows.Forms.IInfoBox">
            <summary>
            Interface to be implemented by the InformationBox
            </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.IInfoBox.ShowInfo(System.String)">
            <summary>
            show the information
            </summary>
            <param name="statusText"></param>
        </member>
        <member name="M:Phoenix.Windows.Forms.IInfoBox.HideInfo">
            <summary>
            Hide the information box
            </summary>
        </member>
        <member name="T:Phoenix.Windows.Forms.IHandleGlobalActions">
            <summary>
            Interface for GlobalAction providers
            </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.IHandleGlobalActions.ProcessMessage(System.Int32,System.Object,System.ComponentModel.CancelEventArgs,System.Object[])">
            <summary>
            Process Message
            </summary>
            <param name="messageId"></param>
            <param name="sender"></param>
            <param name="eArg"></param>
            <param name="paramList"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.Windows.Forms.IHandleGlobalActions.IsWkspaceActionEnabled(System.Int32,System.Boolean@)">
            <summary>
            Check whether the Workspace action identified by globalActionId is
            </summary>
            <param name="globalActionId"></param>
            <param name="isEnabled"></param>
            <returns>true if handled by this provider;false otherwise</returns>
        </member>
        <member name="T:Phoenix.Windows.Forms.IToolbarLayout">
            <summary>
            interface to be implmented by the windows that want to provide toolbar layout
            </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.IToolbarLayout.SetToolbarLayout(System.Object)">
            <summary>
            Set Toolbar layout
            </summary>
            <param name="toolbar"></param>
            <returns></returns>
        </member>
        <member name="T:Phoenix.Windows.Forms.IAction">
             <summary>
            
             </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.IAction.StatusText">
             <summary>
            
             </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.IAction.Enabled">
             <summary>
            
             </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.IAction.IsActionAuthorized">
             <summary>
            
             </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.IAction.Visible">
             <summary>
            
             </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.IAction.ShortCutText">
             <summary>
            
             </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.IAction.PerformClick">
             <summary>
            
             </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.IAction.UpdateControls">
            <summary>
            Refresh the Visible and Enable state of the controls associated with the action
            </summary>
        </member>
        <member name="T:Phoenix.Windows.Forms.IApplicationBase">
             <summary>
            
             </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.IApplicationBase.StatusBar">
            <summary>
            Get/Set the Status Bar
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.IApplicationBase.InfoBox">
            <summary>
            Get/Set the Information Box
            </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.IApplicationBase.ShowInfo(System.String)">
            <summary>
            Show the information box
            </summary>
            <param name="infoText">The text to be displayed in the information box</param>
        </member>
        <member name="M:Phoenix.Windows.Forms.IApplicationBase.HideInfo">
            <summary>
            Hide the information box
            </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.IApplicationBase.SetStatusText(System.String)">
            <summary>
            Set the status text
            </summary>
            <param name="statusText">The text to be displayed in the status bar</param>
        </member>
        <member name="M:Phoenix.Windows.Forms.IApplicationBase.ResetStatus">
            <summary>
            Reset the status text. "Ready."
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.IApplicationBase.Title">
            <summary>
            Get/Set Title of the application
            </summary>
        </member>
        <member name="T:Phoenix.Windows.Forms.IMessageBoxService">
            <summary>
            MessageBox Service provider
            </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.IMessageBoxService.ShowMessage(Phoenix.FrameWork.BusFrame.PMessage)">
            <summary>
            Return the DialogResult in iteger form
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.Windows.Forms.IMessageBoxService.ShowExceptions(System.Exception)">
            <summary>
            Show unhandled Exception
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:Phoenix.Windows.Forms.IApplicationBaseEx">
            <summary>
            Application base Extenstion
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.IApplicationBaseEx.CurrentWorkspaceHandle">
            <summary>
            Get the current workspace handle
            </summary>
        </member>
        <member name="T:Phoenix.Windows.Forms.IFormBase">
             <summary>
            
             </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.IFormBase.ScreenId">
            <summary>
            ScreenId to get the Transalation information, and security
            </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.IFormBase.OnActionClose">
            <summary>
            Handler for close Action Click
            </summary>
            <returns></returns>
        </member>
        <member name="P:Phoenix.Windows.Forms.IFormBase.IsNew">
            <summary>
            Is the window is displayed to create a new record.
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.IFormBase.IsDirty">
            <summary>
            Any contor on this windows has been modified
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.IFormBase.IsWksTopMostWindow">
            <summary>
            Is this window a topmost window on the workspace
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.IFormBase.TitleText">
            <summary>
            TitleText for the window
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.IFormBase.TitleTextShort">
            <summary>
            Short title text for the window
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.IFormBase.XmlKey">
            <summary>
            Xml Key to recreate the window
            </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.IFormBase.GetNotesInfo">
            <summary>
            get the NotesInformationfor this window
            </summary>
            <returns></returns>
        </member>
        <member name="M:Phoenix.Windows.Forms.IFormBase.OnNotesClick(System.Object)">
            <summary>
            handle the Notes Click
            </summary>
            <param name="sender"></param>
        </member>
        <member name="P:Phoenix.Windows.Forms.IFormBase.ActionManagerRedirect">
            <summary>
            Actionredirect delegate
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.IFormBase.UIAccessProvider">
            <summary>
            Get the UI Access Provider
            </summary>
        </member>
        <member name="T:Phoenix.Windows.Forms.IContentBase">
             <summary>
            
             </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.IContentBase.ShowPrev">
            <summary>
            Show the previous window
            </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.IContentBase.ShowNext">
            <summary>
            show the next window
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.IContentBase.CanForward">
            <summary>
            Do we have any window after the current window, so that the forward navigation can be enabled
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.IContentBase.CanGoBack">
            <summary>
            Do we have any window before the current windows, so that the Back Navigation can be enabled
            </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.IContentBase.ShowFirstWindow">
            <summary>
            Show the first window in the collection
            </summary>
        </member>
        <member name="T:Phoenix.Windows.Forms.IWorkspaceBase">
             <summary>
            
             </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.IWorkspaceBase.UniqueName">
            <summary>
            Get the Unique name of the workspace
            </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.IWorkspaceBase.OnNavForwardClick(System.Object,System.EventArgs)">
            <summary>
            Handle Forward naviagtion click
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Phoenix.Windows.Forms.IWorkspaceBase.OnNavBackClick(System.Object,System.EventArgs)">
            <summary>
            Handle Back Navigation click
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Phoenix.Windows.Forms.IWorkspaceBase.OnClose(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            handle the close key
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Phoenix.Windows.Forms.IWorkspaceBase.HandleTabKey(System.Boolean)">
            <summary>
            hanlde the tab key
            </summary>
            <param name="forward"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.Windows.Forms.IWorkspaceBase.CloseAll">
            <summary>
            close all windows in the workspace
            </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.IWorkspaceBase.BringToFront">
            <summary>
            Brig the workspace to front
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.IWorkspaceBase.Text">
            <summary>
            title text of the workspace
            </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.IWorkspaceBase.UpdateView">
            <summary>
            Update the view of the screen
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.IWorkspaceBase.UIAccessProvider">
            <summary>
            Get the UI Access Provider
            </summary>
        </member>
        <member name="T:Phoenix.Windows.Forms.IAuditExtension">
            <summary>
            Audit Extentsion to be used by the shared application
            </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.IAuditExtension.Initialize">
            <summary>
            View audit enabled
            </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.IAuditExtension.CreateViewAudit(Phoenix.Windows.Forms.INotesInfo,System.DateTime,System.DateTime,System.String)">
            <summary>
            Create view audit information
            </summary>
            <param name="auditKey"></param>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <param name="moduleName"></param>
            <returns></returns>
        </member>
        <member name="T:Phoenix.Windows.Forms.IUninitialize">
            <summary>
            Interface to handle custom uninitialize
            </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.IUninitialize.Uninitialize">
            <summary>
            Uninitialize Function
            </summary>
        </member>
        <member name="T:Phoenix.Windows.Forms.IWkspaceExtension">
            <summary>
            Interface definnition for Workspace Extension
            </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.IWkspaceExtension.Attach(Phoenix.Windows.Forms.IWorkspaceBase)">
            <summary>
            Attache the extension to the workspace
            </summary>
            <param name="worspace"></param>
        </member>
        <member name="M:Phoenix.Windows.Forms.IWkspaceExtension.UpdateView(Phoenix.Windows.Forms.IFormBase)">
            <summary>
            Update the workspace
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:Phoenix.Windows.Forms.IWkspaceExtension.SetTitleText(System.String)">
            <summary>
            Repaint the title
            </summary>
            <param name="newTitleText"></param>
        </member>
        <member name="M:Phoenix.Windows.Forms.IWkspaceExtension.InitGlobalActions">
            <summary>
            Initialize the global actions
            </summary>
            <returns></returns>
        </member>
        <member name="T:Phoenix.Windows.Forms.IFormExtensionBase">
            <summary>
            Interface definition for formextension
            </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.IFormExtensionBase.Attach(Phoenix.Windows.Forms.IFormBase)">
            <summary>
            attach the extension to the form
            </summary>
            <param name="form">parent form</param>
        </member>
        <member name="M:Phoenix.Windows.Forms.IFormExtensionBase.GetNotes(Phoenix.Windows.Forms.INotesInfo)">
            <summary>
            Get the Note information
            </summary>
            <param name="noteInfo"></param>
        </member>
        <member name="M:Phoenix.Windows.Forms.IFormExtensionBase.ShowNextNote(Phoenix.Windows.Forms.IFormBase)">
            <summary>
            Show NextNote
            </summary>
            <param name="phoenixForm"></param>
        </member>
        <member name="M:Phoenix.Windows.Forms.IFormExtensionBase.ShowNotes(Phoenix.Windows.Forms.IFormBase)">
            <summary>
            Show Notes
            </summary>
            <param name="phoenixForm"></param>
        </member>
        <member name="P:Phoenix.Windows.Forms.IFormExtensionBase.PopupCount">
            <summary>
            Get the number of popup mesage to be displayed
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.IFormExtensionBase.NotesCount">
            <summary>
            Get the number of Notest the window has
            </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.IFormExtensionBase.Reset">
            <summary>
            Reset the form information
            </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.IFormExtensionBase.AddPopup(System.Int32)">
            <summary>
            Add a new popup
            </summary>
            <param name="memoId"></param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.Windows.Forms.IFormExtensionBase.ShowAudits">
            <summary>
            Show Audit window
            </summary>
            <returns></returns>
        </member>
        <member name="M:Phoenix.Windows.Forms.IFormExtensionBase.VerifyConfAcctAccess(System.Object,System.String,System.String,System.String)">
             <summary>
            
             </summary>
             <param name="sender"></param>
             <param name="confAcctType"></param>
             <param name="confAcctNo"></param>
             <param name="isConf"></param>
             <returns></returns>
        </member>
        <member name="M:Phoenix.Windows.Forms.IFormExtensionBase.SetConfAcctInfo(System.Object,System.String@,System.String@)">
             <summary>
            
             </summary>
             <param name="sender"></param>
             <param name="confAcctType"></param>
             <param name="confAcctNo"></param>
        </member>
        <member name="M:Phoenix.Windows.Forms.IFormExtensionBase.ResizeWindow(System.Object)">
             <summary>
            
             </summary>
             <param name="fw"></param>
        </member>
        <member name="M:Phoenix.Windows.Forms.IFormExtensionBase.MaximizeWindow(Phoenix.Windows.Forms.IFormBase)">
             <summary>
            
             </summary>
             <param name="fw"></param>
        </member>
        <member name="T:Phoenix.Windows.Forms.GetActionManagerDelegate">
            <summary>
            Public action redirect delegate
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="T:Phoenix.Windows.Forms.IActionManager">
            <summary>
            Dummy Interface for ActionManager
            </summary>
        </member>
        <member name="T:Phoenix.Windows.Forms.StandardAction">
            <summary>
            Defines the list of Actions that can be performed on a Phoenix Business Object
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.StandardAction.None">
            <summary>
            None Defined
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.StandardAction.New">
            <summary>
            New Action
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.StandardAction.Edit">
            <summary>
            Edit Action
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.StandardAction.AddNext">
            <summary>
            Adde Next Action
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.StandardAction.Save">
            <summary>
            Save Action
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.StandardAction.Close">
            <summary>
            Close Action
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.StandardAction.Ok">
            <summary>
            Ok Action
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.StandardAction.Cancel">
            <summary>
            Cancel Action
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.StandardAction.LookUp">
            <summary>
            Lookup Action, (e.g)pbGetAccount
            </summary>
        </member>
        <member name="T:Phoenix.Windows.Forms.ISummaryDisplayProvider">
            <summary>
            Summary of Display provider
            </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.ISummaryDisplayProvider.DisplayCustomer(Phoenix.Windows.Forms.IWorkspaceBase,System.String,System.String,System.String)">
            <summary>
            Display Customer
            - CustomerNo is null then try usi ng the acctTyp, acctNo to display get the customer number
            </summary>
            <param name="workspace"></param>
            <param name="acctType"></param>
            <param name="acctNo"></param>
            <param name="customerNo">is passed as string, to accomodate non Phoenix implementation</param>
            <returns></returns>
        </member>
        <member name="M:Phoenix.Windows.Forms.ISummaryDisplayProvider.DisplayAccount(Phoenix.Windows.Forms.IWorkspaceBase,System.String,System.String)">
            <summary>
            Display account information
            </summary>
            <param name="workspace"></param>
            <param name="acctType"></param>
            <param name="acctNo"></param>
            <returns></returns>
        </member>
        <member name="T:Phoenix.Windows.Forms.PFormInfo">
            <summary>
            Window information
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.PFormInfo.DomainName">
            <summary>
            Domain Name
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.PFormInfo.FormName">
            <summary>
            Form Name to display
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.PFormInfo.AssemblyName">
            <summary>
            Assembly Name of the window
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.PFormInfo.ClassName">
            <summary>
            Class Name of the window
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.PFormInfo.AdditionalInfo">
            <summary>
            Information Text to display
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.PFormInfo.BussinessObjectName">
            <summary>
            Business Object Used in the window
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.PFormInfo.TableName">
            <summary>
            Priamay Table Name used in the window
            </summary>
        </member>
        <member name="P:Phoenix.Windows.Forms.PFormInfo.AssemblyLocation">
            <summary>
            Assembly base directory
            </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.PFormInfo.MakeToolTipText">
            <summary>
            Return
            </summary>
            <returns></returns>
        </member>
        <member name="T:Phoenix.Windows.Forms.IFormInfo">
            <summary>
            Interface to provide Window Info
            </summary>
        </member>
        <member name="M:Phoenix.Windows.Forms.IFormInfo.GetFormInfo">
            <summary>
            Get Window Info
            </summary>
            <returns></returns>
        </member>
        <member name="T:Phoenix.Windows.Forms.WfDocumentFormat">
            <summary>
            Workflow Document Formats
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.WfDocumentFormat.Undefined">
            <summary>
            Document definition is not defined
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.WfDocumentFormat.OpenXml">
            <summary>
            Open XML format
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.WfDocumentFormat.RichText">
            <summary>
            RTF format
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.WfDocumentFormat.PlainText">
            <summary>
            Plain Text Format
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.WfDocumentFormat.Html">
            <summary>
            Html Format
            </summary>
        </member>
        <member name="T:Phoenix.Windows.Forms.UtilityCategory">
            <summary>
            Utility Category Types.  Aside from InternalOnly, the
            types correspond to DevExpress FunctionCategory for
            use in the workflow designer.
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.UtilityCategory.InternalOnly">
            <summary>
            DecExpress 
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.UtilityCategory.DateTime">
            <summary>
            DevExpress Datetime
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.UtilityCategory.Logical">
            <summary>
            DevExpress
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.UtilityCategory.Math">
            <summary>
            Dx Math
            </summary>
        </member>
        <member name="F:Phoenix.Windows.Forms.UtilityCategory.Text">
            <summary>
            Dx Text
            </summary>
        </member>
        <member name="T:HFS.Workflow.Shared.WfCoreService">
            <summary>
            Coreservice for Workflow Clientservice Call
            </summary>
        </member>
        <member name="P:HFS.Workflow.Shared.WfCoreService.ApplicationSetting">
            <summary>
            Workflow Application Setting
            </summary>
        </member>
        <member name="P:HFS.Workflow.Shared.WfCoreService.DataService">
            <summary>
            Data Service to use for Workflow
            </summary>
        </member>
        <member name="P:HFS.Workflow.Shared.WfCoreService.AuthToken">
            <summary>
            Authentication Inforamtion for Workflow
            </summary>
        </member>
        <member name="P:HFS.Workflow.Shared.WfCoreService.Instance">
            <summary>
            Singleton Instance
            </summary>
        </member>
    </members>
</doc>
